//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.3
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2020.10.13 at 10:14:19 PM BST
//

package net.sf.mpxj.planner.schema;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the net.sf.mpxj.planner.schema package.
 * &lt;p&gt;An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 *
 */
@XmlRegistry public class ObjectFactory
{

   /**
    * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: net.sf.mpxj.planner.schema
    *
    */
   public ObjectFactory()
   {
   }

   /**
    * Create an instance of {@link Project }
    *
    */
   public Project createProject()
   {
      return new Project();
   }

   /**
    * Create an instance of {@link Properties }
    *
    */
   public Properties createProperties()
   {
      return new Properties();
   }

   /**
    * Create an instance of {@link Property }
    *
    */
   public Property createProperty()
   {
      return new Property();
   }

   /**
    * Create an instance of {@link ListItem }
    *
    */
   public ListItem createListItem()
   {
      return new ListItem();
   }

   /**
    * Create an instance of {@link Phases }
    *
    */
   public Phases createPhases()
   {
      return new Phases();
   }

   /**
    * Create an instance of {@link Phase }
    *
    */
   public Phase createPhase()
   {
      return new Phase();
   }

   /**
    * Create an instance of {@link Calendars }
    *
    */
   public Calendars createCalendars()
   {
      return new Calendars();
   }

   /**
    * Create an instance of {@link DayTypes }
    *
    */
   public DayTypes createDayTypes()
   {
      return new DayTypes();
   }

   /**
    * Create an instance of {@link DayType }
    *
    */
   public DayType createDayType()
   {
      return new DayType();
   }

   /**
    * Create an instance of {@link Interval }
    *
    */
   public Interval createInterval()
   {
      return new Interval();
   }

   /**
    * Create an instance of {@link Calendar }
    *
    */
   public Calendar createCalendar()
   {
      return new Calendar();
   }

   /**
    * Create an instance of {@link DefaultWeek }
    *
    */
   public DefaultWeek createDefaultWeek()
   {
      return new DefaultWeek();
   }

   /**
    * Create an instance of {@link OverriddenDayTypes }
    *
    */
   public OverriddenDayTypes createOverriddenDayTypes()
   {
      return new OverriddenDayTypes();
   }

   /**
    * Create an instance of {@link OverriddenDayType }
    *
    */
   public OverriddenDayType createOverriddenDayType()
   {
      return new OverriddenDayType();
   }

   /**
    * Create an instance of {@link Days }
    *
    */
   public Days createDays()
   {
      return new Days();
   }

   /**
    * Create an instance of {@link Day }
    *
    */
   public Day createDay()
   {
      return new Day();
   }

   /**
    * Create an instance of {@link Tasks }
    *
    */
   public Tasks createTasks()
   {
      return new Tasks();
   }

   /**
    * Create an instance of {@link Task }
    *
    */
   public Task createTask()
   {
      return new Task();
   }

   /**
    * Create an instance of {@link Constraint }
    *
    */
   public Constraint createConstraint()
   {
      return new Constraint();
   }

   /**
    * Create an instance of {@link Predecessors }
    *
    */
   public Predecessors createPredecessors()
   {
      return new Predecessors();
   }

   /**
    * Create an instance of {@link Predecessor }
    *
    */
   public Predecessor createPredecessor()
   {
      return new Predecessor();
   }

   /**
    * Create an instance of {@link ResourceGroups }
    *
    */
   public ResourceGroups createResourceGroups()
   {
      return new ResourceGroups();
   }

   /**
    * Create an instance of {@link Group }
    *
    */
   public Group createGroup()
   {
      return new Group();
   }

   /**
    * Create an instance of {@link Resources }
    *
    */
   public Resources createResources()
   {
      return new Resources();
   }

   /**
    * Create an instance of {@link Resource }
    *
    */
   public Resource createResource()
   {
      return new Resource();
   }

   /**
    * Create an instance of {@link Allocations }
    *
    */
   public Allocations createAllocations()
   {
      return new Allocations();
   }

   /**
    * Create an instance of {@link Allocation }
    *
    */
   public Allocation createAllocation()
   {
      return new Allocation();
   }

}
