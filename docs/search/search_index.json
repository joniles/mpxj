{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to MPXJ! This library enables you to read project plans (sometimes known as schedules or programmes) from a variety of file formats and databases, and can also write that information to a variety of file formats.</p> <p>The library is based on data structures which follow the way schedule data is represented by Microsoft Project, extended to accommodate features and concepts from other applications.</p>"},{"location":"#sponsors","title":"Sponsors","text":"<p>Work to build and maintain MPXJ is kindly supported by my sponsors:</p> <p> </p> <p> </p> <p>Head over to my sponsors page if you'd like to see your name and logo here!</p>"},{"location":"#file-formats","title":"File Formats","text":"<p>MPXJ can read file formats including MPX, MPP, MSPDI, MPD, Planner, Primavera P6, Primavera P3, SureTrak, Asta Powerproject, Asta Easyplan, Phoenix, Fasttrack, GanttProject, TurboProject, ConceptDraw PROJECT, Synchro, Gantt Designer, SDEF, Sage 100 Contractor Schedule Grid and Project Commander.</p> <p>MPXJ can also write schedule data as MPX, MSPDI, PMXML, Planner and SDEF files.</p> <p>More details of the supported file formats can be found here.</p>"},{"location":"#languages","title":"Languages","text":"<p>MPXJ is written and maintained in Java, however this is no barrier to using its functionality in other languages. Thanks to IKVM, MPXJ is available for .Net, allowing it to be used from any .Net language.</p> <p>There is also now a Ruby Gem which provides native Ruby access to read from schedule files using MPXJ, and a Python package which wraps the Java library to provide full read/write access to schedule files.</p> <p>You may be able to leverage MPXJ from other languages too, for example the  PHP/Java Bridge can be used to expose the complete MPXJ API in PHP.</p>"},{"location":"#contact","title":"Contact","text":"<p>Having problems? Need support? All the details you need can be found on the support page.</p> <p>Using MPXJ successfully somewhere? I'd love to hear from you about your experiences. Do tell me what's missing or what could be better - I can use this feedback to guide future development work. It would also be great to add a link to your website from the MPXJ users page.</p> <p>Finally, if you're deriving value from MPXJ, please consider sponsoring me to ensure I can continue enhancing and maintaining the library. Thank you!</p>"},{"location":"#licensing","title":"Licensing","text":"<p>MPXJ is distributed under the terms of the GNU LGPL a copy of which can be found in the root of the distribution. Please read this license carefully! It will cost you nothing to use MPXJ commercially or non-commercially, but you must comply with the terms of the license.</p> <p>Please see the legal folder within the distribution for details of the licences for the third party libraries used by MPXJ.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This library includes functionality provided by:</p> <ul> <li>POI</li> <li>IKVM.NET</li> <li>RTF Parser Kit</li> <li>SQLITE-JDBC</li> <li>ZLIB/CONTRIB</li> <li>JWAT</li> <li>JSOUP</li> </ul> <p>This library has been built with the assistance of:</p> <ul> <li>JProfiler Java Profiler</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#1214-unreleased","title":"12.1.4 (unreleased)","text":""},{"location":"CHANGELOG/#1213-2023-09-25","title":"12.1.3 (2023-09-25)","text":"<ul> <li>Added the Project Properties attribute Relationship Lag Calendar and implemented read and write support for this for P6 schedules. (Contributed by Rohit Sinha).</li> <li>Improve compatibility of PMXML files with P6 EPPM by moving the Schedule Options tag.</li> <li>Ensure Baseline Projects in PMXML files include Schedule Options and Location Object ID.</li> </ul>"},{"location":"CHANGELOG/#1212-2023-09-21","title":"12.1.2 (2023-09-21)","text":"<ul> <li>Updates to improve compatibility with versions of Java after Java 8.</li> <li>Ensure timestamps with fractional sections are read correctly from Phoenix PPX files (Based on a contribution by Rohit Sinha).</li> <li>Improve handling of double quotes when reading and writing XER files.</li> <li>To allow XER files written by MPXJ to be imported correctly by P6, ensure that they have a single top level WBS entry (Based on a contribution by Alex Matatov)</li> <li>Ensure that <code>ProjectProperties.getCustomProperties()</code> returns an empty Map rather than returning <code>null</code> if no custom properties have been configured.</li> <li>Ensure project calendars and project activity codes are nested within the project tag of PMXML files.</li> </ul>"},{"location":"CHANGELOG/#1211-2023-08-23","title":"12.1.1 (2023-08-23)","text":"<ul> <li>Fix an issue preventing native SQLite library from loading when using the .Net version of MPXJ on macOS.</li> </ul>"},{"location":"CHANGELOG/#1210-2023-08-22","title":"12.1.0 (2023-08-22)","text":"<ul> <li>Write schedule options to PMXML abd XER files.</li> <li>Fix an arithmetic error in RateHelper when converting a rate from minutes to hours.</li> <li>Introduced new methods to RateHelper accepting a <code>TimeUnitDefaultsContainer</code> argument rather than a <code>ProjectFile</code> for greater flexibility. Marked methods taking a <code>ProjectFile</code> argument as deprecated.</li> <li>Ensure Early Finish and Late Finish are populated for Asta milestones and tasks.</li> <li>Don't attempt to calculate total slack if start slack or finish slack are missing.</li> <li>Ensure completed tasks are not marked as critical.</li> <li>Improve handling of non-standard Boolean values in MPX files.</li> <li>Improve Total Slack calculation for P6 projects.</li> <li>Handle finish milestones with <code>null</code> actual start date for actual duration calculation when reading PMXML files (Contributed by Andrew Marks).</li> </ul>"},{"location":"CHANGELOG/#1202-2023-07-25","title":"12.0.2 (2023-07-25)","text":"<ul> <li>Ensure that the Fixed Cost attribute is rolled up from activities to WBS entries when reading P6 schedules.</li> </ul>"},{"location":"CHANGELOG/#1201-2023-07-21","title":"12.0.1 (2023-07-21)","text":"<ul> <li>Improve resource hierarchy handling.</li> <li>Improve handling of external tasks read from MSPDI files.</li> <li>Improve handling of resource assignments read from Asta PP files containing multiple baselines.</li> <li>Improve filtering to ignore hammock tasks in Asta PP files and ensure that non-hammock items are not incorrectly ignored.</li> <li>Improve handling of bars without additional linked data read from Asta PP files.</li> <li>Ensure that invalid duplicate Unique ID values encountered when reading schedule data are renumbered to maintain uniqueness.</li> <li>Improve reading certain FastTrack FTS files.</li> <li>Roll up the expense item at completion values read from P6 schedules to the task Fixed Cost attribute.</li> </ul>"},{"location":"CHANGELOG/#1200-2023-06-29","title":"12.0.0 (2023-06-29)","text":"<ul> <li>NOTE: this is a major version release, breaking changes have been made to the MPXJ API as documented below.</li> <li>Timestamps, dates, and times are now represented by <code>java.time.LocalDateTime</code>, <code>java.time.LocalDate</code> and <code>java.time.LocalTime</code> respectively, rather than <code>java.util.Date</code> as they were originally.</li> <li>For .Net users, new <code>ToDateTime</code> and <code>ToNullableDateTime</code> extension methods have been provided to convert <code>java.time.LocalDateTime</code>, <code>java.time.LocalDate</code>, <code>java.time.LocalTime</code> to <code>DateTime</code> instances.</li> <li>For .Net users, new <code>ToJavaLocalDateTime</code>, <code>ToJavaLocalDate</code> and <code>ToJavaLocalTime</code> extension methods have been provided to convert <code>DateTime</code> instances to <code>java.time.LocalDateTime</code>, <code>java.time.LocalDate</code>, and <code>java.time.LocalTime</code>.</li> <li>The class <code>net.sf.mpxj.Day</code> has been replaced by <code>java.time.DayOfWeek</code>.</li> <li>All code previously marked as deprecated has been removed.</li> <li>Added support for reading and writing the Activity attribute \"Expected Finish\" for P6 schedules.</li> </ul>"},{"location":"CHANGELOG/#1154-2023-06-27","title":"11.5.4 (2023-06-27)","text":"<ul> <li>Improve accuracy of dates read from Synchro, Suretrak and Turboproject files.</li> <li>By default ignore errors in individual records read from XER files. This matches P6's behavior when importing XER files. Use the <code>PrimaveraXERFileReader.setIgnoreErrors</code> method to change the behavior.</li> </ul>"},{"location":"CHANGELOG/#1153-2023-06-19","title":"11.5.3 (2023-06-19)","text":"<ul> <li>When writing an XER file, provide the necessary default values to allow non-P6 schedules to be successfully imported into P6.</li> <li>Ensure multi-day exceptions are written to XER files correctly.</li> <li>Ensure GanttProject exception dates are read correctly.</li> <li>More closely match the Planner predecessor lag calculation.</li> <li>Ensure that <code>java.sql.Date</code> values are correctly formatted when writing XER files.</li> <li>When reading from a P6 database, check to ensure the location table is present before attemting to read locations.</li> </ul>"},{"location":"CHANGELOG/#1152-2023-06-08","title":"11.5.2 (2023-06-08)","text":"<ul> <li>Improve accuracy of calendar data read from certain Powerproject schedules.</li> <li>Improve handling of unusual XER files with calendar time ranges expressed in 12-hour format.</li> <li>Correctly parse midnight represented as 24:00:00 from MSPDI files written by certain non-Microsoft Project applications.</li> <li>For MSPDI files produced by applications other than Microsoft Project which have an incorrectly nested calendar hierarchy, avoid pruning derived calendars which are referenced elsewhere in the hierarchy.</li> </ul>"},{"location":"CHANGELOG/#1151-2023-05-24","title":"11.5.1 (2023-05-24)","text":"<ul> <li>Improve read performance when working with large schedules.</li> <li>Improve read and write performance of code handling resource calendars.</li> <li>Updated to use sqlite-jdbc 3.42.0.0</li> </ul>"},{"location":"CHANGELOG/#1150-2023-05-19","title":"11.5.0 (2023-05-19)","text":"<ul> <li>Added the ability to read Subproject data embedded in MSPDI files.</li> <li>Added the ability to read timephased baseline work and cost from MSPDI files.</li> <li>Added the ability to write timephased baseline work and cost to MSPDI files.</li> <li>Improve accuracy of timephased baseline work read from MPP files.</li> <li>Ensure that non-recurring calendar exceptions take precedence over recurring calendar exceptions.</li> <li>Avoid creating duplicate calendar exceptions when reading Asta PP files.</li> <li>Added the Bar Name attribute to Task, which is accessed using the <code>getBarName</code> and <code>setBarName</code> methods. This is populated with the name of the bar to which a task belongs when reading an Asta Powerproject schedule.</li> <li>When reading schedules from XER files and P6 databases, ensure durations without a value are returned as <code>null</code> rather than as a zero duration.</li> </ul>"},{"location":"CHANGELOG/#1140-2023-05-08","title":"11.4.0 (2023-05-08)","text":"<ul> <li>Added the \"Resource Pool File\" attribute to ProjectProperties, which represents the full path of the resource pool used by an MPP file. This attribute is accessible via the <code>getResourcePoolFile</code> and <code>setResourcePoolFile</code> methods.</li> <li>Added the <code>getResourcePoolObject</code> method to allow the resource pool file to be located and read</li> <li>Added support for reading the task attribute Subproject GUID from MPP files. This attribute can be accessed via the <code>getSubprojectGUID</code> and <code>setSubprojectGUID</code> methods.</li> <li>Added support for the task attribute \"External Project\". When this attribute is true it indicates that the task represents a subproject. The attribute is accessed via the <code>getExternalProject</code> and <code>setExternalProject</code> methods.</li> <li>When reading an MSPDI file with external task predecessors, MPXJ now attempts to recreate the placeholder external tasks which would be present if the equivalent MPP file was read.</li> <li>External task predecessors are now represented when writing an MSPDI file.</li> <li>Added the Task method <code>getSubprojectObject</code> which allows the caller to retrieve a ProjectFile instance representing the external project linked to a task.</li> <li>Added the Task method <code>expandSubproject</code>. For task which represent an external project, this method automatically loads the external project and attaches the tasks it contains as children of the current task. This is analogous to the behavior in Microsoft Project where a subproject is expanded to reveal the tasks it contains.</li> <li>Added the ProjectFile method <code>expandSubprojects</code> which identifies any tasks in the project which represent an external project and expands them, linking the tasks from the external project as children of the task in the parent project. Note that the method works recursively so multiple levels of external tasks will be expanded.</li> <li>Updated to ensure that the <code>internal_name</code> attribute of a <code>UserdefinedField</code> is generated if not present.</li> <li>Updated to avoid an exception when reading notebook topics from PMXML files.</li> <li>Marked the Task method <code>setSubprojectName</code> as deprecated. Use the <code>setSubProjectFile</code> method instead.</li> <li>Marked the Task method <code>getSubprojectName</code> as deprecated. Use <code>getSubprojectFile</code> instead.</li> <li>Marked the Task method <code>setExternalTaskProject</code> as deprecated. Use the <code>setSubprojectFile</code> method instead.</li> <li>Marked the Task method <code>getExternalTaskProject</code> as deprecated. Use the <code>getSubprojectFile</code> method instead.</li> <li>Marked the ProjectFile method <code>getSubProjects</code> as deprecated. Use the subproject attributes on individual tasks instead.</li> <li>Marked the Task methods <code>getSubProject</code> and <code>setSubProject</code> as deprecated. Use the subproject attributes instead.</li> </ul>"},{"location":"CHANGELOG/#1132-2023-04-29","title":"11.3.2 (2023-04-29)","text":"<ul> <li>Improve default values provided for P6 calendars with missing data.</li> <li>Implement both \"planned dates\" and \"current dates\" strategies for populating P6 baselines.</li> <li>Ensure the Project GUID is read from MPP files.</li> </ul>"},{"location":"CHANGELOG/#1131-2023-04-21","title":"11.3.1 (2023-04-21)","text":"<ul> <li>Improve accuracy of resource assignment Actual Start and Actual Finish dates when reading MPP files.</li> <li>Avoid generating timephased data for zero duration tasks.</li> <li>Improve preservation of custom timephased data start and end times.</li> </ul>"},{"location":"CHANGELOG/#1130-2023-04-12","title":"11.3.0 (2023-04-12)","text":"<ul> <li>Implemented <code>PrimaveraXERFileWriter</code> to allow MPXJ to write XER files.</li> <li>Updated the <code>ActivityCode</code> class to ensure that both the scope Project ID and EPS ID can be represented when reading a P6 schedule. (Potentially breaking change if you were using this class).</li> <li>Ensure secondary constraint date and type are written to PMXML files.</li> <li>Ensure leveling priority is written to PMXML files.</li> <li>Ensure WBS UDF values are written to PMXML files.</li> <li>Ensure integer UDF values are read correctly from XER files and P6 databases.</li> <li>Add methods to allow the project's default calendar unique ID to be set and retrieved.</li> <li>Add method to allow a calendar's parent calendar unique ID to be retrieved.</li> <li>Add method to allow a task's parent task unique ID to be retrieved.</li> <li>Add methods to allow a resource assignment's role unique ID to be set and retrieved.</li> <li>Add methods to allow a resource assignment's cost account unique ID to be set and retrieved.</li> <li>Add method to allow a cost account's parent unique ID to be retrieved.</li> <li>Add method to allow an expense item's cost account unique ID to be retrieved.</li> <li>Add method to allow an expense item's category unique ID to be retrieved.</li> <li>Added <code>WorkContour.isDefault()</code> method to allow \"built in\" resource curves/work contours to be distinguished from user defined curves.</li> <li>Updated to retrieve the project's start date from Phoenix PPX files (Contributed by Rohit Sinha).</li> <li>Provide access to notebook topics from P6 schedules via the <code>ProjectFile.getNotesTopics()</code> method.</li> <li>Capture unique ID of Activity and WBS notes from P6 schedules.</li> <li>Improve the calculation used to determine At Completion Duration of activities when reading XER files and P6 databases.</li> <li>Improve representation of certain duration values written to MSPDI files.</li> <li>Improve accuracy of certain work calculations where the specified time period does not start with a working day.</li> <li>Fix an issue which caused negative timephased work values to be generated when reading certain MPP files.</li> <li>Fix an issue reading XER files where the <code>critical_drtn_hr_cnt</code> field is expressed a decimal rather than an integer.</li> <li>Fix an issue populating the WBS attribute for activities read from certain XER files.</li> </ul>"},{"location":"CHANGELOG/#1120-2023-03-13","title":"11.2.0 (2023-03-13)","text":"<ul> <li>The project property Critical Slack Limit is now represented as a <code>Duration</code> rather than as an <code>Integer</code>. (Potentially breaking change if you were using this property directly).</li> <li><code>TaskType</code> is now a simple enum with all Microsoft Project specific functionality moved into <code>TaskTypeHelper</code>. (Potentially breaking change if you were using the <code>TaskType</code> methods <code>getInstance</code> or <code>getValue</code> in your code)</li> <li>When reading the task type from P6 schedule the mapping to the MPXJ <code>TaskType</code> enum has been updated to more closely match P6. The main changes are that the P6 type \"Fixed Units\" now maps to <code>TaskType.FIXED_WORK</code> and the \"Fixed Duration &amp; Units\" type now maps to a new enumeration value <code>TaskType.FIXED_DURATION_AND_UNITS</code>.</li> <li>Added support for reading project calendar exceptions from Phoenix schedules (based on a contribution by Rohit Sinha).</li> <li>The Resource attribute Active now defaults to true if the schedule being read doesn't support or contain a value for this attribute.</li> <li>Add support for reading and writing the Resource's Active flag for P6 schedules.</li> <li>Add support for reading and writing the Resource's Default Units/Time value for P6 schedules.</li> <li>Add support for reading and writing the Project's Critical Slack Limit value for P6 schedules.</li> <li>Fixed an issue reading certain types of Enterprise Custom Fields containing date values.</li> <li>Ensure activity code value parent can be set to null.</li> <li>Improved existing .Net extension methods and added support for more types.</li> <li>Added NuGet package icon</li> <li>Simplified  NuGet packaging</li> </ul>"},{"location":"CHANGELOG/#1110-2023-02-15","title":"11.1.0 (2023-02-15)","text":"<ul> <li>Write activity code definitions and activity code assignments to PMXML files.</li> <li>Added support for \"secure\" and \"max length\" attributes to the <code>ActivityCode</code> class.</li> <li>Added <code>getChildCodes</code> method to <code>ActivityCode</code> and <code>ActivityCodeValue</code> to make it easier to traverse activity code values hierarchically.</li> <li>Added <code>setDescription</code> method to <code>Step</code> class to make it simpler to add a plan text description.</li> </ul>"},{"location":"CHANGELOG/#1100-2023-02-08","title":"11.0.0 (2023-02-08)","text":"<ul> <li>User defined fields read from P6, Asta and GanttProject schedules are now represented by instances of <code>UserDefinedField</code>. They will no longer be mapped to custom field instances.</li> <li>Enterprise Custom Fields read from MPP and MSPDI files are now represented by instances of <code>UserDefinedField</code>.</li> <li>When writing MSPDI files, UserDefinedField instances which were originally read from enterprise custom fields will be written to the MSPDI file as enterprise custom fields.</li> <li>When writing MSPDI files, UserDefinedField instances which were from applications other than Microsoft Project will automatically be mapped to available custom fields.</li> <li>When writing MPX files, UserDefinedField instances will automatically be mapped to available custom fields.</li> <li>The <code>UserDefinedField</code> type implements the <code>FieldType</code> interface and so can be used with the <code>FieldContainer</code> <code>get</code> and <code>set</code> methods to work with the contents of the user defined fields.</li> <li>The <code>ProjectFile.getUserDefinedFields()</code> method has been added to provide access to all user defined fields defined in the project.</li> <li>The <code>CustomFieldContainer</code> returned by <code>ProjectFile.getCustomFields()</code> will contain entries for all <code>UserDefinedField</code> instances.</li> <li>The various <code>getFieldTypeByAlias</code> and <code>getFieldByAlias</code> methods will retrieve user defined fields by name.</li> <li>Added the convenience method <code>ProjectFile.getPopulatedFields()</code> to retrieve details of all populated fields across the project. This avoids the caller having to individually retrieve the populated fields from the tasks container, resource container and so on.</li> <li>Updated the <code>getPopulatedFields</code> methods to return a <code>Set</code> of <code>FieldType</code> rather than a <code>Set</code> of <code>TaskField</code>, <code>ResourceField</code> etc.</li> <li>The various <code>getPopulatedFields</code> methods will include instances of <code>UserDefinedField</code> in the returned collection if relevant.</li> <li>All <code>ENTERPRISE_CUSTOM_FIELDn</code> values have been removed from the <code>TaskField</code>, <code>ResourceField</code>, <code>AssignmentField</code> and <code>ProjectField</code> enumerations.</li> <li>The <code>getEnterpriseCustomField</code> and <code>setEnterpriseCustomField</code> methods have been removed from <code>ProjectProperties</code>, Task<code>,</code>Resource<code>and</code>ResourceAssignment`.</li> <li>Project UDFs are now read from P6 schedules.</li> <li>Project UDFs are now written to PMXML files.</li> <li>All code previously marked as deprecated has been removed.</li> </ul>"},{"location":"CHANGELOG/#10162-2023-01-29","title":"10.16.2 (2023-01-29)","text":"<ul> <li>Updated to improve reading resource attributes from certain MPP14 files.</li> </ul>"},{"location":"CHANGELOG/#10161-2023-01-26","title":"10.16.1 (2023-01-26)","text":"<ul> <li>Updated to make resource curve definitions (work contours) available in the <code>WorkContourContainer</code>. This container is accessed using the <code>ProjectFile.getWorkContours()</code> method.</li> </ul>"},{"location":"CHANGELOG/#10160-2023-01-24","title":"10.16.0 (2023-01-24)","text":"<ul> <li>Improve accuracy when normalising timephased data.</li> <li>Add support for reading activity steps from XER files, PMXML files and Primavera databases.</li> <li>Add support for writing activity steps to PMXML files.</li> <li>Updated PMXML schema to version 22.12.</li> <li>Updated methods in the <code>GanttBarCommonStyle</code> and <code>GanttBarStyle</code> classes to use a <code>FieldType</code> instance rather than a <code>TaskField</code> instance to allow more flexibility. (Note: this may be a breaking change if you are currently using these classes.)</li> <li>Optionally include some Microsoft Project layout data in JSON output.</li> </ul>"},{"location":"CHANGELOG/#10150-2023-01-11","title":"10.15.0 (2023-01-11)","text":"<ul> <li>Avoid writing invalid characters to PMXML, MSPDI and Planner XML files.</li> <li>Improve handling of slack values for schedules which only contain a value for total slack.</li> <li>Add support for reading constraint type and constraint date from Phoenix schedules (based on a contribution by Rohit Sinha).</li> <li>Improve timephased data calculation when assignment has zero units.</li> <li>Improve handling of very large duration values when reading and writing MSPDI files.</li> <li>Ensure the Task attributes Active, Constraint Type, Task Mode, and Type always have a value.</li> <li>Ensure the Resource attributes Type, Calculate Costs from Units, and Role always have a value.</li> <li>Ensure the Resource Assignment attributes Calculate Costs from Units, Rate Index, and Rate Source always have a value.</li> <li>Add version number constant to the Java source, accessible as <code>MPXJ.VERSION</code>.</li> <li>Ensure that UDF values are read for WBS entries in PMXML files.</li> <li>Avoid writing duplicate resource assignments to MPX files.</li> </ul>"},{"location":"CHANGELOG/#10141-2022-11-25","title":"10.14.1 (2022-11-25)","text":"<ul> <li>Fix CVE-2022-41954: Temporary File Information Disclosure Vulnerability (Contributed by Jonathan Leitschuh)</li> </ul>"},{"location":"CHANGELOG/#10140-2022-11-21","title":"10.14.0 (2022-11-21)","text":"<ul> <li>Handle missing default calendar when reading a PMXML file.</li> <li>When reading an MPP file using a file name or <code>File</code> instance, ensure a more memory-efficient approach is used.</li> <li>Improve reading certain FastTrack FTS files.</li> <li>Improve generation of timephased data where working time ends at midnight.</li> <li>Improve generation of timephased data for tasks with a calendar assigned.</li> </ul>"},{"location":"CHANGELOG/#10130-2022-11-16","title":"10.13.0 (2022-11-16)","text":"<ul> <li>Add support for reading a resource assignment's cost account from P6 schedules.</li> <li>Add support for writing a resource assignment's cost account to PMXML files.</li> <li>Read resource assignment custom field definitions present in MPP14 files.</li> <li>Improve identification of deleted resources when reading MPP9 files.</li> <li>Ensure tasks with task calendars in MPP files are handled correctly when generating timephased data.</li> <li>Improve generation of timephased data for material resource assignments.</li> <li>Improve accuracy of timephased data when reading certain MPP files.</li> </ul>"},{"location":"CHANGELOG/#10120-2022-11-01","title":"10.12.0 (2022-11-01)","text":"<ul> <li>Added the Resource Assignment attribute Calculate Costs From Units, and added read and write support for Primavera schedules.</li> <li>Added the Resource attribute Calculate Costs From Units, and added read and write support for Primavera schedules.</li> <li>Added the Resource and Role attribute Sequence Number, and added read and write support for Primavera schedules.</li> <li>Added the WBS attribute Sequence Number, and added read and write support for Primavera schedules.</li> <li>Ensure activity type is read from Phoenix schedules. (Contributed by Christopher John)</li> <li>Deprecate the <code>CostAccount</code> method <code>getSequence</code> and replace with <code>getSequenceNumber</code> to improve naming consistency.</li> <li>Deprecate the <code>ExpenseCategory</code> method <code>getSequence</code> and replace with <code>getSequenceNumber</code> to improve naming consistency.</li> <li>Avoid possible ArrayIndexOutOfBoundsException when reading GUID values from MPP files (Contributed by Rohit Sinha).</li> </ul>"},{"location":"CHANGELOG/#10110-2022-09-27","title":"10.11.0 (2022-09-27)","text":"<ul> <li>Deprecated the <code>Resource</code> methods <code>getParentID</code> and <code>setParentID</code>. Replaced with <code>getParentResourceUniqueID</code> and <code>setParentResourceUniqueID</code> for clarity and consistency.</li> <li>Added the <code>Resource</code> methods <code>setParent</code> and <code>getParent</code>.</li> <li>Added the <code>ChildResourceContainer</code> interface and <code>ResourceContainer.updateStructure</code> method to ensure that resources can be accessed hierarchically when reading a schedule.</li> <li>Added the <code>ResourceAssignment</code> methods <code>getFieldByAlias</code> and <code>setFieldByAlias</code> to simplify working with custom fields, and mkae the API consistent with existing methods on <code>Task</code> and <code>Resource</code>.</li> <li>Added the <code>TaskContainer</code> methods <code>getCustomFields</code> and <code>getFieldTypeByAlias</code> to simplify access to task custom fields.</li> <li>Added the <code>ResourceContainer</code> methods <code>getCustomFields</code> and <code>getFieldTypeByAlias</code> to simplify access to resource  custom fields.</li> <li>Added the <code>ResourceAssignmentContainer</code> methods <code>getCustomFields</code> and <code>getFieldTypeByAlias</code> to simplify access to resource assignment custom fields.</li> <li>Added the <code>getCustomFieldsByFieldTypeClass</code> method to <code>CustomFieldContainer</code> to allow retrieval of custom field details by parent class.</li> <li>Deprecated the <code>CustomFieldContainer</code> method <code>getFieldByAlias</code> to be replaced by <code>getFieldTypeByAlias</code> to provide a more consistent method name.</li> <li>Don't attempt to write unknown extended attributes to MSPDI files.</li> <li>Don't populate graphical indicator data if the graphical indicator is not enabled.</li> <li>Don't set custom field aliases to empty strings.</li> <li>Added the <code>CustomFieldContainer</code> method <code>add</code>.</li> <li>Deprecated the <code>CustomFieldContainer</code> method <code>getCustomField</code>, which is replaced by the <code>get</code> method (which returns <code>null</code> if the field type is not configured) and the <code>getOrCreate</code> method (which will return an existing configuration or create a new one if the requested field does not yet have a configuration).</li> </ul>"},{"location":"CHANGELOG/#10100-2022-09-13","title":"10.10.0 (2022-09-13)","text":"<ul> <li>Add an option to import Phoenix schedules as a flat set of tasks with separate activity codes, rather than creating a hierarchy of tasks from the activity codes. Note the default is to disable this behavior so existing functionality is unchanged. (Contributed by Christopher John)</li> <li>Add a <code>setProperties</code> method to reader classes to allow configuration to be supplied via a <code>Properties</code> instance rather than having to call setter methods. Properties passed to the <code>UniversalProjectReader</code> version of this method will be forwarded to the reader class <code>UniversalProjectReader</code> chooses to reader the supplied file. Properties for multiple reader classes can be included in the <code>Properties</code> instance, each reader class will ignore irrelevant properties.</li> <li>Added the <code>get</code> method to <code>Task</code>, <code>Resource</code>, <code>ResourceAssignment</code> and <code>ProjectProperties</code> as a replacement for the <code>getCurrentValue</code> method. The new <code>get</code> method is paired with the existing <code>set</code> method to provide read and write access to attributes of these classes. This change is intended to improve the interfaces to these classes by making them more consistent, and thus easier to understand.</li> <li>Deprecated the <code>getCurrentValue</code> method on the <code>Task</code>, <code>Resource</code>, <code>ResourceAssignment</code> and <code>ProjectProperties</code> classes. Use the new <code>get</code> method instead.</li> <li>Add getter and setter methods for the Resource attributes Cost Center, Budget Cost, Budget Work, Baseline Budget Cost, Baseline Budget Work, Baseline Budget Cost 1-10, and Baseline Budget Work 1-10.</li> <li>Add getter and setter methods for the Task attributes Response Pending, Scheduled Start,  Scheduled Finish, Scheduled Duration, Budget Cost, Budget Work, Baseline Budget Cost, Baseline Budget Work, Baseline Budget Cost 1-10, and Baseline Budget Work 1-10.</li> <li>Added support for the Resource Cost Centre attribute for MSPDI files.</li> <li>Move MPP file-specific functionality for determining baseline values from the Task class into the MPP reader class.</li> <li>Improve handling of the TaskMode attribute.</li> <li>Don't set a Task's Critical attribute unless we have valid slack values.</li> <li>Ensure <code>ResourceAssignment</code> calculated fields are returned correctly when using the <code>getCurrentValue</code> method.</li> <li>Ensure <code>ProjectProperties</code> calculated fields are returned correctly when using the <code>getCurrentValue</code> method.</li> <li>Updated to use jsoup 1.15.3</li> </ul>"},{"location":"CHANGELOG/#1091-2022-08-31","title":"10.9.1 (2022-08-31)","text":"<ul> <li>Ensure monthly and yearly recurrences are calculated correctly when the supplied start date is the same as the first recurrence date (Contributed by Rohit Sinha).</li> <li>Add support for reading task calendars from Phoenix files (Contributed by Rohit Sinha).</li> <li>Improve reliability of ProjectCleanUtility when using the replacement strategy.</li> </ul>"},{"location":"CHANGELOG/#1090-2022-08-23","title":"10.9.0 (2022-08-23)","text":"<ul> <li>Added the <code>ResourceAssignment.getEffectiveRate</code> method to allow the cost rate effective on a given date for a resource assignment to be calculated. For P6 schedules this will take account of the cost rate configuration included as part of the resource assignment.</li> <li>For P6 schedules, the <code>ResourceAssignment.getCostRateTable</code> method now takes in account any cost rate configuration details from the resource assignment when determining which table to return.</li> <li>A resource's Standard Rate, Overtime Rate and Cost per Use are now all derived from the resource's cost rate table, and not stored as attributes of the resource itself.</li> <li>The resource methods <code>setStandardRate</code>, <code>setOvertimeRate</code>, and <code>setCostPerUse</code> have been deprecated. These attributes can now only be set or updated by modifying the resource's cost rate table.</li> <li>When writing MPX files, only include attributes which have a non-empty, non-default value in at least one task or resource.</li> <li>When writing MPX files, ensure attributes which have calculated values are used.</li> <li>Add support for reading a resource assignment's rate type from P6 schedules. The rate type is accessed via the <code>ResourceAssignment.getRateIndex</code> method. The value returned by this method can be used to select the required rate using the <code>CostRateTableEntry,getRate</code> method.</li> <li>Add support for writing a resource assignment's rate type to PMXML files.</li> <li>Add support for reading a resource assignment's role from P6 schedules. The role is accessed via the <code>ResourceAssignment.getRole</code> and <code>ResourceAssignment.setRole</code> methods.</li> <li>Add support for writing a resource assignment's role to PMXML files.</li> <li>Add support for reading a resource assignment's override rate (Price / Unit) from P6 schedules. The rate is accessed via the <code>ResourceAssignment.getOverrideRate</code> and <code>ResourceAssignment.setOverrideRate</code> methods.</li> <li>Add support for writing a resource assignment's override rate (Price / Unit) to PMXML files.</li> <li>Add support for reading a resource assignment's rate source from P6 schedules. The rate source is accessed via the <code>ResourceAssignment.getRateSource</code> and <code>ResourceAssignment.setRateSource</code> methods.</li> <li>Add support for writing a resource assignment's rate source to PMXML files.</li> </ul>"},{"location":"CHANGELOG/#1080-2022-08-17","title":"10.8.0 (2022-08-17)","text":"<ul> <li>When reading P6 schedules, all five cost rates for a resource are now available via the <code>CostRateTableEntry.getRate</code> method.</li> <li>All five rates from each cost rate table entry can now be written to PMXML files.</li> <li>When reading files written by Microsoft Project, resource rate values now use the same units as seen by the end user rather than defaulting to hours as was the case previously. (For example, if the user sees $8/day in the source application, you will receive a Rate instance of $8/day rather than $1/hr).</li> <li>The values for a resource's standard rate, overtime rate, and cost per use attributes are now derived from the cost rate table. The values stored on the resource itself are only used if a cost rate table for the resource is not present.</li> <li>The Resource methods <code>getStandardRateUnits</code> and <code>getOvertimeRateUnits</code> are deprecated. Use the <code>getStandardRate</code> and <code>getOvertimeRate</code> methods to retrieve a <code>Rate</code> instance which will include the units for these rates.</li> <li>The Resource methods <code>setStandardRateUnits</code> and <code>setOvertimeRateUnits</code> are deprecated. Supply <code>Rate</code> instances to the <code>setStandardRate</code> and <code>setOvertimeRate</code> methods with the required units instead.</li> <li>The CostRateTableEntry methods <code>getStandardRateUnits</code> and <code>getOvertimeRateUnits</code> are deprecated. Use the <code>getStandardRate</code> and <code>getOvertimeRate</code> methods to retrieve a <code>Rate</code> instance which will include the units for these rates.</li> <li>Ensure rates are formatted \"per hour\" when writing MSPDI and PMXML files.</li> <li>Include cost rate tables in JSON output.</li> </ul>"},{"location":"CHANGELOG/#1070-2022-08-09","title":"10.7.0 (2022-08-09)","text":"<ul> <li>Use Jackcess to read Asta MDB and Microsoft Project MPD files. This allows these file to be read on platforms other than Windows.</li> <li>Improve support for reading correctly typed values for enterprise custom fields from MPP files.</li> <li>Improve array index validation when reading GUID values from MPP files.</li> </ul>"},{"location":"CHANGELOG/#1062-2022-06-29","title":"10.6.2 (2022-06-29)","text":"<ul> <li>Ensure <code>ProjectCleanUtility</code> can load dictionary words from distribution jar.</li> <li>Improve handling of calendars without days read from PMXML files.</li> </ul>"},{"location":"CHANGELOG/#1061-2022-06-14","title":"10.6.1 (2022-06-14)","text":"<ul> <li>Updated to use POI 5.2.2</li> <li>Updated to use sqlite-jdbc 3.36.0.3</li> <li>Updated to use jsoup 1.15.1</li> </ul>"},{"location":"CHANGELOG/#1060-2022-06-08","title":"10.6.0 (2022-06-08)","text":"<ul> <li>Added support for reading and writing the unique ID of P6 user defined fields via new <code>getUniqueID</code> and <code>setUniqueID</code> methods on `CustomField (based on a suggestion by Wes Lund).</li> <li>Added support for reading and writing scope, scope ID, and sequence number attributes for activity codes (based on a suggestion by Wes Lund).</li> <li>Added support for reading and writing sequence number and color attributes for activity code values (based on a suggestion by Wes Lund).</li> <li>Added <code>isWorking</code> method to <code>ProjectCalendarException</code> to make it clearer how to determine if the exception changes the dates it is applied to into working or non-working days.</li> <li>Improve reading task start from certain Planner files.</li> <li>Improve reading predecessor lag values from Planner files.</li> <li>Ensure calendar hierarchy is written correctly to Planner files.</li> <li>Don't write null tasks to Planner files as Planner will not read files which contain them.</li> <li>When writing Planner file, ignore constraint types which Planner can't represent.</li> <li>Don't write emply predecessor lists to Planner files.</li> <li>Improve handling of lag duration when writing Planner files.</li> <li>Improve ProjectCalendar start date calculation when we have long runs of non-working days.</li> <li>Performance enhancement for timephased data normalisation.</li> </ul>"},{"location":"CHANGELOG/#1050-2022-05-24","title":"10.5.0 (2022-05-24)","text":"<ul> <li>The <code>ProjectCalendarWeek</code> methods <code>addCalendarHours()</code>, <code>attachHoursToDay</code>, <code>removeHoursFromDay</code> have been removed. Use <code>addCalendarHours(day)</code>, <code>removeCalendarHours(day)</code> instead. (Note: this will be a breaking change if you were using the original methods to create or modify a schedule)</li> <li>The <code>ProjectCalendar</code> methods <code>attachHoursToDay</code> and <code>removeHoursFromDay</code> have been removed. Use the <code>addCalendarHours</code> and <code>removeCalendarHours</code> methods instead. (Note: this will be a breaking change if you were using the original methods to create or modify a schedule)</li> <li>The class hierarchy for <code>ProjectCalendarHours</code> and <code>ProjectCalendarException</code> has been simplified, but there should be no impact for uses of these classes.</li> <li>The <code>ProjectCalendarHours</code> class now implements the <code>List</code> interface. Methods in this class not part ofthe <code>List</code> interface have been deprecated in favour of the equivalent <code>List</code> methods.</li> <li>Updated <code>MPXWriter</code> to ensure: calendar names are quoted if necessary, all calendars have names, all calendar names are unique.</li> <li>Updated <code>MPXReader</code> to recognise <code>wk</code> as a valid time unit.</li> <li>Updated <code>MPXWriter</code>, <code>PrimaveraPMFileWriter</code>, <code>SDEFWriter</code> and <code>PlannerWriter</code> to ensure any working weeks defined by a calendar are represented by exceptons.</li> <li>Updated <code>MSPDIWriter</code> to ensure any working weeks defined by a calendar are represented in the \"legacy\" exception definition used by Microsoft Project prior to 2007.</li> <li>Updated <code>SDEFWriter</code> to ensure: only relevant calendars are written, and derived calendars are flattened.</li> <li>When reading Planner schedules MPXJ will no longer create an \"artificial\" resource calendar for each resource. Resources will be linked directly to the calendar used in the original schedule.</li> <li>Add support for reading the P6 calendar type and personal calendar flag from P6 schedules.</li> <li>Add support for writing the calendar type and personal calendar flag to PMXML files.</li> <li>Updated the calendar class hierarchy: <code>ProjectCalendar</code> and <code>ProjectCalendarWeek</code> both now inherit from a new class <code>ProjectCalendarDays</code>. Note that <code>ProjectCalendar</code> is no longer a subclass of <code>ProjectCalendarWeek</code>.</li> <li>The <code>getHours</code> and <code>isWorkingDay</code> methods have been moved up to <code>ProjectCalendar</code> from the <code>ProjectCalendarWeek</code> class.</li> <li>The <code>ProjectCalendar</code> method <code>copy</code> has been deprecated, without replacement.</li> <li>Added a <code>getWork</code> method to <code>ProjectCalendar</code> which calculates the amount of work given a <code>Day</code> instance.</li> <li>Added <code>removeWorkWeek</code> and <code>removeCalendarException</code> methods to <code>ProjectCalendar</code>.</li> <li>Recurring exceptions are now added to a <code>ProjectCalendar</code> using the <code>addCalendarException</code> method which takes a <code>recurringData</code> instance its argument.</li> <li>The <code>ProjectCalendarException</code> method <code>setRecurringData</code> has been removed, recurring exceptions should be added using the <code>addCalendarExcepton</code> method described above. (Note: this will be a breaking change if you were creating recurring exceptions)</li> </ul>"},{"location":"CHANGELOG/#1040-2022-05-05","title":"10.4.0 (2022-05-05)","text":"<ul> <li>Remove <code>getParent</code>, <code>setParent</code>, and <code>isDerived</code> from <code>ProjectCalendarWeek</code>. (Note: this will be a breaking change if you were working with <code>ProjectCalendarWeek</code> directly).</li> <li>The <code>ProjectProperties</code> methods <code>getDefaultCalendarName()</code> and <code>setDefaultCalendarName()</code> have been deprecated. Use <code>getDefaultCalendar()</code> and <code>setDefaultCalendar()</code> instead.</li> <li>Ensure that percent complete values can be read from MSPDI files even if the values are decimals.</li> <li>Improve handling of the default calendar when reading certain MSPDI files.</li> <li>Improve reading certain Phoenix PPX files.</li> <li>Improve reading certain FastTrack FTS files.</li> <li>Improve formatting of time project properties when written to JSON.</li> <li>Improve reading MPP files generated by Microsoft Project 16.0.15128.20158 and later versions.</li> </ul>"},{"location":"CHANGELOG/#1030-2022-04-29","title":"10.3.0 (2022-04-29)","text":"<ul> <li>General improvements to make calendar data read from different file formats more consistent.</li> <li>When reading P6 and Powerproject schedules MPXJ will no longer create an \"artificial\" resource calendar for each resource. Resources will be linked directly to the calendars they use in the original schedule.</li> <li>Update <code>MPXWriter</code> and <code>MSPDIWriter</code> to ensure that, when written, calendars are correctly structured in the form required by Microsoft Project.</li> <li><code>JsonWriter</code> now includes calendar data as part of its output.</li> <li>The <code>ProjectCalendar</code> methods <code>setMinutesPerDay</code>, <code>setMinutesPerWeek</code>, <code>setMinutesPerMonth</code> and <code>setMinutesPerYear</code> have been deprecated, use <code>setCalendarMinutesPerDay</code>, <code>setCalendarMinutesPerWeek</code>, <code>setCalendarMinutesPerMonth</code> and <code>setCalendarMinutesPerYear</code> instead.</li> <li>The ProjectCalendar method <code>setResource</code> has been deprecated and will not be replaced. Use the Resource method <code>setCalendar</code> or <code>setCalendarUniqueID</code> to link a calendar with a resource.</li> <li>The ProjectCalendar method <code>getResource</code> has been deprecated. Use the <code>getResources</code> method instead to retrieve all resources linked with a calendar.</li> <li>The <code>Resource</code> methods <code>addResourceCalendar</code>, <code>setResourceCalendar</code>, <code>getResourceCalendar</code>, <code>setResourceCalendarUniqueID</code> and <code>getResourceCalendarUniqueID</code> have been deprecated and replaced by <code>addCalendar</code>, <code>setCalendar</code>, <code>getCalendar</code>, <code>setCalendarUniqueID</code> and <code>getCalendarUniqueID</code> respectively.</li> </ul>"},{"location":"CHANGELOG/#1020-2022-03-06","title":"10.2.0 (2022-03-06)","text":"<ul> <li>Improvements to writing currency, rate and units amounts to MSPDI files.</li> <li>When reading MPP and MSPDI files, calendar exceptions representing a single range of days, but defined as a recurring exception are converted to a range of days, removing the unnecessary recurring definition.</li> <li>Added <code>StructuredTextParser</code> to replace original code handling calendar data, project properties and curve data read from XER files and Primavera databases. Can also be used to extract data from Primavera Layout Files (PLF).</li> <li>Improve recognition of contoured resource assignments read from MPP files.</li> <li>Improve retrieval of resource assignment confirmed, response pending, linked fields, and team status pending flags from certain MPP files.</li> </ul>"},{"location":"CHANGELOG/#1010-2022-01-29","title":"10.1.0 (2022-01-29)","text":"<ul> <li>Improve PMXML file compatibility with P6.</li> <li>Strip any trailing invalid characters from text read from FTS files.</li> <li>Ensure all tasks read from Powerproject and Project Commander have unique IDs.</li> <li>Correct expansion of exceptions from a weekly recurring calendar exception.</li> <li>Ensure that expanded calendar exceptions are written to file formats which do not support recurring exceptions.</li> <li>Ensure that start and finish dates are set when reading milestones from GanttProject files.</li> </ul>"},{"location":"CHANGELOG/#1005-2022-01-11","title":"10.0.5 (2022-01-11)","text":"<ul> <li>Ensure <code>Task.getActivityCodes()</code> returns an empty list rather than <code>null</code> when no activity code values have been assigned.</li> <li>Default to using ASCII when reading and writing SDEF files, as per the SDEF specification.</li> <li>Provide methods to set and get the charset used when reading and writing SDEF files.</li> </ul>"},{"location":"CHANGELOG/#1004-2022-01-07","title":"10.0.4 (2022-01-07)","text":"<ul> <li>Added support for reading Code Library values (as Activity Codes) from Powerproject files.</li> <li>Updated <code>ProjectCleanUtility</code> to provide a \"replace\" strategy alongside the original \"redact\" strategy.</li> </ul>"},{"location":"CHANGELOG/#1003-2021-12-22","title":"10.0.3 (2021-12-22)","text":"<ul> <li>Fix issue with null tasks from certain MPP files introduced in 10.0.2.</li> </ul>"},{"location":"CHANGELOG/#1002-2021-12-16","title":"10.0.2 (2021-12-16)","text":"<ul> <li>Improve identification of null tasks for certain MPP files.</li> </ul>"},{"location":"CHANGELOG/#1001-2021-12-10","title":"10.0.1 (2021-12-10)","text":"<ul> <li>Avoid false positives when detecting password protected MPP files.</li> </ul>"},{"location":"CHANGELOG/#1000-2021-12-01","title":"10.0.0 (2021-12-01)","text":"<ul> <li>Added support for .NET Core 3.1</li> <li>Nuget packages now explicitly target .NET Framework 4.5 (<code>net45</code>) and .NET Core 3.1 (<code>netcoreapp3.1</code>)</li> </ul>"},{"location":"CHANGELOG/#983-2021-11-30","title":"9.8.3 (2021-11-30)","text":"<ul> <li>Improve reliability when reading certain Phoenix files.</li> <li>Ensure multiple trailing nul characters are stripped from text when reading schedules from a Primavera database.</li> </ul>"},{"location":"CHANGELOG/#982-2021-11-01","title":"9.8.2 (2021-11-01)","text":"<ul> <li>Improve accuracy of identifying null tasks in certain MPP files.</li> <li>Improve accuracy of identifying valid tasks in certain MPP files.</li> <li>Ensure hierarchical outline code values are read correctly from MSPDI files.</li> <li>Improve support for files produced by recent versions of FastTrack.</li> </ul>"},{"location":"CHANGELOG/#981-2021-10-13","title":"9.8.1 (2021-10-13)","text":"<ul> <li>Added support for Phoenix 5 schedules.</li> <li>Improve handling of null tasks read from MPP files.</li> </ul>"},{"location":"CHANGELOG/#980-2021-09-30","title":"9.8.0 (2021-09-30)","text":"<ul> <li>Introduced the BaselineStrategy interface and implementing classes. (Note: this includes a breaking change if you were using the ProjectFile.setBaseline method and supplying a lambda. You will now need to implement a BaselineStrategy and set this in ProjectConfig before setting a baseline).</li> <li>Improved accuracy of baseline attributes for Primavera schedules.</li> </ul>"},{"location":"CHANGELOG/#970-2021-09-28","title":"9.7.0 (2021-09-28)","text":"<ul> <li>Add Sprint ID and Board Status ID attributes to task.</li> <li>Introduce the TimeUnitDefaultsContainer to allow constants for time unit conversions to be obtained from both project properties and calendars.</li> <li>Duration attributes are no longer returned as Duration instances by the ruby gem, they are now returned as floating point numbers. By default, durations are expressed in seconds. A new optional argument to MPXJ::Reader.read allows you to change the units used to express durations. (Note: this is a breaking change for users of the ruby gem)</li> <li>Update JsonWriter to use a relevant calendar when converting durations.</li> <li>Ensure default calendar is set correctly when reading XER and PMXML files, and P6 databases.</li> <li>Use default hours per day/week/month/year when reading P6 XER files or databases if these values are not present.</li> <li>Ensure that the minutes per day/week/month/year attributes are copied when a calendar is copied.</li> <li>When reading P6 schedules, roll up calendar for WBS entries when child activities all share the same calendar.</li> <li>Generate missing minutes per day/week/month/year for calendars read from P6 schedules.</li> <li>Inherit minutes per day/week/month/year from base calendars (Note: minor method signature changes on ProjectProperties and ProjectCalendar).</li> <li>Allow explicit values to be set for project minutes per week and minutes per year.</li> <li>Fall back on defaults for project minutes per day/week/month/year attributes.</li> </ul>"},{"location":"CHANGELOG/#960-2021-09-13","title":"9.6.0 (2021-09-13)","text":"<ul> <li>Add Planned Start and Scheduled Finish to project properties.</li> <li>Add attribute_types method to Ruby classes.</li> <li>Updated to use POI 5.0.0.</li> <li>Corrected source of Must Finish By project property when reading XER files or P6 databases.</li> <li>When reading PMXML files, ensure that the activity calendar is set before calculating slack.</li> <li>Remove unused field TaskField.PARENT_TASK.</li> <li>Ensure task Unique ID and task Parent Unique ID attributes are treated as mandatory when written to JSON.</li> <li>Fix an issue with Ruby gem where a task's parent was not being retrieved correctly in some circumstances.</li> </ul>"},{"location":"CHANGELOG/#952-2021-08-22","title":"9.5.2 (2021-08-22)","text":"<ul> <li>Add Must Finish By date to project properties.</li> <li>Add support for the task attributes Longest Path, External Early Start and External Early Finish, and ensure they can be read from P6 schedules.</li> <li>Rename ProjectFile.getStartDate() and ProjectFile.getFinishDate() methods for clarity. Original method names are marked as deprecated</li> <li>Ensure that all activities in a PMXML file have a CalendarID attribute to ensure compatibility with older versions of P6.</li> <li>Ensure that the user's selected progress period is used to set the project's status date attribute when reading Asta PP files.</li> <li>Ensure that a task's Complete Through attribute is not advanced to the start of the next working day (the behaviour of Microsoft Project prior to 2007 was to report Complete Through as the start of the next working day. This change ensures MPXJ matches versions of Microsoft Project from 2007 onwards. Previous behaviour can be restored using the ProjectConfig.setCompleteThroughIsNextWorkStart() method).</li> <li>Deprecate task getSplitCompleteDuration() and setSplitCompleteDuration() in favour of getCompleteThrough() and setCompleteThrough().</li> <li>Improved the implementation of the TaskContainer.synchronizeTaskIDToHierarchy method.</li> <li>Update jsoup to 1.14.2.</li> </ul>"},{"location":"CHANGELOG/#951-2021-07-01","title":"9.5.1 (2021-07-01)","text":"<ul> <li>When applying a baseline using ProjectFile.setBaseline, gracefully handle duplicate task key values.</li> <li>Handle missing values populating cost rate table from an MPP file.</li> </ul>"},{"location":"CHANGELOG/#950-2021-06-30","title":"9.5.0 (2021-06-30)","text":"<ul> <li>Added support for reading baseline data from embedded baselines in PP files.</li> <li>Correct resource assignment percent complete values read from PP files.</li> <li>JsonWriter no longer writes attribute type information by default. (The original behaviour can be restored by calling setWriteAttributeTypes(true) on your JsonWriter instance).</li> <li>The MPXJ Ruby Gem now generates explicit methods to access attributes rather than relying on \"method_missing\" to intercept and act on attribute access.</li> <li>Don't write Assignment Task GUID, Assignment Resource GUID or Resource Calendar GUID to JSON.</li> <li>Don't write a value for Assignment Work Contour to JSON if the contour is the default value (i.e. flat).</li> <li>Don't write a value for Assignment Resource Request Type to JSON if the type is the default value (i.e. none).</li> <li>Don't write a value for Task Earned Value Method to JSON if the method matches the project default.</li> <li>Don't write a value for Task Type to JSON if the type matches the project default.</li> <li>Stop writing a default value (-1) for Parent Task ID to JSON if the task does not have a parent.</li> <li>Stop writing a default value (-1) for Task Calendar ID to JSON if the task does not have a calendar.</li> <li>When reading resource assignments from an MPP file, don't record Project's internal representation of a null resource ID (-65535), record the resource ID explicitly as null.</li> <li>For MPX and Planner files, don't write resource assignments for the \"null\" resource.</li> <li>Handle missing status date when reading P6 schedules from XER files or database.</li> <li>When reading MPP files, treat UUID's which are all zeros as null.</li> <li>Deprecate the 10 Resource Outline Code get and set methods and replace with get and set methods which take an index argument.</li> <li>Provide a helper method (PrimaveraHelper.baselineKey) to encapsulate key generation for setting Primavera baselines.</li> </ul>"},{"location":"CHANGELOG/#940-2021-06-11","title":"9.4.0 (2021-06-11)","text":"<ul> <li>Read custom value lists for resource custom fields from MPP files (based on a suggestion by Markus H\u00f6ger).</li> <li>Added support for reading custom fields from Asta Powerproject files.</li> <li>Ensure short data type values are written to JSON files as numeric values.</li> <li>Ensure delay data type values are written to JSON files as duration values.</li> <li>Don't write zero rates to JSON files.</li> <li>Introduced a separator into rate values when written to a JSON file to make it clear that the value is a rate not a duration (for example: 5.00h is now 5.00/h).</li> <li>When writing an enum value of a JSON file, ensure we write the original enum name rather than the value return by toString. This provides more meaningful output (Potentially breaking change if you use the Ruby gem or consume the JSON output directly. Affected attributes are project properties: currency symbol position, time format, date format, bar text date format, schedule from, mpx file version; resource attribute: type).</li> <li>Ensure invalid cost rate table data is handled gracefully when reading from MSPDI files.</li> <li>Handle missing data when reading MSPDI files (based on a contribution by Lord Helmchen).</li> <li>Improve population of summary task names when reading from Powerproject PP files.</li> <li>Correctly read hierarchical resource outline codes from MPP files (based on a suggestion by Markus H\u00f6ger).</li> </ul>"},{"location":"CHANGELOG/#931-2021-05-18","title":"9.3.1 (2021-05-18)","text":"<ul> <li>Preserve multiple assignments between an activity and a resource when reading P6 schedules.</li> <li>Renamed WorkContour.isFlat to isContourFlat and WorkContour.isContoured to isContourManual.</li> <li>Include an entry for 0% in the WorkContour curve definition.</li> <li>Fix an issue where non working days were not being treated correctly in date calculations if they happen to still have time ranges attached.</li> </ul>"},{"location":"CHANGELOG/#930-2021-05-06","title":"9.3.0 (2021-05-06)","text":"<ul> <li>Add support for reading roles from P6 databases, XER and PMXML files, and for writing roles to PMXML files. Roles are represented as resources. The new resource Boolean attribute \"Role\" is used to distinguish between Resource instances which represent resources and those which represent roles.</li> <li>Add support for reading resource curves from P6 databases, XER and PMXML files, and for writing resource curves to PMXML files. The WorkContour enum is now a class, and instance of this class are used to represent resource curves. The curves are available via the work contour attribute of resource assignments.</li> <li>Corrected the data type of the task physical percent complete attribute.</li> <li>Improve handling of non-standard relationship type representations encountered in XER files and P6 databases.</li> </ul>"},{"location":"CHANGELOG/#926-2021-04-26","title":"9.2.6 (2021-04-26)","text":"<ul> <li>Handle invalid baseline numbers when reading MSPDI files.</li> <li>Improve custom field handling when reading GanttProject files.</li> </ul>"},{"location":"CHANGELOG/#925-2021-04-20","title":"9.2.5 (2021-04-20)","text":"<ul> <li>Add launcher batch file and shell script.</li> <li>Improve handling of calculated task attributes when writing a project to a different format.</li> <li>Ensure that dates are rolled up to summary tasks when reading FastTrack files.</li> <li>Improve support for Synchro 6.3 SP files.</li> </ul>"},{"location":"CHANGELOG/#924-2021-04-09","title":"9.2.4 (2021-04-09)","text":"<ul> <li>Fix an issue reading resource rate information GanttProject files.</li> </ul>"},{"location":"CHANGELOG/#923-2021-04-08","title":"9.2.3 (2021-04-08)","text":"<ul> <li>Fix an issue reading Planned Duration from P6 databases and XER files.</li> <li>Ensure Duration and Actual Duration are populated for WBS entries when reading P6 schedules.</li> </ul>"},{"location":"CHANGELOG/#922-2021-04-07","title":"9.2.2 (2021-04-07)","text":"<ul> <li>Fix issue with WBS ordering when writing PMXML files.</li> </ul>"},{"location":"CHANGELOG/#921-2021-04-04","title":"9.2.1 (2021-04-04)","text":"<ul> <li>Improve Task critical flag calculation when reading PMXML files.</li> <li>Improve support for Synchro 6.3 SP files.</li> </ul>"},{"location":"CHANGELOG/#920-2021-03-30","title":"9.2.0 (2021-03-30)","text":"<ul> <li>Improve accuracy when reading subprojects from MPP files.</li> <li>Add Remaining Late Start and Remaining Late Finish attributes to Task.</li> <li>Add Critical Activity Type attribute to Project Properties</li> <li>Read Remaining Early Start, Remaining Late Start, Remaining Early Finish and Remaining Late finish from and write to PMXML files.</li> <li>Read Remaining Late Start and Remaining Late finish from P6 database and XER files.</li> <li>Ensure that WBS entries without child activities are not marked as critical.</li> <li>Don't attempt to set the critical flag when reading XER and PMXML files where the schedule is using \"longest path\" to determine critical activities. (MPXJ currently doesn't have enough information to be able to determine the correct value for the critical flag in this situation).</li> <li>Ensure cost, duration, date and work attributes are rolled up to WBS entries for P6 schedules read from PMXML files, XER files and P6 databases.</li> <li>Populate baseline cost, duration, finish, start and work when reading from XER files, PMXML files and P6 databases where the \"Project Baseline\" has been set to \"Current Project\".</li> </ul>"},{"location":"CHANGELOG/#910-2021-03-11","title":"9.1.0 (2021-03-11)","text":"<ul> <li>Add methods to the ProjectFile class to attach a ProjectFile instance as a baseline. The baselines attached to the ProjectFile will be used to populate the relevant baseline attributes in the current schedule.</li> <li>Added experimental support for writing baseline projects to PMXML files. </li> <li>Added the Project GUID attribute.</li> <li>When reading PMXML files, the list of projects returned by the readAll method will include any baseline projects present in the file.</li> <li>When reading PMXML files which include the current baseline project, use this to populate the relevant baseline attributes in the main schedule.</li> <li>The Project Unique ID property is now an integer rather than a string.</li> <li>When reading Primavera schedules, populate the project properties Project ID and Baseline Project Unique ID.</li> <li>Handle Primavera resource rates which don't have a start or finish date.</li> <li>Handle MSPDI files with resource availability tables which don't have a start or finish date.</li> <li>Ensure that the Activity ID field is populated consistently for WBS entries in PMXML files compared to the same schedule read from an XER file or P6 database.</li> <li>Ensure duration of manually scheduled tasks in MPP files is represented correctly.</li> </ul>"},{"location":"CHANGELOG/#900-2020-02-18","title":"9.0.0 (2020-02-18)","text":"<ul> <li>NOTE: this release introduces breaking changes!</li> <li>All fields which are non-user defined, but were previously being returned by MPXJ as custom fields are now represented as explicit field types. Custom fields now only contain values for user-defined custom fields.</li> <li>All code previously marked as deprecated has been removed.</li> <li>When reading an XER file or a P6 database, some custom project property names have been updated. LagCalendar is now CalendarForSchedulingRelationshipLag, RetainedLogic is now WhenSchedulingProgressedActivitiesUseRetainedLogic, ProgressOverride is now WhenSchedulingProgressedActivitiesUseProgressOverride, IgnoreOtherProjectRelationships is now WhenSchedulingProgressedActivitiesUseProgressOverride, and StartToStartLagCalculationType is now ComputeStartToStartLagFromEarlyStart.</li> <li>Updated PMXML schema to version 20.12.</li> <li>Fix an issue where GUID values were not being read correctly from XER files and P6 databases.</li> <li>Percent complete type is now available as a task attribute for P6 schedules from any source.</li> <li>Ensure that percent complete values are stored in the appropriate attributes when reading P6 schedules. (NOTE: Previously the \"reported\" percent complete value was stored as the tasks \"percent complete\" attribute. Now this holds the schedule percent complete value, and the percent work complete and physical percent complete attributes are also populated. To determine which value should be reported for a task, see the \"percent complete type\" extended field attribute.)</li> <li>Correctly handle default calendar when reading and writing PMXML files.</li> <li>Update the sort order of WBS entries and activities in PMXML files to match the order exported by P6.</li> <li>Match the way P6 exports the WBS code attribute for PMXML files.</li> <li>Update the representation of Boolean values when writing PMXML files to match the form exported by P6.</li> <li>Set the task type attribute when reading PMXML files.</li> <li>Improve duration and actual duration calculations when reading XER files and P6 databases.</li> <li>Fix an issue where resource assignment costs were not being read correctly from PMXML files.</li> <li>Read and write the suspend date and resume date attributes for PMXML files.</li> <li>General improvements to the SDEF writer.</li> <li>Updated to rtfparserkit 1.16.0.</li> </ul>"},{"location":"CHANGELOG/#851-2021-01-07","title":"8.5.1 (2021-01-07)","text":"<ul> <li>Don't write unused enterprise custom field definitions to MSPDI files. This ensures that MS Project will open these files correctly.</li> </ul>"},{"location":"CHANGELOG/#850-2021-01-06","title":"8.5.0 (2021-01-06)","text":"<ul> <li>Notes in their original format (HTML from P6, RTF from MS Project) can now be retrieved via the getNotesObject method on Task, Resource, and ResourceAssignment. Plain text notes can still be retrieved via the getNotes method. If you were previously using the \"preserve note formatting\" flag to retrieve the original formated version of a note, you will now need to use the getNotesObject method.</li> <li>Write WBS and Activity notes to PMXML files.</li> <li>PMXML compatibility improvements to ensure files can be successfully imported into P6.</li> </ul>"},{"location":"CHANGELOG/#840-2020-12-29","title":"8.4.0 (2020-12-29)","text":"<ul> <li>Previously when reading PMXML files, XER files, and P6 databases, a set of baseline attributes on tasks and assignments (including Start, Finish, Duration, Cost and Work) were being populated with planned values rather than baseline values. These baseline attributes are no longer being set. The values they previously contained are now available as custom fields.</li> <li>Read activity notepad entries for XER, PMXML files and P6 databases.</li> <li>Read schedule and leveling options from PMXML files and P6 databases.</li> <li>Improve support for reading activity cost and work from PMXML files.</li> </ul>"},{"location":"CHANGELOG/#835-2020-12-15","title":"8.3.5 (2020-12-15)","text":"<ul> <li>Fix CVE-2020-35460: zip slip vulnerability (with thanks to Sangeetha Rajesh S, ZOHO Corporation)</li> </ul>"},{"location":"CHANGELOG/#834-2020-12-10","title":"8.3.4 (2020-12-10)","text":"<ul> <li>Updated PMXML schema to version 19.12.</li> <li>Ensure that we always set the activity planned start and planned finish dates when writing a PMXML file.</li> <li>Updated the getPopulatedFields methods to ignore fields with default values.</li> <li>Made the Resource ID attribute available as a resource's TEXT1 custom field, with the alias \"Resource ID\" when reading PMXML and XER files, or from a P^ database. (Note that presently for XER files and P6 databases, the Resource ID value is also read into the initials attribute. This behaviour is deprecated and will be removed in the next major MPXJ release).</li> <li>Populate the Resource ID with the value read from a P6 schedule when writing a PMXML file.</li> <li>Ensure that the hours per day, week, month and year attributes are read from and written to PMXML files.</li> <li>Fix an issue causing the hours per day calendar attribute to be read inaccurately from XER files and P6 databases.</li> <li>Read assignment actual overtime cost and work attributes from PMXML files.</li> <li>Update calculation of assignment work, cost and units attributes for PMXML files.</li> </ul>"},{"location":"CHANGELOG/#833-2020-11-24","title":"8.3.3 (2020-11-24)","text":"<ul> <li>Added cost rate table support when reading from and writing to PMXML files.</li> <li>Added a getPopulatedFields method to the TaskContainer, ResourceContainer and ResourceAssignmentContainer classes. This will retrieve the set of fields which are populated with a non-null value across the whole project for Tasks, Resources, and ResourceAssignments respectively. </li> <li>Add START_ON, FINISH_ON constraint types. Deprecate MANDATORY_START, MANDATORY_FINISH constraint types. MANDATORY_START/FINISH are now represented as MUST_START/FINISH_ON. This change allows users to distinguish between START/FINISH_ON and the MANDATORY_* constraints when reading P6 schedules.</li> <li>Improve handling of cost rate tables and availability tables when writing to an MSPDI file.</li> <li>Handle P6 databases and XER files with user defined fields of type FT_FLOAT.</li> <li>Align invalid XER record behaviour with P6.</li> <li>Handle Planner files which don't contain an allocations tag.</li> <li>Gracefully handle MPP files with missing view or table data.</li> </ul>"},{"location":"CHANGELOG/#832-2020-10-22","title":"8.3.2 (2020-10-22)","text":"<ul> <li>Added support for \"new tasks are manual\" project property (Contributed by Rohit Sinha)</li> <li>Improved support for reading and writing outline codes and extended attributes for MSPDI files (Based on a contribution by Dave McKay)</li> <li>Improved handling of enterprise custom fields when reading MPP files</li> <li>Update Primavera database and XER readers to avoid potential type conversion errors when the caller provides their own field mappings.</li> <li>Improve handling of some MPP12 MPP file variants.</li> <li>Avoid error when reading timephased data from certain MPP files.</li> <li>Gracefully handle MPP files with missing view data.</li> <li>Update junit to 4.13.1.</li> </ul>"},{"location":"CHANGELOG/#831-2020-10-14","title":"8.3.1 (2020-10-14)","text":"<ul> <li>Minor updates to PlannerReader.</li> </ul>"},{"location":"CHANGELOG/#830-2020-10-13","title":"8.3.0 (2020-10-13)","text":"<ul> <li>Add the \"userDefined\" attribute to the CustomField class to allow caller to determine if the field has been created by a user or MPXJ.</li> <li>Add support for reading expense items, expense categories and cost accounts from XER files, PMXML files and Primavera databases.</li> <li>Add support for writing expense items, expense categories and cost accounts to PMXML files.</li> <li>Updated the XER file reader to ignore invalid records rather than reporting an error, matching the behaviour of P6</li> <li>Updated the XER file reader to ensure that activity suspend and resume dates are read correctly.</li> <li>Updated the XER file reader to ensure that if the reader returns the project selected by the caller when the caller supplies a value for project ID.</li> <li>Updated PMXML reader to avoid user defined field collisions.</li> <li>Updated PMXML reader to add setProjectID and listProjects methods.</li> <li>Update the .net extension method ToIEnumerable to work with java.lang.Iterable rather than java.util.Collection</li> </ul>"},{"location":"CHANGELOG/#820-2020-09-09","title":"8.2.0 (2020-09-09)","text":"<ul> <li>All readers, including the UniversalProjectReader, now support a readAll method. If a file or database contains more than one project the readAll method can be used to retrieve them all in one operation. If the file format doesn't support multiple schedules, readAll will just return a single schedule.</li> <li>Add PrimaveraDatabaseFileReader to encapsulate access to SQLite Primavera databases.</li> <li>Ensure that the summary flag is true for WBS items in Primavera schedules, even if they have no child activities.</li> <li>Ensure that the critical flag is rolled up appropriately to WBS items when reading Primavera schedules.</li> <li>Set export flag property when reading projects from a PMXML file.</li> <li>Corrected data type of resource assignment Work Contour field.</li> <li>Corrected data type of resource fields: BCWS, BCWP, ACWP, SV, CV, and Work Contour.</li> <li>Corrected data type of task fields: CV, ACWP, VAC, CPI, EAC, SPI, TCPI, and Work Contour.</li> </ul>"},{"location":"CHANGELOG/#814-2020-08-31","title":"8.1.4 (2020-08-31)","text":"<ul> <li>Fix CVE-2020-25020: XXE vulnerability (with thanks to Sangeetha Rajesh S, ZOHO Corporation)</li> <li>Import milestone constraints from Asta schedules (Contributed by Dave McKay)</li> <li>Handle elapsed durations in Asta schedules (Based on a contribution by Dave McKay)</li> <li>Correctly determine the constraint type for tasks with ALAP placement with or without predecessors when reading from Asta schedules (Contributed by Dave McKay)</li> <li>Gracefully handle a missing table name when reading an XER file.</li> <li>Gracefully handle an unexpected calendar data when reading an XER file.</li> <li>Correctly handle XER files with multi-byte character encoding.</li> <li>Import all schedule and leveling options from XER files.</li> <li>Ensure project calendars are read from PMXML files.</li> <li>Added readAll methods to PrimaveraPMFileReader to allow all projects contained in a PMXML file to be read in a single pass.</li> </ul>"},{"location":"CHANGELOG/#813-2020-06-25","title":"8.1.3 (2020-06-25)","text":"<ul> <li>Improve reliability when reading custom field values from certain MPP12 files.</li> <li>Improve accuracy of activity percent complete when reading from certain XER files or P6 databases.</li> <li>Improve accuracy of WBS percent complete when reading from certain XER files or P6 databases.</li> <li>Improve accuracy of task durations when reading Asta schedules.</li> <li>Fix an issue handling the end date of calendar exceptions when reading Asta schedules.</li> <li>Fix an issue with correctly identifying the calendar applied to summary tasks when reading Asta schedules.</li> <li>Populate percent complete, duration, actual start, actual finish, early start, late start, early finish and late finish attributes for summary tasks when reading Asta schedules.</li> <li>The percent complete value reported for tasks when reading Asta schedules is now Duration Percent Complete. The Overall Percent Complete value originally being returned is available in a custom field. </li> </ul>"},{"location":"CHANGELOG/#812-2020-06-18","title":"8.1.2 (2020-06-18)","text":"<ul> <li>Improve detection of unusual MSPDI file variants.</li> <li>Updated to read task notes from FastTrack FTS files.</li> </ul>"},{"location":"CHANGELOG/#811-2020-06-17","title":"8.1.1 (2020-06-17)","text":"<ul> <li>Improve support for Synchro 6.2 SP files.</li> </ul>"},{"location":"CHANGELOG/#810-2020-06-11","title":"8.1.0 (2020-06-11)","text":"<ul> <li>Experimental support for reading Project Commander schedules.</li> <li>Update to use JAXB 2.3.2.</li> <li>Avoid failures caused by unreadable OLE compound documents when the UniversalProjectReader is trying to determine the file type.</li> <li>Strip trailing ASCII NUL characters from text fields when reading from a Primavera database.</li> <li>Improve accuracy of task order when reading Phoenix files.</li> <li>Improve accuracy of task data when reading some MPP file variants.</li> <li>Improve reliability when reading certain SureTrak files.</li> </ul>"},{"location":"CHANGELOG/#808-2020-04-20","title":"8.0.8 (2020-04-20)","text":"<ul> <li>Improve handling of numeric character references invalid for XML 1.0 in PMXML files.</li> <li>Improve handling of resource calendars read from Planner files.</li> <li>Improve handling of resource calendars read from MPX files.</li> <li>Ignore the milestone flag when reading MPX files if the task has a non-zero duration.</li> <li>Ensure JSON files can be written when Unique ID predecessor/successor attributes have been read from an MPX file.</li> </ul>"},{"location":"CHANGELOG/#807-2020-04-17","title":"8.0.7 (2020-04-17)","text":"<ul> <li>Updated to rtfparserkit 1.15.0.</li> <li>Improve handling of PMXML files with empty calendar exception time ranges.</li> </ul>"},{"location":"CHANGELOG/#806-2020-03-05","title":"8.0.6 (2020-03-05)","text":"<ul> <li>Updated to use POI 4.1.2.</li> <li>Improve handling of some XER file variants.</li> </ul>"},{"location":"CHANGELOG/#805-2020-02-07","title":"8.0.5 (2020-02-07)","text":"<ul> <li>Allow users to determine WBS attribute content with \"wbs is full path\" flag for Primavera readers.</li> <li>Ensure summary task start and finish dates are populated when reading PMXML files.</li> <li>Use baseline start and finish dates as planned start and finish dates when writing PMXML files.</li> <li>Late start and late finish dates are now written to PMXML files.</li> </ul>"},{"location":"CHANGELOG/#804-2020-02-06","title":"8.0.4 (2020-02-06)","text":"<ul> <li>Update sqlite-jdbc dependency to 3.30.1</li> <li>Improve handling of characters invalid for XML 1.0 in PMXML files generated by P6.</li> </ul>"},{"location":"CHANGELOG/#803-2020-01-27","title":"8.0.3 (2020-01-27)","text":"<ul> <li>Improve handling of zero value durations, costs and units from certain MPP files.</li> <li>Improve percent complete calculation for certain XER file and P6 Database schedules.</li> <li>Improve percent complete calculation for certain P3 schedules.</li> <li>Improve handling of incorrectly encoded characters in PMXML files generated by P6.</li> <li>Ensure that negative durations can be written to and read from MSPDI files in the format understood by MS Project.</li> </ul>"},{"location":"CHANGELOG/#802-2020-01-16","title":"8.0.2 (2020-01-16)","text":"<ul> <li>Improve handling of zero duration tasks read from Phoenix files.</li> </ul>"},{"location":"CHANGELOG/#801-2020-01-05","title":"8.0.1 (2020-01-05)","text":"<ul> <li>Add missing nuget dependency</li> </ul>"},{"location":"CHANGELOG/#800-2020-01-02","title":"8.0.0 (2020-01-02)","text":"<ul> <li>MPXJ now requires Java 8 or later.</li> <li>Removed deprecated methods.</li> <li>Updated to use POI 4.1.1.</li> <li>Updated to use IKVM 8.1.5717.0.</li> </ul>"},{"location":"CHANGELOG/#798-2019-12-27","title":"7.9.8 (2019-12-27)","text":"<ul> <li>Added support for reading and writing outline code/custom field lookup tables for MSPDI files.</li> <li>Added sample code to demonstrate creation of timephased work.</li> <li>Populate project status date attribute when reading Asta schedules.</li> <li>Populate parent attribute when reading activity code values from Primavera schedules.</li> <li>Improve configurability of PrimaveraDatabaseReader and PrimaveraXERFileReader.</li> <li>Made JAXB JARs an explicit dependency to avoid issues with recent Java versions which do not include them.</li> </ul>"},{"location":"CHANGELOG/#797-2019-11-25","title":"7.9.7 (2019-11-25)","text":"<ul> <li>Round percent complete values read from Asta files to two decimal places to avoid values like 99.9999999%.</li> </ul>"},{"location":"CHANGELOG/#796-2019-11-22","title":"7.9.6 (2019-11-22)","text":"<ul> <li>Improve support for FastTrack files.</li> </ul>"},{"location":"CHANGELOG/#795-2019-11-19","title":"7.9.5 (2019-11-19)","text":"<ul> <li>Added flag to manage compliance with password protection. (Contributed by ztravis)</li> <li>Improve support for Synchro 6.1 SP files.</li> <li>Fix an issue where the task hierarchy was not correctly represented when reading a PMXML file.</li> </ul>"},{"location":"CHANGELOG/#794-2019-11-08","title":"7.9.4 (2019-11-08)","text":"<ul> <li>Add support for reading Sage 100 Contractor schedule grid files.</li> <li>Ensure attribute names are valid when exporting JSON.</li> <li>Improve handling of custom field lookup values (Based on a contribution by Nick Darlington).</li> <li>Fix an issue when copying a calendar which has exceptions defined.</li> </ul>"},{"location":"CHANGELOG/#793-2019-09-10","title":"7.9.3 (2019-09-10)","text":"<ul> <li>Add support for reading task early finish and late finish attributes from Asta PP files.</li> <li>Ensure XER files containing secondary constraints can be read correctly.</li> <li>Preserve calendar IDs when reading from XER files and P6 database (Based on a contribution by forenpm).</li> <li>Ensure base calendars are read correctly for P6 schedules.</li> <li>Ensure MPP files with unexpected auto filter definition data are handled gracefully.</li> <li>Preserve leveling delay format when reading tasks from MSPDI files.</li> <li>Ensure unexpected structure of timephased data is handled gracefully when reading MPP files.</li> </ul>"},{"location":"CHANGELOG/#792-2019-08-19","title":"7.9.2 (2019-08-19)","text":"<ul> <li>Add support for reading and writing secondary constraints from P6 schedules (Based on a contribution by Sruthi-Ganesh)</li> <li>Improve support for Synchro SP files containing blank tasks.</li> <li>Make constraint type mapping consistent when reading and writing PMXML files.</li> <li>Improve handling of leveling delay units and actual duration units (Based in a contribution by Daniel Schmidt).</li> <li>Improve handling of certain types of malformed MPP files.</li> <li>Improve handling of certain types of malformed SDEF files.</li> <li>Map P6 Equipment resource type to cost rather than work (Contributed by forenpm)</li> <li>Improve handling of certain MPP files containing large numbers of blank tasks.</li> <li>Improve handling of certain MPX files containing trailing delimiters.</li> </ul>"},{"location":"CHANGELOG/#791-2019-07-01","title":"7.9.1 (2019-07-01)","text":"<ul> <li>Set task start, finish and percent complete when reading SDEF files.</li> </ul>"},{"location":"CHANGELOG/#790-2019-07-01","title":"7.9.0 (2019-07-01)","text":"<ul> <li>Add support for reading SDEF files.</li> </ul>"},{"location":"CHANGELOG/#784-2019-06-27","title":"7.8.4 (2019-06-27)","text":"<ul> <li>Add support for reading data links (linked fields) configuration from MPP files.</li> <li>Updated to avoid an infinite loop when processing certain corrupt files (Contributed by ninthwaveltd).</li> <li>Update MSPDI generation to ensure MS Project correctly recognises complete tasks without resource assignments.</li> <li>Ensure that activity codes are read for P6 schedules.</li> <li>Improve support for reading custom field values derived from custom field lookup tables in MPP files.</li> <li>Improve support for MPP files written with the June 2019 update of Microsoft Project.</li> </ul>"},{"location":"CHANGELOG/#783-2019-05-24","title":"7.8.3 (2019-05-24)","text":"<ul> <li>Improve handling of task baseline start, start, baseline finish, finish and slack fields read from FTS files.</li> </ul>"},{"location":"CHANGELOG/#782-2019-05-19","title":"7.8.2 (2019-05-19)","text":"<ul> <li>Improve handling of MPP files with missing Props.</li> <li>Improve handling of custom field lookup tables for MPP12 files.</li> <li>Correctly write activity duration type to a PMXML file (Contributed by Sebastian Stock)</li> <li>Improve handling of Activity Type and Activity ID when writing PMXML files (Based on a contribution by Sebastian Stock)</li> <li>Update PMXML file reader for greater consistency with XER and P6 database readers (Activity ID, Activity Type, Status, and Primary Resource ID)</li> <li>Improve handling of certain FTS files.</li> <li>Improve handling of task notes from MPP8 files.</li> <li>More accurately read predecessors and successors from Asta PP files (Based on a contribution by Dave McKay)</li> <li>When a schedule is read from P6, P3, or SureTrak, Task.getSummary will return true only if a task is part of the WBS</li> <li>Improve support for reading the Synchro Scheduler 2018 SP files.</li> <li>Added Task.hasChildTasks() method.</li> <li>Fixed Issue 330: Splits data coming in as null for all tasks</li> </ul>"},{"location":"CHANGELOG/#781-2019-02-13","title":"7.8.1 (2019-02-13)","text":"<ul> <li>Improve support for reading the Synchro Scheduler 2018 SP files.</li> <li>Add support for reading Gantt Designer GNT files.</li> <li>Improve handling of non-standard MSPDI files.</li> <li>Improve handling of non-standard GanttProject files.</li> <li>Update MSPDI generation to ensure MS Project correctly recognises complete milestones without resource assignments.</li> <li>Improve support for reading user defined fields from PMXML files.</li> <li>Ignore hammock tasks when reading PP files.</li> </ul>"},{"location":"CHANGELOG/#780-2019-01-18","title":"7.8.0 (2019-01-18)","text":"<ul> <li>Added support for reading and writing GUIDs for Tasks, Resources, and Assignments in MSPDI files.</li> <li>Updated Java build to use Maven</li> <li>Updated to provide a general performance improvement (Based on a contribution by Tiago de Mello)</li> <li>Updated to fix an issue when the Microsoft JDBC driver is used to access a P6 database in SQL Server 2005</li> <li>Fixed Issue 332: Asta lag sign incorrect (Based on a contribution by Dave McKay)</li> <li>Fixed Issue 333: Asta constraints lost (Contributed by Dave McKay)</li> <li>Fixed Issue 335: MSDPI into Asta doesn't import Calendar exceptions (Contributed by Dave McKay)</li> </ul>"},{"location":"CHANGELOG/#771-2018-10-23","title":"7.7.1 (2018-10-23)","text":"<ul> <li>Read additional schedule options from XER files. (Contributed by forenpm)</li> <li>Improve handling of some types of MPP file with missing resource assignment data.</li> <li>Ensure that resource assignment flag fields are read correctly for all MPP file types (Based on a contribution by Vadim Gerya).</li> <li>Ensure that timephased actual work is handled correctly for material resources (Contributed by Vadim Gerya).</li> <li>Improve accuracy when reading resource type from MPP files.</li> <li>Improve compatibility of generated MSPDI files with Asta Powerproject (Contributed by Dave McKay).</li> </ul>"},{"location":"CHANGELOG/#770-2018-10-12","title":"7.7.0 (2018-10-12)","text":"<ul> <li>Add support for reading the Synchro Scheduler SP files.</li> <li>Add support for reading the activity code (ID) from Asta files.</li> <li>When reading a Phoenix file, set the project's status date to the data date from the storepoint.</li> <li>Handle MSPDI files with timephased assignments that don't specify a start and end date.</li> </ul>"},{"location":"CHANGELOG/#763-2018-10-04","title":"7.6.3 (2018-10-04)","text":"<ul> <li>Add support for reading Remaining Early Start and Remaining Early Finish task attributes from P6. (Contributed by forenpm)</li> <li>Add support for reading Retained Logic and Progressive Override project attributes from P6. (Contributed by forenpm)</li> <li>Fix incorrect sign when calculating start and finish slack (Contributed by Brian Leach).</li> <li>Correctly read predecessors and successors from Phoenix files.</li> </ul>"},{"location":"CHANGELOG/#762-2018-08-30","title":"7.6.2 (2018-08-30)","text":"<ul> <li>Add support for nvarchar columns when reading from a P6 database.</li> <li>Updated to correctly read percent lag durations from MSPDI files (based on a contribution by Lord Helmchen).</li> <li>Updated the data type for the ValueGUID tag in an MSPDI file (based on a contribution by Lord Helmchen).</li> </ul>"},{"location":"CHANGELOG/#761-2018-08-29","title":"7.6.1 (2018-08-29)","text":"<ul> <li>Improve handling of MPP files where MPXJ is unable to read the filter definitions.</li> <li>Improve handling of SureTrak projects without a WBS.</li> <li>Improve handling of SureTrak and P3 WBS extraction.</li> <li>Handle unsupported ProjectLibre POD files more gracefully.</li> <li>Improve detection of non MS Project compound OLE documents.</li> <li>Gracefully handle XER files which contain no projects.</li> </ul>"},{"location":"CHANGELOG/#760-2018-07-13","title":"7.6.0 (2018-07-13)","text":"<ul> <li>Added support for reading ConceptDraw PROJECT CDPX, CPDZ and CPDTZ files.</li> <li>Add support for reading the export_flag attribute from XER files. (Contributed by forenpm)</li> <li>Use correct licence details in Maven pom.xml (contributed by Mark Atwood).</li> <li>Improve UniversalProjectReader's handling of XER files containing multiple projects.</li> </ul>"},{"location":"CHANGELOG/#750-2018-06-19","title":"7.5.0 (2018-06-19)","text":"<ul> <li>Added support for reading activity codes from P6 databases, XER files, and PMXML files.</li> <li>Added support for reading user defined values from a P6 database.</li> <li>Added support for PRX files which contain a SureTrak database.</li> <li>Added support for reading the resource \"enterprise\" attribute from MPP12 and MPP14 files.</li> <li>Improve performance when reading user defined values from XER files.</li> <li>Improved support for older Primavera PMXML files.</li> <li>Updated to rtfparserkit 1.11.0 for improved RTF parsing.</li> </ul>"},{"location":"CHANGELOG/#744-2018-06-06","title":"7.4.4 (2018-06-06)","text":"<ul> <li>Improve handling of calendar exceptions in MPX files.</li> <li>Improve handling of MPP files with large numbers of null tasks.</li> <li>Improve robustness when reading timephased data.</li> <li>Correctly sort Primavera schedules containing WBS entries with no child activities.</li> </ul>"},{"location":"CHANGELOG/#743-2018-05-25","title":"7.4.3 (2018-05-25)","text":"<ul> <li>Add support for reading the resource \"generic\" attribute from MPP files.</li> <li>Add a Unique ID attribute to the Relation class and populate for schedule types which support this concept.</li> <li>Store the Primavera Project ID as Unique ID in the project properties.</li> <li>Update MerlinReader to ensure support for Merlin Project Pro 5.</li> </ul>"},{"location":"CHANGELOG/#742-2018-04-30","title":"7.4.2 (2018-04-30)","text":"<ul> <li>Gracefully handle malformed duration values in MSPDI files.</li> <li>Gracefully handle unexpected calendar exception data structure in certain MPP files.</li> <li>Improve handling of certain unusual MPP12 files.</li> <li>More work to gracefully handle POI issue 61677, allowing affected MPP files to be read successfully.</li> </ul>"},{"location":"CHANGELOG/#741-2018-04-16","title":"7.4.1 (2018-04-16)","text":"<ul> <li>Add methods to list projects available in P3 and SureTrak database directories.</li> <li>Avoid NPE when a work pattern can't be located in an Asta Powerproject PP file.</li> <li>Avoid array bounds exception when reading certain PRX files.</li> <li>Read outline code value lists from MPP9 files.</li> <li>Handle SureTrak projects without a WBS.</li> </ul>"},{"location":"CHANGELOG/#740-2018-03-23","title":"7.4.0 (2018-03-23)","text":"<ul> <li>Added support for reading Primavera SureTrak databases from directories, zip files, and STX files.</li> <li>Added support for PP files generated by Asta Powerproject from version 13.0.0.1</li> </ul>"},{"location":"CHANGELOG/#730-2018-03-12","title":"7.3.0 (2018-03-12)","text":"<ul> <li>Added support for reading Primavera P3 databases from directories, zip files, and PRX files.</li> <li>Improve robustness when reading MPP files containing apparently invalid custom field data.</li> <li>Improve UniversalProjectReader byte order mark handling.</li> <li>Fixed Issue 324: Fields with lookup unreadable when a field has custom name.</li> </ul>"},{"location":"CHANGELOG/#721-2018-01-26","title":"7.2.1 (2018-01-26)","text":"<ul> <li>More work to gracefully handle POI issue 61677, allowing affected MPP files to be read successfully.</li> <li>Avoid divide by zero when calculating percent complete from certain Primavera PMXML files.</li> <li>UniversalProjectReader updated to recognise MPX files with non-default separator characters.</li> <li>Update FastTrack reader to handle invalid percentage values on resource assignments.</li> <li>Update FastTrack reader to handle variations in UUID format.</li> <li>Read the full project name from XER files and the Primavera database and store it in the project title attribute.</li> </ul>"},{"location":"CHANGELOG/#720-2018-01-18","title":"7.2.0 (2018-01-18)","text":"<ul> <li>Added support for reading TurboProject PEP files.</li> <li>Handle numeric values with leading spaces in XER files.</li> <li>Fix array bounds error when reading constraints from certain MPP files.</li> </ul>"},{"location":"CHANGELOG/#710-2018-01-03","title":"7.1.0 (2018-01-03)","text":"<ul> <li>Added support for reading GanttProject GAN files.</li> <li>Ensure that calendar exception dates are read correctly from XER files and P6 databases regardless of the user's timezone.</li> <li>Read working day calendar exceptions from XER files and P6 database.</li> <li>Mark some ProjectFile methods as deprecated.</li> </ul>"},{"location":"CHANGELOG/#703-2017-12-21","title":"7.0.3 (2017-12-21)","text":"<ul> <li>Use the Windows-1252 character set as the default when reading XER files.</li> <li>Gracefully handle POI issue 61677 to allow MPP affected MPP files to be read successfully.</li> <li>Handle recurring calendar exceptions read from MSPDI files without an occurrence count.</li> <li>Improve robustness of FastTrack schedule reader.</li> <li>Avoid reading empty calendar exceptions from MPX files.</li> </ul>"},{"location":"CHANGELOG/#702-2017-11-20","title":"7.0.2 (2017-11-20)","text":"<ul> <li>Further improvements to task pruning for Asta PP files.</li> </ul>"},{"location":"CHANGELOG/#701-2017-11-20","title":"7.0.1 (2017-11-20)","text":"<ul> <li>Improve robustness when reading MPP files when using certain 64 bit Java runtimes.</li> <li>Populate the project's comments property when reading an MSPDI file.</li> <li>Ensure that tasks are not discarded when reading PP files from older Asta versions.</li> <li>Fixed Issue 319: Wrong date ranges for split tasks</li> <li>Fixed Issue 222: getDefaultTaskType() not returning correct default task type</li> </ul>"},{"location":"CHANGELOG/#700-2017-11-08","title":"7.0.0 (2017-11-08)","text":"<ul> <li>Added support for reading recurring exceptions from MPP and MSPDI files.</li> <li>Updated RecurringTask class interface (Note: this is a breaking API change)</li> <li>MSPDI writer now uses save version 14 by default (Note: this may affect applications which consume MSPDI files you generate)</li> <li>Correctly handle MSPDI files with Byte Order Marks.</li> <li>Handle MSPDI files with varying namespaces.</li> <li>Improve robustness Merlin file reader.</li> <li>Improve extraction of task start and finish dates from PMXML files only containing partial data.</li> <li>Prevent POI from closing the input stream when using UniversalProjectReader</li> <li>Fixed Issue 321: Cannot read mpp file using getProjectReader.</li> </ul>"},{"location":"CHANGELOG/#621-2017-10-11","title":"6.2.1 (2017-10-11)","text":"<ul> <li>Gracefully handle corrupt MPP files.</li> <li>Improve reading and writing slack values for MSPDI files.</li> <li>Improve activity hierarchy extraction from Phoenix files.</li> <li>Fixed Issue 243: MSPDI Slack values not correctly set while loading.</li> </ul>"},{"location":"CHANGELOG/#620-2017-10-06","title":"6.2.0 (2017-10-06)","text":"<ul> <li>Added support for reading Work Weeks from MPP files.</li> <li>Add support for calendar exception names for MPP and MSPDI files.</li> <li>Updated to use POI 3.17.</li> <li>Improve accuracy of calendar exception dates read from XER files and P6 database.</li> <li>Only write non-default user-defined field values to a PMXML file.</li> <li>Use Primavera P6 17.7 XML schema.</li> <li>Gracefully handle corrupt document summary information in MPP files.</li> <li>Don't duplicate exceptions when reading from an MSPDI file.</li> <li>Fixed Issue 231: MPP DataType: Non-unique enumeration value.</li> <li>Fixed Issue 258: Calendar Work Week missing from MPP data extraction.</li> <li>Fixed Issue 318: TimephasedWork Negative TotalAmount.</li> <li>Fixed Issue 320: Date conversion fails in PrimaveraReader.</li> </ul>"},{"location":"CHANGELOG/#612-2017-09-12","title":"6.1.2 (2017-09-12)","text":"<ul> <li>Gracefully handle incomplete records in XER files.</li> </ul>"},{"location":"CHANGELOG/#611-2017-08-30","title":"6.1.1 (2017-08-30)","text":"<ul> <li>Ensure all classes in the gem are required</li> </ul>"},{"location":"CHANGELOG/#610-2017-07-28","title":"6.1.0 (2017-07-28)","text":"<ul> <li>Provide Task.getEffectiveCalendar() method</li> <li>Populate missing finish dates in MSPDI files</li> </ul>"},{"location":"CHANGELOG/#600-2017-07-22","title":"6.0.0 (2017-07-22)","text":"<ul> <li>Gracefully handle invalid calendar data in XER files.</li> <li>Handle XER files containing blank lines.</li> <li>Add support for reading resource rates and availability tables from P6 (Contributed by Brandon Herzog).</li> <li>Include overtime in work and cost fields when reading from P6 (Contributed by Brandon Herzog).</li> <li>Read default project calendar from P6 (Contributed by Brandon Herzog).</li> <li>Read resource rate and assignment units from P6 (Contributed by Brandon Herzog).</li> <li>Set ignore resource calendar flag for tasks from P6 (Contributed by Brandon Herzog).</li> <li>Change P6 costs to be calculated from resource assignment to support XER files without the cost table (Contributed by Brandon Herzog).</li> <li>Map anticipated end date to deadline for P6 (Contributed by Brandon Herzog).</li> <li>Update task work to include actual and remaining work when reading from P6 (Contributed by Brandon Herzog).</li> <li>Calculate summary task work fields by summing up children when reading from P6 (Contributed by Brandon Herzog).</li> <li>Set task project name when reading from P6 (Contributed by Brandon Herzog).</li> <li>Fix \"00:00\" calendar finish times to parse as end of day when reading from P6 (Contributed by Brandon Herzog).</li> <li>Add default working hours if a calendar does not specify any hours when reading from P6 (Contributed by Brandon Herzog).</li> <li>Read fiscal year start month from P6 (Contributed by Brandon Herzog).</li> <li>Fix bug in rollup of child task dates containing null values that could set incorrect end date when reading from P6 (Contributed by Brandon Herzog).</li> <li>Fix date offset in parse of P6 calendar exceptions (Contributed by Brandon Herzog).</li> <li>Fix count of P6 UDFs that map to same data type (Contributed by Brandon Herzog).</li> <li>Add support for reading Resource and Assignment UDFs from P6 (Contributed by Brandon Herzog).</li> <li>Update P6 UDFs to fill into multiple field types to expand storage capacity, for example into TEXT and ENTERPRISE_TEXT (Contributed by Brandon Herzog).</li> <li>Use only the WBS as activity code for WBS tasks instead of also appending name for P6 tasks (Contributed by Brandon Herzog).</li> <li>Add the ability to link task Relations that cross project boundaries in XER files (Contributed by Brandon Herzog).</li> <li>Add function to clear all exceptions from ProjectCalendar instances (Contributed by Brandon Herzog).</li> <li>Reading the lag calendar scheduling option as the \"LagCalendar\" custom project property when reading from P6 (Contributed by Brandon Herzog).</li> <li>Updated UDF parsing to handle values as booleans if the user chooses to map them to Flag fields (Contributed by Brandon Herzog).</li> </ul>"},{"location":"CHANGELOG/#5140-2017-07-13","title":"5.14.0 (2017-07-13)","text":"<ul> <li>Improve handling of activity codes read from Phoenix files</li> <li>Calculate percent complete for tasks read from Phoenix files</li> <li>Populate task duration with Original Duration attribute when reading from XER files or P6 databases.</li> <li>Ensure that task finish dates are read correctly from Phoenix files.</li> <li>Improve UniversalProjectReader's handling of non-MPP OLE compound documents.</li> <li>Improve task hierarchy and ordering when reading some MPP files.</li> </ul>"},{"location":"CHANGELOG/#5130-2017-06-27","title":"5.13.0 (2017-06-27)","text":"<ul> <li>Further improve handling of WBS, bar, and task structure from Asta files.</li> </ul>"},{"location":"CHANGELOG/#5120-2017-06-26","title":"5.12.0 (2017-06-26)","text":"<ul> <li>Improve handling of WBS, bar, and task structure from Asta files.</li> </ul>"},{"location":"CHANGELOG/#5110-2017-06-20","title":"5.11.0 (2017-06-20)","text":"<ul> <li>Improve handling of malformed durations in MSPDI files.</li> <li>Improve performance when reading MPP files with certain kinds of timephased data.</li> <li>Raise a specific \"password protected\" exception type from the Ruby gem.</li> <li>Fix an issue with the storage of the \"earned value method\" task attribute.</li> </ul>"},{"location":"CHANGELOG/#5100-2017-05-23","title":"5.10.0 (2017-05-23)","text":"<ul> <li>Improve handling of deleted tasks in MPP files.</li> <li>Improve handling of invalid predecessor tasks in MPX files.</li> <li>Improve handling of invalid saved view state in MPP files.</li> <li>Fixed Issue 313: Empty baseline dates populated with garbage date instead of null.</li> </ul>"},{"location":"CHANGELOG/#590-2017-04-27","title":"5.9.0 (2017-04-27)","text":"<ul> <li>Add support for reading ProjectLibre POD files (from ProjectLibre version 1.5.5 onwards).</li> <li>Correct getter method name for \"file application\" project property.</li> </ul>"},{"location":"CHANGELOG/#580-2017-04-21","title":"5.8.0 (2017-04-21)","text":"<ul> <li>Updated to use POI 3.16 (note new dependency on Apache Commons Collections required by POI).</li> <li>Improve support for estimated durations in Merlin files.</li> <li>Read task notes from Asta files.</li> <li>Improve support for reading resource rates from Phoenix files.</li> <li>Add \"file application\" and \"file type\" to project properties to determine source of schedule data.</li> </ul>"},{"location":"CHANGELOG/#571-2017-03-22","title":"5.7.1 (2017-03-22)","text":"<ul> <li>Improve support for Phoenix Project Manager XML files.</li> </ul>"},{"location":"CHANGELOG/#570-2017-03-20","title":"5.7.0 (2017-03-20)","text":"<ul> <li>Add support for FastTrack Schedule files.</li> <li>Ensure that timephased data calculations correctly handle entry to and exit from DST.</li> <li>Fixed Issue 306: Microsoft Project 2016:  Issue with assignment 'Work Contour' attribute.</li> </ul>"},{"location":"CHANGELOG/#565-2017-03-07","title":"5.6.5 (2017-03-07)","text":"<ul> <li>Improve handling of invalid calendar data in MSPDI files</li> <li>Improve handling of XER files containing multi-line records</li> <li>Improve handling of malformed MPX files</li> <li>Fixed Issue 308: Add support for elapsed percent to MSPDI writer</li> <li>Fixed Issue 310: MPX percent lag incorrect</li> </ul>"},{"location":"CHANGELOG/#564-2017-02-16","title":"5.6.4 (2017-02-16)","text":"<ul> <li>UniversalProjectReader now recognises and handles byte order marks</li> <li>Fixed Issue 307: TimeUnit.ELAPSED_PERCENT read incorrectly from MPP files</li> </ul>"},{"location":"CHANGELOG/#563-2017-02-08","title":"5.6.3 (2017-02-08)","text":"<ul> <li>Added a parameter to the Ruby gem to allow the maximum JVM memory size to be set.</li> <li>Updated to rtfparserkit 1.10.0 for improved RTF parsing.</li> </ul>"},{"location":"CHANGELOG/#562-2017-02-06","title":"5.6.2 (2017-02-06)","text":"<ul> <li>Fixed Issue 305: Failed to Parse error with Primavera 15.2 or 16.1 XML files</li> </ul>"},{"location":"CHANGELOG/#561-2017-02-03","title":"5.6.1 (2017-02-03)","text":"<ul> <li>Correct resource assignment handling for Phoenix Project Manager schedules.</li> </ul>"},{"location":"CHANGELOG/#560-2017-01-29","title":"5.6.0 (2017-01-29)","text":"<ul> <li>Add support for Phoenix Project Manager schedules.</li> </ul>"},{"location":"CHANGELOG/#559-2017-01-27","title":"5.5.9 (2017-01-27)","text":"<ul> <li>Improve robustness of date parsing for MPX files.</li> </ul>"},{"location":"CHANGELOG/#558-2017-01-23","title":"5.5.8 (2017-01-23)","text":"<ul> <li>Fix NPE when reading graphical indicators with unknown field type.</li> </ul>"},{"location":"CHANGELOG/#557-2017-01-13","title":"5.5.7 (2017-01-13)","text":"<ul> <li>Fix percent complete NaN value for some Primavera schedules.</li> </ul>"},{"location":"CHANGELOG/#556-2017-01-06","title":"5.5.6 (2017-01-06)","text":"<ul> <li>Fix incorrectly set critical flag for primavera schedules.</li> </ul>"},{"location":"CHANGELOG/#555-2017-01-06","title":"5.5.5 (2017-01-06)","text":"<ul> <li>Updated to rtfparserkit 1.9.0 for improved RTF parsing</li> <li>Improve calendar exception parsing for Primavera XER and database readers.</li> <li>Ensure the task summary flag is set correctly for Primavera schedules.</li> <li>Rollup baseline, early and late start and finish dates to WBS for Primavera schedules.</li> <li>Rollup baseline duration, remaining duration and percent complete to WBS for Primavera schedules.</li> <li>Use the project's critical slack limit value when setting the critical flag on a task.</li> <li>Experimental support for reading Merlin Project schedules.</li> </ul>"},{"location":"CHANGELOG/#554-2016-12-01","title":"5.5.4 (2016-12-01)","text":"<ul> <li>Default to UTF-8 encoding when generating JSON files</li> </ul>"},{"location":"CHANGELOG/#553-2016-11-29","title":"5.5.3 (2016-11-29)","text":"<ul> <li>Correctly read text from MPP files when default charset is not UTF-8.</li> <li>Improve accuracy when reading MPP9 files.</li> </ul>"},{"location":"CHANGELOG/#552-2016-11-02","title":"5.5.2 (2016-11-02)","text":"<ul> <li>Add Primavera Parent Resource ID as a specific resource attribute (Based on a contribution by Dave McKay).</li> <li>PMXML writer generates currency record (Based on a contribution by Dave McKay).</li> <li>PMXML writer defaults Activity PercentCompleteType to Duration (Based on a contribution by Dave McKay).</li> <li>PMXML writer records currency and parent attributes for Resource (Based on a contribution by Dave McKay).</li> <li>PMXML writer resource assignments include RateSource and ActualOvertimeUnits attributes(Based on a contribution by Dave McKay).</li> <li>MSPDI reader: gracefully handle invalid calendar exceptions..</li> <li>PMXML writer: gracefully handle missing data.</li> <li>Planner writer: gracefully handle missing data.</li> </ul>"},{"location":"CHANGELOG/#551-2016-10-14","title":"5.5.1 (2016-10-14)","text":"<ul> <li>Update universal project reader to support zip files.</li> <li>Update ruby to align error handling with universal project reader.</li> </ul>"},{"location":"CHANGELOG/#550-2016-10-13","title":"5.5.0 (2016-10-13)","text":"<ul> <li>Universal project reader.</li> <li>Avoid NPE when reading PMXML files.</li> <li>Fixed Issue 297: Missing extended attributes</li> <li>Fixed Issue 300: CrossProject field omission causes issues when importing to P6</li> </ul>"},{"location":"CHANGELOG/#540-2016-10-06","title":"5.4.0 (2016-10-06)","text":"<ul> <li>Updated to use POI 3.15.</li> </ul>"},{"location":"CHANGELOG/#533-2016-08-31","title":"5.3.3 (2016-08-31)","text":"<ul> <li>Avoid NPE when field type is unknown.</li> <li>Improve Ruby error reporting.</li> <li>Improve support for non-standard time formats in MPX files</li> <li>Improve support for MPP14 files with very large numbers of blank tasks</li> </ul>"},{"location":"CHANGELOG/#532-2016-08-31","title":"5.3.2 (2016-08-31)","text":"<ul> <li>When reading an XER file, treat FT_STATICTPYE user defined fields as text.</li> </ul>"},{"location":"CHANGELOG/#531-2016-07-01","title":"5.3.1 (2016-07-01)","text":"<ul> <li>Add data date attribute to PMXML output.</li> <li>Update PMXML writer to avoid NPE.</li> <li>Update PMXML writer to allow task field used for Activity ID to be chosen.</li> <li>Updated to avoid NPE when reading an XER file where project not under EPS.</li> <li>Generate Task IDs if missing from MSPDI file</li> </ul>"},{"location":"CHANGELOG/#530-2016-06-10","title":"5.3.0 (2016-06-10)","text":"<ul> <li>Add support for PP files generated by Asta Powerproject from version 13.0.0.3 onwards</li> <li>Minor improvements to SDEF support.</li> <li>Updated to rtfparserkit 1.8.0</li> <li>Improve finish time handling in PMXML files (contributed by lobmeleon)</li> </ul>"},{"location":"CHANGELOG/#522-2016-03-11","title":"5.2.2 (2016-03-11)","text":"<ul> <li>Add support for resource assignment Stop and Resume attributes for MPP and MSPDI files</li> <li>Fixed Issue 291: PrimaveraPMFileWriter.write fails with java.lang.IllegalArgumentException</li> <li>Fixed Issue 292: Microsoft Project 2016 : Need to set 'Stop' and 'Resume'  properties for net.sf.mpxj.ResourceAssignment</li> </ul>"},{"location":"CHANGELOG/#521-2016-02-11","title":"5.2.1 (2016-02-11)","text":"<ul> <li>Add support for PP files generated by Asta Powerproject up to version 13.0.0.3</li> </ul>"},{"location":"CHANGELOG/#520-2016-02-08","title":"5.2.0 (2016-02-08)","text":"<ul> <li>Add support for PP files generated by Asta Powerproject 11, Powerproject 12, Easyplan 2, Easyplan 3, Easyplan 4, Easyplan 5 and Easyplan 6</li> <li>Fixed Issue 285: Unsupported encoding command ansicpg949</li> <li>Fixed Issue 288: AvailabilityTable getEntryByDate does not work properly</li> </ul>"},{"location":"CHANGELOG/#5118-2016-01-25","title":"5.1.18 (2016-01-25)","text":"<ul> <li>Fixed Issue 285: Unsupported encoding command ansicpg1254</li> <li>Fixed Issue 286: NullPointerException in CriteriaReader.getConstantValue</li> <li>Fixed Issue 287: Allow a character encoding to be specified when reading an XER file</li> <li>Write Primavera Primary Resource Unique ID to Task field Number1</li> </ul>"},{"location":"CHANGELOG/#5117-2015-12-30","title":"5.1.17 (2015-12-30)","text":"<ul> <li>Improve support for reading MPP files generated by Project 2016</li> <li>Handle missing time component of a time stamp field when reading an MPX file.</li> </ul>"},{"location":"CHANGELOG/#5116-2015-12-18","title":"5.1.16 (2015-12-18)","text":"<ul> <li>Improve support for reading MPX files generated by SureTrak</li> </ul>"},{"location":"CHANGELOG/#5115-2015-12-16","title":"5.1.15 (2015-12-16)","text":"<ul> <li>Fix WBS and Activity ordering for tasks from Primavera.</li> </ul>"},{"location":"CHANGELOG/#5114-2015-12-09","title":"5.1.14 (2015-12-09)","text":"<ul> <li>Strip unescaped control characters from JSON output.</li> </ul>"},{"location":"CHANGELOG/#5113-2015-11-26","title":"5.1.13 (2015-11-26)","text":"<ul> <li>For schedules imported from Primavera ensure tasks representing activities are ordered by Activity ID within the WBS to match Primavera.</li> </ul>"},{"location":"CHANGELOG/#5112-2015-11-16","title":"5.1.12 (2015-11-16)","text":"<ul> <li>Avoid NPE when writing MSPDI files with timephased data  (contributed by Bruno Gasnier)</li> <li>Improve resource assignment constructor (based on a contribution by Bruno Gasnier)</li> <li>Improve MPX French translations (contributed by Bruno Gasnier)</li> <li>Add calendar specific minutes per day, week, month, and year (based on a contribution by Bruno Gasnier)</li> <li>Add support for reading and writing GUID attribute for PMXML, XER files and Primavera database.</li> </ul>"},{"location":"CHANGELOG/#5111-2015-11-12","title":"5.1.11 (2015-11-12)","text":"<ul> <li>Avoid NPE when reading MPP14 custom properties.</li> <li>Ensure calculated task attributes are present in JSON output.</li> <li>Handle MSPDI files written by German versions of Microsoft Project (based on a contribution by Lord Helmchen)</li> <li>Fixed Issue 277: synchronizeTaskIDToHierarchy clears list of tasks</li> <li>Fixed Issue 273: PrimaveraPMFileWriter throws Exception at write(..)</li> <li>Fixed Issue 281: Parent task is always null when reading a Primavera XER file</li> <li>Ensure that Task.getSuccesors() and Task.getPredecessors() return an empty list rather than null.</li> </ul>"},{"location":"CHANGELOG/#5110-2015-09-09","title":"5.1.10 (2015-09-09)","text":"<ul> <li>Improve FixedMeta2 block size heuristic to improve reliability when reading MPP14 files.</li> </ul>"},{"location":"CHANGELOG/#519-2015-08-29","title":"5.1.9 (2015-08-29)","text":"<ul> <li>Ensure Resource BookingType is read correctly from MPP files</li> <li>Added basic custom field attributes to JSON output</li> <li>Added Ruby methods to work with custom field aliases</li> <li>Fix to infinite loop condition when writing calendar (contributed by lobmeleon)</li> <li>Fixed Issue 274: MPXJ getNotes() API returns garbled value for multibyte characters</li> <li>Fixed Issue 268: Unsupported encoding error when reading resource notes</li> <li>Fixed Issue 256: Incorrect resource types are read (contributed by Colin Rodriguez)</li> <li>Symmetry between Primavera PM reader/writer (contributed by lobmeleon)</li> <li>Added UDF support to PMXML file reader and writer(contributed by lobmeleon)</li> <li>Updated to rtfparserkit 1.4.0</li> </ul>"},{"location":"CHANGELOG/#518-2015-07-13","title":"5.1.8 (2015-07-13)","text":"<ul> <li>Another attempt at getting tzinfo-data dependency working</li> </ul>"},{"location":"CHANGELOG/#517-2015-07-13","title":"5.1.7 (2015-07-13)","text":"<ul> <li>Updated ruby gem to make tzinfo-data dependency conditional on platform</li> </ul>"},{"location":"CHANGELOG/#516-2015-07-13","title":"5.1.6 (2015-07-13)","text":"<ul> <li>Updated ruby gem to allow timezone to be provided</li> </ul>"},{"location":"CHANGELOG/#515-2015-06-05","title":"5.1.5 (2015-06-05)","text":"<ul> <li>Updated to use IKVM 8.0.5449.1</li> </ul>"},{"location":"CHANGELOG/#514-2015-06-03","title":"5.1.4 (2015-06-03)","text":"<ul> <li>Updated to generate Activity ID for Primavera WBS.</li> <li>Updated to correct Primavera duration percent complete calculation.</li> </ul>"},{"location":"CHANGELOG/#513-2015-05-18","title":"5.1.3 (2015-05-18)","text":"<ul> <li>Updated to ensure Ruby reads Boolean attributes correctly.</li> </ul>"},{"location":"CHANGELOG/#512-2015-05-18","title":"5.1.2 (2015-05-18)","text":"<ul> <li>Updated to ensure Ruby recognises short type as an integer.</li> </ul>"},{"location":"CHANGELOG/#511-2015-05-18","title":"5.1.1 (2015-05-18)","text":"<ul> <li>Updated to use ruby-duration gem to avoid conflict with ActiveSupport::Duration.</li> </ul>"},{"location":"CHANGELOG/#510-2015-05-17","title":"5.1.0 (2015-05-17)","text":"<ul> <li>Updated to ensure that PrimaveraDatabaseReader.setSchema accepts null or empty string</li> <li>Ensure conversion to/from .Net DateTime takes account of timezone and daylight savings (based on a contribution by Timour Koupeev)</li> <li>Updated to use POI 3.12.</li> <li>Removed ProjectFile.getTaskFieldAliases, replaced by ProjectFile.getCustomField().getFieldByAlias</li> <li>Removed ProjectFile.getResourceFieldAliases, replaced by ProjectFile.getCustomField().getFieldByAlias</li> </ul>"},{"location":"CHANGELOG/#500-2015-05-06","title":"5.0.0 (2015-05-06)","text":"<ul> <li>Added project properties to the JSON output</li> <li>Added support for project properties to the Ruby wrapper</li> <li>Added support for reading data from a standalone Primavera P6 SQLite database</li> <li>Fixed Issue 267: XXE security vulnerability</li> <li>Fixed Issue 266: Task Number fields not saved to file if the value would floor to zero</li> <li>Fixed Issue 255: Not all project calendars are read in for Project 2013 files (based on a contribution by Colin Rodriguez)</li> <li>Renamed TaskContainer class to ChildTaskContainer</li> <li>Renamed ProjectHeader class to ProjectProperties</li> <li>Introduced ProjectConfig class</li> <li>Introduced TaskContainer class</li> <li>Introduced ResourceContainer class</li> <li>Introduced ResourceAssignmentContainer class</li> <li>Introduced ProjectCalendarContainer class</li> <li>Renamed ProjectFile.getProjectHeader to getProjectProperties</li> <li>Renamed ProjectFile.getCalendar to getDefaultCalendar</li> <li>Renamed ProjectFile.setCalendar to setDefaultCalendar</li> <li>Renamed MppReader.getReadHeaderOnly to getReadPropertiesOnly</li> <li>Renamed MppReader.setReadHeaderOnly to setReadPropertiesOnly</li> <li>Renamed ProjectFile.getCalendarUniqueID to ProjectConfig.getNextCalendarUniqueID</li> <li>Renamed ProjectFile.getResourceUniqueID to ProjectConfig.getNextResourceUniqueID</li> <li>Renamed ProjectFile.getTaskUniqueID to ProjectConfig.getNextTaskUniqueID</li> <li>Renamed ProjectFile.getAssignmentUniqueID to ProjectConfig.getNextAssignmentUniqueID</li> <li>Renamed ProjectFile.getResourceID to ProjectConfig.getNextResourceID</li> <li>Renamed ProjectFile.getTaskID to ProjectConfig.getNextTaskID</li> <li>Renamed ProjectHeader.getApplicationName to getShortApplicationName</li> <li>Renamed ProjectHeader.setApplicationName to setShortApplicationName</li> <li>Renamed ProjectHeader.setCalendarName to setDefaultCalendarName</li> <li>Renamed ProjectHeader.getCalendarName to getDefaultCalendarName</li> <li>Moved ProjectFile.getProjectFilePath to ProjectHeader.getProjectFilePath</li> <li>Moved ProjectFile.setProjectFilePath to ProjectHeader.setProjectFilePath</li> <li>Moved ProjectFile.getApplicationName to ProjectHeader.getFullApplicationName</li> <li>Moved ProjectFile.setApplicationName to ProjectHeader.setFullApplicationName</li> <li>Moved FileCreationRecord.setDelimiter to ProjectHeader.setMpxDelimiter</li> <li>Moved FileCreationRecord.getDelimiter to ProjectHeader.getMpxDelimiter</li> <li>Moved FileCreationRecord.setProgramName to ProjectHeader.setMpxProgramName</li> <li>Moved FileCreationRecord.getProgramName to ProjectHeader.getMpxProgramName</li> <li>Moved FileCreationRecord.setFileVersion to ProjectHeader.setMpxFileVersion</li> <li>Moved FileCreationRecord.getFileVersion to ProjectHeader.getMpxFileVersion</li> <li>Moved FileCreationRecord.setCodePage to ProjectHeader.setMpxCodePage</li> <li>Moved FileCreationRecord.getCodePage to ProjectHeader.getMpxCodePage</li> <li>Moved ProjectFile.getMppFileType to ProjectHeader.getMppFileType</li> <li>Moved ProjectFile.setMppFileType to ProjectHeader.setMppFileType</li> <li>Moved ProjectFile.getApplicationVersion to ProjectHeader.getApplicationVersion</li> <li>Moved ProjectFile.setApplicationVersion to ProjectHeader.setApplicationVersion</li> <li>Moved ProjectFile.setAutoFilter to ProjectHeader.setAutoFilter</li> <li>Moved ProjectFile.getAutoFilter to ProjectHeader.getAutoFilter</li> <li>Removed ProjectFile.getAliasTaskField, replaced by ProjectFile.getTaskFieldAliases().getField()</li> <li>Removed ProjectFile.getAliasResourceField, replaced by ProjectFile.getResourceFieldAliases().getField()</li> <li>Removed ProjectFile.getTaskFieldAlias, replaced by ProjectFile.getTaskFieldAliases().getAlias()</li> <li>Removed ProjectFile.setTaskFieldAlias, replaced by ProjectFile.getTaskFieldAliases().setAlias()</li> <li>Removed ProjectFile.getResourceFieldAlias, replaced by ProjectFile.getResourceFieldAliases().getAlias()</li> <li>Removed ProjectFile.setResourceFieldAlias, replaced by ProjectFile.getResourceFieldAliases().setAlias()</li> <li>Removed ProjectFile.getTaskFieldAliasMap, replaced by ProjectFile.getTaskFieldAliases</li> <li>Removed ProjectFile.getResourceFieldAliasMap, replaced by ProjectFile.getResourceFieldAliases</li> <li>Removed ProjectFile.addTable, replaced by ProjectFile.getTables().add()</li> <li>Removed ProjectFile.getTaskTableByName, replaced by ProjectFile.getTables().getTaskTableByName()</li> <li>Removed ProjectFile.getResourceTableByName, replaced by ProjectFile.getTables().getResourceTableByName()</li> <li>Removed ProjectFile.addFilter, replaced by ProjectFile.getFilters().addFilter()</li> <li>Removed ProjectFile.removeFilter, replaced by ProjectFile.getFilters().rmoveFilter()</li> <li>Removed ProjectFile.getAllResourceFilters, replaced by ProjectFile.getFilters().getResourceFilters()</li> <li>Removed ProjectFile.getAllTaskFilters, replaced by ProjectFile.getFilters().getTaskFilters()</li> <li>Removed ProjectFile.getFilterByName, replaced by ProjectFile.getFilters().getFilterByName()</li> <li>Removed ProjectFile.getFilterByID, replaced by ProjectFile.getFilters().getFilterByID()</li> <li>Removed ProjectFile.getAllGroups, replaced by ProjectFile.getGroups()</li> <li>Removed ProjectFile.getGroupByName, replaced by ProjectFile.getGroups().getByName()</li> <li>Removed ProjectFile.addGroups, replaced by ProjectFile.getGroups().add()</li> <li>Removed ProjectFile.addView, replaced by ProjectFile.getViews().add()</li> <li>Removed ProjectFile.setViewState, replaced by ProjectFile.getViews().setViewState()</li> <li>Removed ProjectFile.getViewState, replaced by ProjectFile.getViews().getViewState()</li> <li>Removed ProjectFile.getResourceSubProject, replaced by ProjectFile.getSubProjects().getResourceSubProject()</li> <li>Removed ProjectFile.setResourceSubProject, replaced by ProjectFile.getSubProjects().setResourceSubProject()</li> <li>Removed ProjectFile.addSubProject, replaced by ProjectFile.getSubProjects().add()</li> <li>Removed ProjectFile.getAllSubProjects, replaced by ProjectFile.getSubProjects</li> <li>Removed ProjectFile.fireTaskReadEvent, replaced by ProjectFile.getEventManager().fireTaskReadEvent()</li> <li>Removed ProjectFile.fireTaskWrittenEvent, replaced by ProjectFile.getEventManager().fireTaskWrittenEvent()</li> <li>Removed ProjectFile.fireResourceReadEvent, replaced by ProjectFile.getEventManager().fireResourceReadEvent()</li> <li>Removed ProjectFile.fireResourceWrittenEvent, replaced by ProjectFile.getEventManager().fireResourceWrittenEvent()</li> <li>Removed ProjectFile.fireCalendarReadEvent, replaced by ProjectFile.getEventManager().fireCalendarReadEvent()</li> <li>Removed ProjectFile.fireAssignmentReadEvent, replaced by ProjectFile.getEventManager().fireAssignmentReadEvent()</li> <li>Removed ProjectFile.fireAssignmentWrittenEvent, replaced by ProjectFile.getEventManager().fireAssignmentWrittenEvent()</li> <li>Removed ProjectFile.fireRelationReadEvent, replaced by ProjectFile.getEventManager().fireRelationReadEvent()</li> <li>Removed ProjectFile.fireRelationWrittenEvent, replaced by ProjectFile.getEventManager().fireRelationWrittenEvent()</li> <li>Removed ProjectFile.fireCalendarWrittenEvent, replaced by ProjectFile.getEventManager().fireCalendarWrittenEvent()</li> <li>Removed ProjectFile.addProjectListener, replaced by ProjectFile.getEventManager().addProjectListener()</li> <li>Removed ProjectFile.addProjectListeners, replaced by ProjectFile.getEventManager().addProjectListeners()</li> <li>Removed ProjectFile.removeProjectListener, replaced by ProjectFile.getEventManager().removeProjectListener()</li> <li>Removed ProjectFile.addGraphicalIndicator</li> <li>Removed ProjectFile.getGraphicalIndicator, replaced by ProjectFile.getCustomFields().getCustomField().getGraphicalIndicator()</li> </ul>"},{"location":"CHANGELOG/#476-2015-03-18","title":"4.7.6 (2015-03-18)","text":"<ul> <li>Added a Ruby wrapper for MPXJ</li> <li>Added the ability to export project data as JSON, to make it easier to work with in languages other than Java</li> <li>Added support for the Assignment attribute Resource Request Type</li> <li>Primavera database and XER readers updated to match WBS visible in Primavera for each task. Previous behaviour of generating a unique WBS for each task can be restored using a flag set on the readers.</li> <li>Avoid NPE when calculating Task Completed Through</li> <li>Read Task Earned Value Method correctly from MPP files</li> <li>Fix issue where some floating point attributes were returning NaN</li> </ul>"},{"location":"CHANGELOG/#475-2015-02-27","title":"4.7.5 (2015-02-27)","text":"<ul> <li>Handle invalid Primavera calendar data gracefully</li> </ul>"},{"location":"CHANGELOG/#474-2015-02-25","title":"4.7.4 (2015-02-25)","text":"<ul> <li>Fixed Issue 257: Failed to read project containing CodePage 1250 text.</li> <li>Fixed Issue 259: MS Project 2010: tasks with null baseline dates</li> <li>Incorrect task end date read from Primavera XER and database</li> <li>Incorrect percent complete read from Primavera XER, database, and PMXML files</li> <li>Failed to read fields held at the end of a fixed data block</li> <li>Added support for Task Baseline Estimated Duration, Baseline Estimated Start, Baseline Estimated Finish, Baseline Fixed Cost, and Baseline Fixed Cost Accrual</li> <li>Added the ability to customise the fields read from a Primavera database or XER file.</li> <li>Added Task Activity Type and Task Status as additional fields read from Primavera database and XER and files</li> <li>Changed Task physical percent complete methods for consistency to use Number rather than Integer</li> </ul>"},{"location":"CHANGELOG/#473-2014-12-23","title":"4.7.3 (2014-12-23)","text":"<ul> <li>Updated to use POI 3.11.</li> <li>Updated to use rtfparserkit 1.1.0 for Java 6 compatibility.</li> </ul>"},{"location":"CHANGELOG/#472-2014-12-15","title":"4.7.2 (2014-12-15)","text":"<ul> <li>Updated to fix Maven dependency issue.</li> </ul>"},{"location":"CHANGELOG/#471-2014-12-08","title":"4.7.1 (2014-12-08)","text":"<ul> <li>Added a flag to MPPReader to indicate that only the project header should be read.</li> </ul>"},{"location":"CHANGELOG/#470-2014-12-04","title":"4.7.0 (2014-12-04)","text":"<ul> <li>Implemented new RTF parser for stripping RTF to improve performance and accuracy</li> <li>Removed non-API code from the top level package</li> <li>Improved support for reading built-in and custom project properties from MPP files.</li> <li>Improved resilience of MPP file reading to unknown data structures</li> <li>Fixed issue which could cause an infinite loop when ordering tasks in a file containing multiple consecutive blank tasks</li> <li>Fixed issue where free text versions of task start, finish, and duration fields were not being read correctly from MPP14 files</li> </ul>"},{"location":"CHANGELOG/#462-2014-11-11","title":"4.6.2 (2014-11-11)","text":"<ul> <li>Fixed issue with custom duration field units not read correctly from MSPDI files</li> <li>Fixed Issue 223: Problems with the lag calculated in the relation</li> <li>Outline code not read correctly from MPP file written by Project 2013</li> <li>Fixed Issue 239: Defensive changes to avoid exceptions when reading MPP files</li> <li>Fixed Issue 250: Deleted tasks being read from mpp file</li> <li>Added DotNetInputStream and DotNetOutputStream classes for ease of use under .Net.</li> <li>Updated to automatically generate and package MpxjUtilities.dll</li> </ul>"},{"location":"CHANGELOG/#461-2014-10-17","title":"4.6.1 (2014-10-17)","text":"<ul> <li>Fixed NuGet metadata</li> </ul>"},{"location":"CHANGELOG/#460-2014-10-17","title":"4.6.0 (2014-10-17)","text":"<ul> <li>Added support for NuGet.</li> <li>Fixed an issue where the ID and Unique ID resource attributes were being read incorrectly from MPP14 files.</li> <li>Fixed an issue where the project's default duration format was not being used</li> <li>Fixed Issue 248: Reading .MPP file using MPXJ 4.2 reads extra unintentional ResourceAssignment with the task which is not seen in Task Sheet in Microsoft Project</li> <li>Fixed Issue 235: All resources have \"Material\" property</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to capture the Project ID to align with data read from XER file/database (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to ensure task percent complete supports Physical Percent, Duration Percent and Units Percent (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to ensure task baseline values match values read from XER file/database (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to ensure task actual duration to matches value read from XER file/database (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to read the task duration (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to read task LateStart, LateFinish, EarlyStart, EarlyFinish attributes correctly (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to read task Start and End correctly (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to identify milestones (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to set the task Critical attribute (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera PM XML file reader to include costs (contributed by Nathaniel Marrin)</li> <li>Fixed Issue 247: Updated Primavera XER/Database readers to read task Start and End correctly (contributed by Nathaniel Marrin)</li> <li>Migrated tests to JUnit 4</li> </ul>"},{"location":"CHANGELOG/#450-2014-03-01","title":"4.5.0 (2014-03-01)","text":"<ul> <li>Added the ability to call the .Net version of MPXJ from COM.</li> <li>Added support Primavera decimal database columns.</li> <li>Added support for user defined task fields (contributed by Mario Fuentes).</li> <li>Added POM for current Maven versions (contributed by Nick Burch)</li> <li>Fixed Issue 213: Unable to load mpp from project-2013</li> <li>Fixed Issue 226: Primavera currency files without currency information</li> <li>Fixed Issue 227: PrimaveraReader cannot handle files with more than 30 user defined fields</li> <li>Fixed Issue 224: setMilestone() issue</li> <li>Fixed Issue 210: MPXJ 4.4 and 2013 files - invalid load of task data</li> <li>Updated to fix an issue with Asta Powerproject PP file tokenization</li> <li>Updated to fix an issue where valid WBS values containing .0 are corrupted</li> <li>Updated to allow Primavera hours per day to be a decimal value</li> <li>Updated to support Primavera PM XML files generated by Primavera versions up to P6v8.3 (contributed by Mario Fuentes)</li> <li>Updated to set the StatusDate attribute in the project header from a Primavera database, XER file or PM XML file.</li> <li>Updated to use (a patched version of) POI 3.10.</li> </ul>"},{"location":"CHANGELOG/#440-2013-03-14","title":"4.4.0 (2013-03-14)","text":"<ul> <li>Added support for writing Primavera PM XML files.</li> <li>Added support for reading Asta Powerproject PP and MDB files.</li> <li>Added support for writing SDEF files (Contributed by William Iverson).</li> <li>Added support for reading Enterprise Custom Fields 1-50 for Task, Resources, and Resource Assignments.</li> <li>Added MpxjExtensionMethods assembly to simplify working with Java types in .Net (Contributed by Kyle Patmore)</li> <li>Provided two new .Net DLL versions in addition to the original version. These allow properties to be accessed in a \".Net style\", and for languages apart from VB, provide .Net style method names.</li> <li>Updated to remove the distinction between base calendar and resource calendars in the ProjectFile class.</li> <li>Updated to improve support for custom outline codes (Contributed by Gary McKenney)</li> <li>Fixed Issue 189: getTimephasedOvertimeWork can return TimephasedWork with NaN</li> <li>Fixed Issue 190: Support for timephased cost for cost type resources</li> <li>Fixed Issue 195: Rolled Up tasks don't use default duration units</li> <li>Fixed Issue 199: Extract Primavera Task ID</li> <li>Updated to fix an issue where the resource assignment delay attribute was not being read from or written to MSPDI files correctly</li> <li>Updated to fix an issue where derived calendars were not being read correctly from MPP files</li> <li>Updated to use IKVM 7.2.</li> </ul>"},{"location":"CHANGELOG/#430-2012-02-08","title":"4.3.0 (2012-02-08)","text":"<ul> <li>Added support for reading Primavera PM XML files.</li> <li>Added support for reading timephased cost, and timephased baseline cost and baseline work from MPP files.</li> <li>Added support for Work Weeks in MSPDI files (SourceForge feature request 23).</li> <li>Updated to use IKVM 7.0.</li> <li>Updated to fix SourceForge bug 3290224: Incorrect order of tasks when writing an MSPDI file (contributed by Jonathan Besanceney).</li> <li>Fixed Issue 161: ResourceAssignment.getTaskUniqueID() returns null.</li> <li>Fixed Issue 169: Wrong project name in MPX file.</li> <li>Fixed Issue 170: Wrong title in XML file when importing from XER file.</li> <li>Fixed Issue 168: Wrong record number for resource calendar in MPX file.</li> <li>Fixed Issue 171: In the XML file the element field SaveVersion is missing.</li> <li>Fixed Issue 167: Loop when import task with 0% on units of works in resources.</li> <li>Fixed Issue 163: French locale NA incorrect.</li> <li>Fixed Issue 175: Invalid dependency between child and parent.</li> <li>Fixed Issue 174: Missing tasks from MS Project 2010 mpp file.</li> <li>Fixed Issue 179: Wrong WBS code and WBS when converting a Primavera XER file.</li> <li>Fixed Issue 177: Error reading XER file with German localisation for numbers.</li> <li>Fixed Issue 166: TimephasedResourceAssignments with negative TotalWork.</li> <li>Fixed Issue 181: Wrong currency symbol in the exported file.</li> <li>Fixed Issue 104: TimephasedResourceAssignment end date not correct.</li> <li>Fixed Issue 116: Calendar hours are incorrect.</li> <li>Fixed Issue 188: NullReferenceException with getTimephasedBaselineWork.</li> <li>Fixed Issue 191: Outline number is null when opening Project 2003 MPP file.</li> <li>Fixed Issue 192: Unable to parse note (unknown locale).</li> <li>Fixed Issue 193: MPP9Reader marks all tasks after a null task as null.</li> <li>Updated to fix an issue where the Task critical attribute was incorrectly calculated for some manually scheduled tasks.</li> <li>Updated to fix an issue where the Task summary attribute was not set correctly when using certain methods to add or remove child tasks.</li> <li>Updated to fix an issue where subprojects were not read correctly (Contributed by Gary McKenney).</li> </ul>"},{"location":"CHANGELOG/#420-2011-06-23","title":"4.2.0 (2011-06-23)","text":"<ul> <li>Added support for resource assignment fields Baseline Cost 1-n, Baseline Work 1-n, Baseline Start 1-n, Baseline Finish 1-n, Start 1-n, Finish 1-n, Date 1-n, Duration 1-n, Cost 1-n, Text 1-n, Number 1-n, Flag 1-n, for MPP, MPD, and MSPDI files.</li> <li>Added support for task suspend date, task resume date, and task code read from Primavera, and represented in MS Project custom fields Date1, Date2, and Text1 respectively.</li> <li>Added support for retrieving the table associated with any view.</li> <li>Fixed Issue 158: Error converting Mpp to planner.</li> <li>Fixed Issue 157: MSPDI Linklag for TimeUnit.Percent.</li> <li>Fixed Issue 156: Error reading calendars for 2010 files.</li> <li>Fixed Issue 159: Duplication of calendar id.</li> <li>Fixed Issue 153: Wrong task start.</li> <li>Fixed Issue 156: Wrong start and finish dates for 2010 files.</li> </ul>"},{"location":"CHANGELOG/#410-2011-05-30","title":"4.1.0 (2011-05-30)","text":"<ul> <li>Updated ProjectFile class to change default value for \"auto\" flags to simplify programmatic creation of project files.</li> <li>Added support for Manual, Start Text, Finish Text, and Duration Text attributes in MSPDI files.</li> <li>Added support cost resource type for MPP12, MPP14 and MSPDI files.</li> <li>Added Task.removePredecessor method (contributed by Leslie Damon).</li> <li>Added \"read presentation data\" flag to MPPReader - allows clients to save time and memory when MPP presentation data not required.</li> <li>Added support for reading Primavera calendars (contributed by Bruno Gasnier).</li> <li>Added support for resource assignment leveling delay for MPP, MPD, and MSPDI files.</li> <li>Added support for \"unassigned\" resource assignments.</li> <li>Added support for task manual duration attribute for manually scheduled tasks in MPP14 and MSPDI files.</li> <li>Added support for resource NT account attribute for MPP9, MPP12, and MPP14 files.</li> <li>Added support for physical % complete for MPP9, MPP12, and MPP14 files.</li> <li>Fixed Issue 120: MPXJ API returns the incorrect start date of a manual task.</li> <li>Fixed Issue 123: Task id incorrect after importing from MPP14 file.</li> <li>Fixed Issue 124: MPXJ 4.0 fails to work with Project 2010 format.</li> <li>Fixed Issue 128: Index was outside the bounds of the array.</li> <li>Fixed Issue 131: header.getHonorConstraints() is not working in case of MPP.</li> <li>Fixed Issue 139: Empty notes appear for all tasks when saving in XML format.</li> <li>Fixed Issue 122: All Extended Attributes always added when using MSPDIWriter.</li> <li>Fixed Issue 144: Baseline/Actual Work in 2010 MPP missing.</li> <li>Fixed Issue 114: ResourceAssignment getCalendar not using IgnoreResourceCalendar flag</li> <li>Fixed Issue 146: ExternalTaskProject value missing.</li> <li>Fixed Issue 137: Deleted Primavera tasks handling problem.</li> <li>Fixed Issue 143: Latest CVS version gives wrong values for inactive field.</li> <li>Fixed Issue 125: Task ID order when creating a project file is not correct.</li> <li>Fixed Issue 106: Invalid tasks that should not be there.</li> <li>Updated to fix task calendars read incorrectly from MPP14 files.</li> <li>Updated to fix incorrect month duration assumption (contributed by Frank Illenberger).</li> <li>Updated to fix incorrect number format in MSPDI file in non-English locales (contributed by Frank Illenberger).</li> <li>Updated to fix incorrect resource assignment actual work attribute for MPP14 files.</li> <li>Updated to fix incorrect task leveling delay attribute for MPP9, MPP12, and MPP14 files.</li> <li>Updated to fix leveling delay and link lag when writing an MSPDI file (contributed by Frank Illenberger).</li> <li>Updated to fix incorrect assignment actual start date when writing an MSPDI file.</li> <li>Updated to improve support for material resources in MSPDI files.</li> <li>Updated to reduce overall size of MSPDI files by not writing default values.</li> <li>Updated to use IKVM 0.46.0.1.</li> <li>Updated to use POI 3.7.</li> <li>Updated to make task, resource, and assignment fields read from MPP files data-driven, rather than hard coded.</li> </ul>"},{"location":"CHANGELOG/#400-2010-05-25","title":"4.0.0 (2010-05-25)","text":"<ul> <li>Added support for reading Microsoft Project 2010 MPP files.</li> <li>Added support for reading Primavera P6 XER files.</li> <li>Added support for reading Primavera P6 databases.</li> <li>Updated to target Java 1.6.</li> <li>Added Russian locale (Contributed by Roman Bilous).</li> <li>Relation.getDuration() is always giving result in 'HOUR' fmt.</li> </ul>"},{"location":"CHANGELOG/#320-2010-01-20","title":"3.2.0 (2010-01-20)","text":"<ul> <li>Added support for Resource cost rate tables (Based on code by Andrei Missine).</li> <li>Added support for Resource availability (Based on code by Andrei Missine).</li> <li>Added support for successors (Based on an idea by John D. Lewis).</li> <li>Added support for task and resource GUIDs.</li> <li>Added a flag to allow raw timephased data to be retrieved from MPP files.</li> <li>Updated to fix logical operator read issue in MPP auto filters (Contributed by Andrei Missine).</li> <li>Fixed Issue 94: MPXJ Issue: Related to Project Calendar.</li> <li>Fixed Issue 90: POI License in legal folder of download wrong.</li> <li>Updated to fix Steelray bug 15468: Null Pointer Exception reading task constraints.</li> <li>Fixed Issue 102: Planner writer causes Null Pointer exception.</li> <li>Fixed Issue 100: getRecurring() task is not working</li> <li>Fixed Issue 98: getStandardRateFormat() is returning 'null'</li> <li>Fixed Issue 97: getWeekStartDay() is not working.</li> <li>Fixed Issue 96: getDaysPerMonth() is not working.</li> <li>Fixed Issue 101: Resource.getNotes() not working for MPP12 file.</li> <li>Fixed Issue 105: MPP: getEditableActualCosts() is not behaving correctly.</li> <li>Updated to use POI 3.6.</li> <li>Updated to use IKVM 0.42.0.3.</li> <li>Updated to make MPX duration parsing more lenient (Contributed by Jari Niskala).</li> <li>Updated to make MPP Var2Data extraction more robust (Contributed by Jari Niskala).</li> <li>Updated to implement MSPDI context caching to improve performance (Contributed by Jari Niskala).</li> <li>Updated to improve MPP file task structure validation. (Contributed by Jari Niskala).</li> <li>Updated to improve MPX file parsing. (Contributed by Jari Niskala).</li> <li>Updated to automatically populate missing WBS attributes. (Contributed by Jari Niskala).</li> <li>Updated to refactor the Relation class (note minor method name changes).</li> <li>Updated to add default calendar to Planner output.</li> </ul>"},{"location":"CHANGELOG/#310-2009-05-20","title":"3.1.0 (2009-05-20)","text":"<ul> <li>Fixed Issue 73: Plan file fails to load.</li> <li>Fixed Issue 72: Resource Assignment Normaliser rounding problem.</li> <li>Fixed Issue 78: Column alignment values are incorrect.</li> <li>Fixed Issue 76: NullPointerException in parseExtendedAttribute() (Contributed by Paul Pogonyshev).</li> <li>Fixed Issue 74: .0 at the end of WBS code and outline number (Contributed by Paul Pogonyshev).</li> <li>Fixed Issue 79: Too strict net.sf.mpxj.mpd.ResultSetRow.</li> <li>Fixed Issue 80: Generated planner file can't be opened.</li> <li>Fixed Issue 82: Support for loading global.mpt.</li> <li>Fixed Issue 81: Lowercase table name won't work with db on linux machines.</li> <li>Fixed Issue 71: Standard Calendar localization import problem.</li> <li>Fixed Issue 83: Strange duration conversion from database</li> <li>Fixed Issue 86: FilterCriteria not being read in properly (Contributed by James Styles)</li> <li>Updated to fix Steelray bug 12335: Infinite loop when reading an MPP9 file.</li> <li>Updated to fix Steelray bug 8469: Subproject flag not set correctly.</li> <li>Updated to fix potential NPEs (Suggested by Steve Jonik).</li> <li>Updated EncryptedDocumentInputStream to wrap rather than extend the POI DocumentInputStream to allow use with POI 3.5. (Contributed by Josh Micich)</li> <li>Updated to provide strong names for .Net DLLs.</li> </ul>"},{"location":"CHANGELOG/#300-2009-01-25","title":"3.0.0 (2009-01-25)","text":"<ul> <li>Updated to the Project 2007 MSPDI schema.</li> <li>Updated to POI 3.2.</li> <li>Updated to use the SAX parser with JAXB rather than DOM to reduce memory consumption.</li> <li>Updated MPX output to prevent Project 2007 complaining.</li> <li>Fixed Issue 68: Task getNumber*() methods return inaccurate large values.</li> <li>Fixed Issue 56: Duplicate task in file.getChildTasks() when opening MPX.</li> <li>Fixed Issue 57: Relation.getTask returns null.</li> <li>Fixed Issue 58: Task.getSplits() not consistent.</li> <li>Fixed Issue 60: WBS Field not imported Mpp12.</li> <li>Fixed Issue 63: There are some conflict in TaskField.</li> <li>Fixed Issue 66: MSPDIReader is not setting calendarName in projectHeader.</li> <li>Fixed Issue 67: Write resource calendar with exceptions only.</li> <li>Fixed Issue 69: File loses predecessors.</li> <li>Fixed Issue 70: Resources not bring read.</li> <li>Updated to fix incorrect duration calculations where minutes per week were not being used (Contributed by Jonas Tampier).</li> <li>Updated split task implementation to represent splits as DateRange instances rather than as hours.</li> <li>Added .Net DLLs using IKVM.</li> <li>Added support for reading timephased resource assignment data from MPP files.</li> <li>Added support CurrencyCode, CreationDate, LastSaved and HyperlinkBase project header fields.</li> <li>Added support for reading recurring task data from MPP files.</li> <li>Added methods to MPXReader and MPXWriter to allow the caller to determine the supported locales.</li> <li>Added Spanish locale (Contributed by Agustin Barto).</li> <li>Added support for durations with percentage time lag (Contributed by Jonas Tampier).</li> <li>Added support MSPDI file split tasks.</li> </ul>"},{"location":"CHANGELOG/#210-2008-03-23","title":"2.1.0 (2008-03-23)","text":"<ul> <li>Updated to POI 3.0.2</li> <li>Updated to address an out of memory exception raised when processing certain MPP12 files.</li> <li>Updated to fix a problem caused by duplicate ID values in MPP12 files.</li> <li>Updated to fix a problem with the subproject unique ID calculation (Contributed by Jari Niskala).</li> <li>Fixed Issue 48: Import from Project 2007 ignores some tasks.</li> <li>Fixed Issue 52: Crash on priority not set in MSPDI-file.</li> <li>Fixed Issue 51: Resource start/finish dates with MSP 2007.</li> <li>Fixed Issue 51: MS Project 2007: Calendar exceptions dates are wrong.</li> <li>Added support for Enterprise task and resource fields.</li> <li>Added support for Baseline task and resource fields.</li> <li>Added support for extracting non-English (i.e. character set encoded) text from note fields.</li> <li>Added support for Chinese MPX files (contributed by Felix Tian).</li> <li>Added support for reading project start and end dates from all MPP file types (Bug #1827633).</li> <li>Added support for password protected MPP9 files (Contributed by Jari Niskala)</li> <li>Added support for calendar exceptions for MPP12 files (Contributed by Jari Niskala)</li> <li>Added support for value lists and descriptions for custom fields (Contributed by Jari Niskala)</li> <li>Added support for timescale formats (Contributed by Jari Niskala)</li> <li>Added support for the project file path attribute (Contributed by Jari Niskala)</li> <li>Added support for the ignore resource calendar attribute (Contributed by Jari Niskala)</li> <li>Added support for the resource actual overtime work attribute (Contributed by Jari Niskala)</li> <li>Added support for the resource material label attribute (Contributed by Jari Niskala)</li> <li>Added support for the resource NT account attribute (Contributed by Jari Niskala)</li> <li>Improved support for hyperlinks (Contributed by Jari Niskala)</li> <li>Improved support for custom fields in MPP12 files (Contributed by Jari Niskala)</li> </ul>"},{"location":"CHANGELOG/#200-2007-10-07","title":"2.0.0 (2007-10-07)","text":"<ul> <li>Migrated to Java 5</li> <li>Introduced generics</li> <li>Introduced enums</li> <li>Updated to POI 3.0.1</li> <li>Updated to JAXB 2.1.4</li> <li>Changed company details from Tapster Rock to Packwood Software</li> </ul>"},{"location":"CHANGELOG/#100-2007-08-30","title":"1.0.0 (2007-08-30)","text":"<ul> <li>Added support for reading MPD files via JDBC</li> <li>Added support for reading Planner files</li> <li>Added support for over allocated flag to all MPP file formats.</li> <li>Added support for calculating duration variance from MPP files.</li> <li>Added support for calculating start and finish variance from MPP files.</li> <li>Added support for attribute change listeners for Task and Resource classes.</li> <li>Added support for start slack, finish slack, free slack and total slack read from MPP files.</li> <li>Added support for external tasks.</li> <li>Added unique ID generation for calendars read from MPX files.</li> <li>Added support for the status date property of the project.</li> <li>Fixed a timezone related bug when handling dates for calendar exceptions (Contributed by Todd Brannam).</li> <li>Fixed incorrect calculation of lag times for some MPP files.</li> <li>Fixed missing predecessor tasks in certain rare MPP9 files.</li> <li>Fixed incorrect MPX file AM/PM text setting in certain locales.</li> <li>Fixed an ArrayIndexOutOfBoundsException.</li> <li>Fixed a ClassCastException.</li> <li>Fixed a zero length string error.</li> <li>Fixed a duration rounding error when reading MSPDI files.</li> <li>Fixed incorrect \"as late as possible\" constraint handling.</li> <li>Incorrect late start date read from an MPP9 file.</li> <li>Incorrect total slack calculation.</li> <li>Added a default for the task constraint type attribute to prevent a possible NPE when writing an MSPDI file.</li> <li>Added a default resource calendar name where the resource name is empty.</li> <li>Updated the Column.getTitle method to take account of user defined column aliases.</li> <li>Updated to add another condition to the test for deleted tasks in MPP8 files.</li> <li>Updated to significantly improve the performance of writing MSPDI files.</li> </ul>"},{"location":"CHANGELOG/#092-2006-03-07","title":"0.9.2 (2006-03-07)","text":"<ul> <li>Added support for split views.</li> <li>Added support for graphical indicators.</li> <li>Added a workaround for a bug in MS Project which is seen when calendar exceptions are exported to an MSPDI file. If the exception contained seconds and milliseconds, MS Project marked every day as being affected by the exception, not the day or range of days specified.</li> <li>Updated to make date/time/number formats generic, and thus available to end users. For example, this allows users to format currencies in line with the settings in the project file.</li> <li>Standardised on minutes per day and minutes per week, rather than hours per day and hours per week.</li> <li>Provided additional time ranges for calendar exceptions.</li> <li>Refactored Task and Resource to use TaskField and ResourceField to identify fields.</li> <li>Updated to automatically generate WBS for tasks read from MPP files when no WBS information is present in the file.</li> <li>Fixed a bug when reading MPP files where task finish dates appeared before the start date where a \"start no later than\" constraint was in use.</li> <li>Fixed a bug which resulted in invalid MPX files being generated when a project either had no tasks, or it had no resources.</li> <li>Fixed a long standing bug where the calendar records were being written into MPX files after they were referred to in the project summary record.</li> <li>Fixed a bug where WBS and Outline Levels were not being auto generated correctly when an MPP file contained a project summary task.</li> <li>Fixed a bug where split tasks were not being reported correctly.</li> </ul>"},{"location":"CHANGELOG/#091-2006-01-26","title":"0.9.1 (2006-01-26)","text":"<ul> <li>Major API rewrite.</li> <li>Added a flag called \"expanded\" to the Task class to represent whether a task in an MPP9 file is shown as expanded or collapsed by MS Project.</li> <li>Fixed a bug in the relation code in MpxjQuery (contributed by Shlomo Swidler).</li> <li>Modified MPXDateFormat, MPXTimeFormat and MPXCurrencyFormat to derive them from DateFormat and NumberFormat.</li> <li>Added support for MPT files.</li> <li>Fixed a bug which could case an NPE when reading certain MPP9 files.</li> <li>Added support for the \"marked\" attribute for MPP9 files.</li> <li>Added support for reading split task data from MPP9 files.</li> <li>Added support for reading calculate multiple critical paths flag.</li> <li>Fixed a bug which could case an array out of bounds exception in the Priority (contributed by Frank Illenberger).</li> <li>Fixed bug #1346735 \"Priorities of the tasks are exported incorrectly\".</li> <li>Added code to allow tasks, resources, resource assignments and calendars to be removed from the data structure.</li> <li>Implemented Italian MPX file format translation (contributed by Elio Zoggia).</li> <li>Cleaned up calendar usage.</li> <li>Added support for retrieval of custom document summary fields from the project header (contributed by Wade Golden).</li> <li>Updated to use checkstyle 4.0 and fixed warnings.</li> <li>Rationalised duration conversions into a set of methods in the MPXDuration class.</li> <li>Replaced various file format conversion utilities with the general purpose MpxjConvert utility.</li> <li>Fixed an issue where tasks with a percent complete value, but no resource assignments, would not write correctly to an MSPDI file.</li> <li>Added an accessor method for resource calendars.</li> <li>Unique ID generation was not correct for tasks, resources and calendars if these entities were added to an existing project file.</li> <li>Fixed a compatibility issue with POI3</li> <li>Added an event listener to the project file to allow notifications of resources and tasks being read and written to and from a file.</li> <li>Fixed a compiler warning when build with JDK5.</li> <li>Fixed a bug where a project start date was not being set correctly in the project header.</li> <li>Added support for reading the project header \"calendar name\", \"schedule from\" and \"revision\" values from MPP files.</li> <li>Fixed split task support.</li> <li>Enhanced TableFontStyle implementation.</li> </ul>"},{"location":"CHANGELOG/#0025-2005-08-11","title":"0.0.25 (2005-08-11)","text":"<ul> <li>Added support for reading all properties from an MPP9 file which define the visual appearance of the Gantt Chart view shown in Microsoft Project (development funding courtesy of Steelray).</li> <li>Tidied up constructors. Added no-argument constructors to the MPPFile and MSPDIFile classes.</li> <li>Fixed incorrect value in WorkGroup enumerated type.</li> <li>Implemented the resource assignment work contour property (contributed by Wade Golden).</li> <li>Implemented correct handling for MPX files using different character set encodings (suggested by Frank Illenberger).</li> <li>Fixed task duration calculation when importing an MPP file with a \"non-standard\" hours-per-day setting (contributed by Wade Golden).</li> <li>Updated to ensure that the MPX task fixed attribute, and the MPP/MSPDI task type attribute are correctly handled.</li> <li>Updated to implement the remaining project header attributes supported by the MSPDI file format.</li> <li>Updated to add support for reading the MPX 3.0 files generated by Primavera (courtesy of CapitalSoft).</li> <li>Fixed incorrect assumptions about conversion of durations to hours when writing MPX files (contributed by Frank Illenberger).</li> <li>Updated to calculate remaining work for resource assignments on import, to allow MSPDI export of this data to work correctly (contributed by Frank Illenberger).</li> <li>Updated to add another condition to the test for deleted tasks in MPP8 files.</li> <li>Updated to fix a problem with reading assignment data from MPP9 files.</li> <li>Rationalised the location of the JUnit tests and the sample files.</li> <li>Fixed a problem where the project start and end dates reported in the project header were incorrect.</li> <li>Fixed an array out of bounds exception when reading an MPP9 file.</li> <li>Updated to allow MPXCalendarHours to accept an arbitrary number of time periods.</li> <li>Introduced the Day class to replace the use of arbitrary integers to represent days of the week.</li> <li>Added the ability to query the task assignments for a resource using the Resource.getTaskAssignments() method.</li> <li>Fixed a problem with number formats in MSPDI files.</li> <li>Updated the MPP View class to extract the view type.</li> <li>Updated to ensure that duration values read from an MSPDI file are converted into the appropriate duration units, rather than being left as hours as the durations are represented in the MSPDI file.</li> <li>Implemented French MPX file format translation (contributed by Benoit Baranne).</li> <li>Fixed a bug reading assignment work contour attribute.</li> <li>Updated to make failure more graceful when a Microsoft Project 4.0 MPP file is encountered.</li> <li>Fixed a bug where deleted constraints in an MPP9 file were not being ignored.</li> <li>Updated to make replace the int relation type in the Relation class with instances of the RelationType class.</li> <li>Updated to derive RelationList from AbstractList.</li> <li>Added sample code to MpxjQuery to illustrate retrieval of information from Relation instances.</li> <li>Updated MpqjQuery to parse MSPDI files as well as MPP and MPX files.</li> <li>Added support for early start, early finish, late start, late finish to MPP files.</li> <li>Updated MPP9 file support to handle start as late as possible constraints. </li> <li>Added support for sub project file information in MPP9 files.</li> <li>Fixed a bug where occasionally a task in MPP9 files were not being read.</li> <li>Fixed a NegativeArrayIndexException thrown when reading certain MPP8 files.</li> <li>Reduced the memory used by MPXJ by anything up to 60%, particularly when reading large MPP files.</li> <li>Fixed a bug when reading MPX files where the field delimiter was not comma, and task relation lists contained more than one entry.</li> <li>Updated to fix unreliable retrieval of project start and end dates from certain MPP files.</li> <li>Fixed schedule from value in MSPDI files (contributed by Frank Illenberger).</li> <li>Fixed a bug when reading durations in elapsed days from an MPP file.</li> <li>Tasks can now have arbitrary priority values. These values are mapped to/from the fixed MPP8/MPX priority values where necessary.</li> </ul>"},{"location":"CHANGELOG/#0024-2005-01-10","title":"0.0.24 (2005-01-10)","text":"<ul> <li>Fixed a bug (again!) where deleted resource assignments in MPP9 files were still seen by MPXJ.</li> <li>Updated to use class instances instead of primitives to represent some enumerated types.</li> <li>Updated to implement support for reading and writing all of the basic Resource attributes found in MSPDI files.</li> <li>Updated to implement support for reading and writing all of the basic Task attributes found in MSPDI files.</li> <li>Updated to implement support for reading and writing all of the basic Project Header attributes from MPP8 and MPP9 files.</li> <li>Made MSPDI file parsing more robust to allow it by default to cope with non-schema-compliant XML in the same manner as MS Project. Implemented a new compatibility flag to allow this behaviour to be disabled in favour of strict parsing.</li> <li>Merged DateTimeSettings, CurrencySettings, and DefaultSettings into the ProjectHeader class. This change makes the project header data easier to use as it is in a single place. It also makes the entities used to describe a project consistent with the contents of the MPP and MSPDI file formats.</li> </ul>"},{"location":"CHANGELOG/#0023-2004-11-17","title":"0.0.23 (2004-11-17)","text":"<ul> <li>Fixed a bug where MPXJ was still using the default locale of the user's machine to create localised MPX files when a normal international MPX file was expected.</li> <li>Fixed a bug where the incorrect record delimiter was being used in by the MPX RelationList class.</li> <li>Fixed a bug where the method Task.getText21 was not retrieving the correct text value.</li> <li>Fixed a bug where the task unique ID values were being truncated unnecessarily.</li> <li>Fixed a bug where calendar exceptions were not testing the range of dates between the start and end date correctly.</li> <li>Fixed a bug where the priority of a task was being escalated when converting between an MPP9 file and an MSPDI file.</li> <li>Fixed a bug where a deadline was incorrectly being added to a task when importing data from an MPP9 file.</li> <li>Fixed a bug where deleted resource assignments in MPP9 files were still seen by MPXJ.</li> <li>Fixed a bug where MPXFile attributes were not being correctly copied by the copy constructor.</li> <li>Fixed a rounding error in MPXCalendar.getDaysInRange (contributed by Wade Golden)</li> <li>Updated to make MPXJ more robust in the face of unexpected offsets in MPP8 file format.</li> <li>Updated support for password protected files to allow write reserved files to be read.</li> <li>Updated to use the latest version of JAXB, as shipped in Sun's Java Web Services Developer Pack (JWSDP) version  1.4.</li> <li>Updated the distribution to include the redistributable files from the JWSDP JAXB implementation. Users will no longer need to download JWSDP separately in order to make use of MPXJ's MSPDI functionality.</li> <li>Updated to prevent empty notes records being added to tasks and resources when reading an MSPDI file.</li> <li>Updated to improve accuracy when converting an MPP file to an MSPDI file.</li> <li>Added support for blank task rows in MPP8 files.</li> <li>Added support for blank resource rows in MPP8 files.</li> <li>Added support for Portuguese MPX files.</li> <li>Added support reading and writing extended attributes (apart from outline codes) for MSPDI files.</li> <li>Added support for the Resource Type attribute.</li> </ul>"},{"location":"CHANGELOG/#0022-2004-07-27","title":"0.0.22 (2004-07-27)","text":"<ul> <li>Fixed a bug where task data was not being read correctly from very large MPP9 files.</li> <li>Fixed a bug where certain MPP8 files were not read correctly when no constraint data is present.</li> <li>Fixed a bug where certain MPP9 files were not read correctly.</li> <li>Fixed a bug where MPP9 files containing invalid resource data were not read correctly.</li> <li>Fixed a bug where MPXJ was using the default locale of the user's machine to create localised MPX files when a normal international MPX file was expected.</li> <li>Fixed a bug where MPXJ not correctly handling embedded line breaks when reading and writing MPX files.</li> <li>Removed arbitrary restrictions on the number of various entities, originally taken from the MPX specification.</li> <li>Updated MPX documentation for Task.getFixed and Task.setFixed.</li> <li>Updated MPP9 file code to improve handling invalid offset values.</li> <li>Updated to remove leading and trailing spaces from MPX task field names before processing.</li> <li>Updated to detect password protected files and raise a suitable exception.</li> <li>Implemented an enhancement to improve file loading speed by an order of magnitude for files with a large number of tasks or resources (based on a contribution by Brian Leach).</li> <li>Implemented support for Maven.</li> <li>Updated MpxCreate utility to allow it to create both MPX and MSPDI files.</li> <li>Added new JUnit test for confidential customer data.</li> <li>Added support for the resource assignment remaining work attribute for MPP8, MPP9 and MSPDI files.</li> </ul>"},{"location":"CHANGELOG/#0021-2004-05-06","title":"0.0.21 (2004-05-06)","text":"<ul> <li>Fixed a bug where the task start date attribute was not always correct for MPP8 files.</li> <li>Fixed a bug causing valid tasks to be incorrectly identified as being deleted in MPP8 files.</li> <li>Fixed a bug causing an exception when reading certain MPP9 files.</li> <li>Updated to allow localised MPX files to be written and read.</li> <li>Implemented support for German MPX files.</li> <li>Implemented generic mechanism for dealing with task field aliases.</li> <li>Implemented task field alias read/write for MSPDI files.</li> <li>Implemented task field alias read for MPP9 files.</li> <li>Implemented resource field alias read/write for MSPDI files.</li> <li>Implemented resource field alias read for MPP9 files.</li> </ul>"},{"location":"CHANGELOG/#0020-2004-03-15","title":"0.0.20 (2004-03-15)","text":"<ul> <li>Fixed a bug where alternative decimal delimiters and thousands separators were not being handled correctly when reading and writing MPX files.</li> <li>Fixed a bug causing a null pointer exception when writing an MSPDI file.</li> <li>Fixed a bug in MSPDI files where default values were being written incorrectly for some task attributes.</li> <li>Fixed a bug with MSPDI file date handling in non GMT time zones.</li> <li>Fixed a bug in processing calendar data where data block is not a multiple of 12 bytes</li> <li>Fixed a bug processing tables where column data is null</li> <li>Fixed checkstyle code warnings.</li> <li>Fixed Eclipse code warnings.</li> <li>Updated to include version 2.5 of the POI library.</li> <li>Added support for task calendars.</li> </ul>"},{"location":"CHANGELOG/#0019-2003-12-02","title":"0.0.19 (2003-12-02)","text":"<ul> <li>Fixed a bug reading table data from certain MPP8 files</li> <li>Updated MSPDI support to use the latest version of JAXB (from JWSDP-1.3)</li> <li>Re-implemented base and resource calendars as a single MPXCalendar class</li> <li>Updated support for base calendars and resource calendars for all file formats</li> <li>Improved MPXException to print details of any nested exception when a stack trace is printed.</li> <li>Removed unnecessary use of ByteArray.java</li> <li>Added support for the following task fields: ActualOvertimeCost, ActualOvertimeWork, FixedCostAccrual, Hyperlink, HyperlinkAddress, HyperlinkSubAddress, LevelAssignments, LevelingCanSplit, LevelingDelay, PreleveledStart, PreleveledFinish, RemainingOvertimeCost, RemainingOvertimeWork.</li> </ul>"},{"location":"CHANGELOG/#0018-2003-11-13","title":"0.0.18 (2003-11-13)","text":"<ul> <li>Fixed a bug with writing MS Project compatible MSPDI XML files in non-GMT timezones.</li> <li>Fixed a bug with writing MSPDI XML files in non-GMT timezones.</li> <li>Fixed a bug causing an exception when zero length calendar names were present</li> <li>Fixed a bug causing MPP8 flags to be read incorrectly. Note that flag 20 is still not read correctly.</li> <li>Fixed a bug with the \"Microsoft Project Compatible Output\" flag for MSPDI files.</li> <li>Fixed a bug reading task text 10.</li> <li>Added new MPXFile.setIgnoreTextModel() method to allow MPXJ to ignore faulty text version of task or resource model records in MPX files.</li> <li>Improved invalid MPX data error handling and reporting.</li> <li>Added BaseCalendar.getDate method to allow end dates to be calculated based on a start date and a duration of working time.</li> <li>Made MPXDateFormat implement java.io.Serializable to allow MPXDate to serialize correctly.</li> <li>Updated the ant build file to allow MPXJ to be built without the components that depend on JAXB</li> <li>Rationalised setDefaultStartTime and setDefaultEndTime methods</li> <li>Added MppXml utility</li> <li>Added support for querying view information held in MPP files.</li> <li>Added support for querying table information held in MPP files. (NB This allows the user to retrieve column information, including user defined column names)</li> <li>Added support for outlinecode1-10 fields in MPP9 files.</li> <li>Added support for resource \"available from\" and \"available to\" fields.</li> <li>Verified that MPXJ will read MPP files written by Microsoft Project 2003 (they are still MPP9 files).</li> </ul>"},{"location":"CHANGELOG/#0017-2003-08-05","title":"0.0.17 (2003-08-05)","text":"<ul> <li>Fixed a bug where a decimal point was being appended to the currency format even if no decimal digits were required.</li> <li>Fixed a bug where special characters appearing in the currency symbol were not being quoted.</li> <li>Fixed a bug that caused resource assignments to be incorrectly read from some MPP8 files.</li> <li>Added a new write method to MPXFile allowing the user control over the character encoding used when writing an MPX file.</li> </ul>"},{"location":"CHANGELOG/#0016-2003-07-04","title":"0.0.16 (2003-07-04)","text":"<ul> <li>Fixed bug causing some extended boolean attributes to be read incorrectly.</li> <li>Fixed bug causing MPP8 file task data to be read incorrectly under certain circumstances.</li> <li>Updated calendar duration code to account for calendar exceptions.</li> </ul>"},{"location":"CHANGELOG/#0015-2003-06-17","title":"0.0.15 (2003-06-17)","text":"<ul> <li>Fixed a bug causing resource assignments to be duplicated in an MPX file created programmatically.</li> <li>Fixed a bug causing an incorrect duration value to be read from an MPP9 file.</li> <li>Fixed a bug causing invalid MPX files to be written in locales which don't use a period as the decimal separator.</li> <li>Fixed a bug causing embedded quote and comma characters in task and resource notes to be handled incorrectly.</li> <li>Added simple JUnit test to demonstrate iteration through relationships.</li> <li>Added an example of programmatically creating a partially complete task to the MPXCreate.java example.</li> <li>Added default values to the MPX project header.</li> <li>Added support for reading the RemainingDuration field from an MPP9 file.</li> <li>Updated predecessor and successor method documentation.</li> <li>Updated Task.get/set ResourceInitials and Task.get/set ResourceNames method documentation.</li> <li>Updated to extract the following fields from resource assignment data in MPP files which were previously not imported: ActualCost, ActualWork, Cost, Finish, Start, Units, Work.</li> </ul>"},{"location":"CHANGELOG/#0014-2003-05-28","title":"0.0.14 (2003-05-28)","text":"<ul> <li>Updated to extract the following fields from resource data in an MPP9 file which were previously not imported: Flag1-Flag20.</li> <li>Added the method MPPFile.getFileType to allow the type of MPP file (MPP8: 98, MPP9: 2000,2002) to be determined.</li> <li>Updated API to make classes final and constructors package access only where appropriate.</li> <li>Updated to use of 6 byte long int fields for cost and work values for MPP8.</li> <li>Fixed error in reading task fixed cost for MPP8.</li> <li>Updated to extract the following fields from task data in an MPP8 file which were previously not imported: Contact, Cost1-Cost10, Date1-Date10, Duration1-Duration10, EffortDriven, Finish1-Finish10, Flag1-Flag20, HideBar, Milestone, Number1-Number20, Rollup, Start1-Start10, Text1-Text30, Type, WBS.</li> <li>Updated to extract the following fields from resource data in an MPP8 file which were previously not imported: Code, Cost1-Cost10, Date1-Date10, Duration1-Duration10, EmailAddress, Finish1-Finish10, Number1-Number20, Start1-Start10, Text1-Text30</li> <li>Added support for task and resource note fields in MPP8 files.</li> <li>Added support for the OvertimeCost task attribute for all file formats.</li> <li>Updated to extract calendar data from MPP8 files.</li> <li>Updated resource notes to fix end of line handling problem.</li> <li>Added functionality to read default settings and currency settings data from MPP files.</li> </ul>"},{"location":"CHANGELOG/#0013-2003-05-22","title":"0.0.13 (2003-05-22)","text":"<ul> <li>Implemented support for the Microsoft Project 98 file format.</li> <li>Fixed a bug that prevented task and resource note text from being read.</li> <li>Updated to remove a Java 1.4 dependency introduced in 0.0.12. Will now work with Java 1.3.</li> <li>Updated to correct handling of carriage returns embedded in note fields.</li> </ul>"},{"location":"CHANGELOG/#0012-2003-05-08","title":"0.0.12 (2003-05-08)","text":"<ul> <li>Fixed incorrect handling of timezones and daylight saving time.</li> <li>Fixed incorrect task structure generated from outline levels.</li> <li>Updated to extract the notes fields from tasks and resources read from an MPP file.</li> <li>Added the option to remove or preserve the RTF formatting from the note fields from an MPP file.</li> <li>Updated to extract the following fields from task data in an MPP file which were previously not imported: Text11-Text30, Number6-Number20, Duration4-Duration10, Date1-Date10, Cost4-Cost10, Start6-Start10, Finish6-Finish10</li> <li>Updated to extract the following fields from resource data in an MPP file which were previously not imported: Text6-Text30, Start1-Start10, Finish1-Finish10, Number1-Number20, Duration1-Duration10, Date1-Date10, Cost1-Cost10</li> </ul>"},{"location":"CHANGELOG/#0011-2003-04-15","title":"0.0.11 (2003-04-15)","text":"<ul> <li>Fixed error in format string used in one of the example files.</li> <li>Fixed error where double byte characters were being read incorrectly.</li> <li>Fixed error where deleted constraints were being resurrected when read from an MPP file.</li> <li>Updated to extract the following fields from task data in an MPP file which were previously not imported: Flag11-Flag20, Rollup, HideBar, EffortDriven.</li> </ul>"},{"location":"CHANGELOG/#0010-2003-04-08","title":"0.0.10 (2003-04-08)","text":"<ul> <li>Corrected Actual Start and Actual End fields from MPP file.</li> <li>Fixed bug where time values were being broken by daylight saving time in the user's default locale.</li> <li>Updated to extract the following fields from task data in an MPP file which were previously not imported: Actual Work, Baseline Work, Cost Variance, Deadline, Remaining Work, Work.</li> <li>Updated to extract the following fields from resource data in an MPP file which were previously not imported: Actual Cost, Actual Overtime Cost, Actual Work, Baseline Work, Cost, Cost Variance, Max Units, Overtime Cost, Overtime Rate, Overtime Work, Peak, Regular work, Remaining Cost, Remaining Overtime Cost, Remaining Work, Standard Rate, Work, Work Variance</li> </ul>"},{"location":"CHANGELOG/#009-2003-04-03","title":"0.0.9 (2003-04-03)","text":"<ul> <li>Fixed bug when handling certain types of modified MPP file where resources have been updated.</li> <li>Added sample MPP files for bugs to the JUnit tests.</li> <li>Added support for summary flag import from MPP files.</li> <li>Added automatic summary flag update when creating an MPX file programmatically.</li> <li>Added new constructor to the MSPDIFile class to allow MSPDI files to be created from scratch.</li> </ul>"},{"location":"CHANGELOG/#008-2003-03-27","title":"0.0.8 (2003-03-27)","text":"<ul> <li>Added support for estimated durations.</li> <li>Fixed bug in handling certain types of modified MPP file where tasks have been updated.</li> <li>Added the facility to auto generate outline numbers.</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":"<p>Can I use MPXJ to write MPP files?</p> <p>Not at present. Although it is technically feasible to generate an MPP file, the knowledge we have of the file structure is still relatively incomplete, despite the amount of data we are able to correctly extract. It is therefore likely to take a considerable amount of development effort to make this work, and it is conceivable that we will not be able to write the full set of attributes that MPXJ supports back into the MPP file - simply because we don't understand the format well enough. You are therefore probably better off using MSPDI which does support the full range of data items present in an MPP file.</p> <p>I'm generating output using MPXJ, and when my end users open the file in Microsoft Project, I want to control the appearance of the project data that they see. Can I do this with MPXJ?</p> <p>In short, the answer to this question is no. The only file format which allows you to control the appearance of project data when opened in Microsoft Project is MPP. Just to clarify, visual appearance in this context refers to the view that appears when the project opens, the filtering applied to the view, the table data visible, the columns in the table, bar styles, text styles and so on. While MPXJ can read this information from an MPP file, none of the supported output file formats contain these attributes.</p> <p>When I double click on an MPX file to open it in Microsoft Project, I end up with two copies of the file open. What's happening?</p> <p>This isn't an issue with MPXJ - but we have an answer for you anyway! The problem is caused by an incorrect setting in Microsoft Windows which controls the way MPX files are opened. To fix the setting, open the Control Panel and click on the \"Folder Options\" icon. Select the \"File Types\" tab and scroll down the list of file types until you find an entry for MPX. Once you have found the entry for MPX, click on it to highlight it, then press the \"Advanced\" button at the bottom right hand side of the dialog. In the list of actions that you are now presented with, click on the word \"open\" to highlight it, then click the \"Edit\" button on the right hand side of the dialog. Finally, ensure that the \"Use DDE\" check box is not checked, and you can now finish by clicking OK on each of the open dialogs to dismiss them. You should now find that double clicking on an MPX file will now only open one copy of the file in Microsoft Project.</p> <p>I use a version of Java older than Java 8, can I use MPXJ?</p> <p>The last version of MPXJ which supports versions of Java prior to Java 8 is version 7.9.8.</p> <p>I use a Java 1.4 JVM, but MPXJ is built with a later version of Java, is there anything I can do which will allow me to use it?</p> <p>Yes there is. Assuming you are using a version of MPXJ prior to 8.0.0, try using Retroweaver.</p>"},{"location":"faq/#known-issues-with-mpxj","title":"Known Issues with MPXJ","text":"<p>I have an MPP file created by MS Project 98, and some Flag field values are incorrect.</p> <p>The MPP8 file format is rather cryptic, and one part of it that I have yet to really understand fully is how the Flag fields are stored. I've spent a lot of time looking at this and have not made a lot of progress, so at the moment no further work is being undertaken to fix this. Contributions of insights, knowledge or fixed code for this problem are welcome. You'll find a bug for this item logged in the SourgeForge bug tracker.</p> <p>When I read an MPP file I sometimes see an extra task or resource record.</p> <p>What you are seeing are \"hidden\" tasks and resources which newer versions of Microsoft Project appear to use as placeholders for summary information about all of the tasks and all of the resources in a project. We're not sure exactly which versions of Project hold data like this, although we think this is only relevant for the MPP9 and MPP12 file formats. We've also noticed that the information in these hidden tasks and resources may not be reliable, so don't place too much emphasis on them in your application.</p> <p>You can ignore the first resource if it has a null value as its name. The attributes of this resource should actually be a summary of all of the resource combined, e.g. utilisation, actual work, remaining work and so on for the complete set of \"real\" resources.</p> <p>You can ignore the first task if it has an outline level of zero, this task will be a summary of all the \"real\" tasks in the project. You may also find that the name of this task matches the name of the project.</p> <p>My localised version of MS Project won't read the MPX files created by MPXJ, or MPXJ won't read the MPX files written by my localised version of MS Project.</p> <p>Localised versions of MS Project (i.e. those which have been translated for use in a non-English locale) read and write MPX files which include localised text strings. The end result of this is that an English/International version of MS Project can't read MPX files produced by a localised version of MS Project, and vice versa.</p> <p>MPXJ supports a small number of non-English locales, and can read and write MPX files correctly for those locales. You can also use MPXJ to translate MPX files from one locale to another. The MPXFile.setLocale() method must be called prior to reading or writing an MPX file in order to set the required locale. By default, MPXJ will always produce MPX files for the International/English locale, regardless of the locale for which your operating system if configured.</p> <p>Supported locales for MPX files currently include German, Spanish, French, Italian, Portuguese, Swedish, and Simplified Chinese. Producing a translation for your locale is very easy, please contact us for details on how you can help us to do this.</p> <p>When I write an MPX file, changes to the project header settings I've made seem to be lost, what's happening?</p> <p>One of the first things the MPXWriter's write method does is to determine the current locale and update various project settings (for example, currency and date formats) to match the selected locale. This behaviour can be changed so that the settings in the project are left unmodified by setting the useLocaleDefaults parameter to false when calling the write method (for versions of MPXJ up to and including 3.0.0) or by calling the method setUseLocaleDefaults on the MPXWriter instance before calling the write method (for versions of MPXJ after 3.0.0).</p>"},{"location":"faq/#unit-tests","title":"Unit Tests","text":"<p>I am trying to run the MPXJ unit tests and I'm having problems with failures in JAXB functionality. What's happening?</p> <p>Older versions of JAXB were known to have issues with the JUnit classloader, so running the JUnit test runner with the -noloading command line option, other taking other steps to disable JUnit classloading was recommended. This problem is not believed to affect the more recent version of JAXB now used by MPXJ.</p>"},{"location":"faq/#net-core","title":".NET Core","text":"<p>When using MPXJ from .NET Core I get an error similar to <code>No data is available   for encoding 437. For information on defining a custom encoding, see the   documentation for the Encoding.RegisterProvider method.</code></p> <p>By default .NET Core does not include all of the character encodings which may be used by MPXJ (and which are present by default in .NET Framework). To resolve this issue add the following to your code:</p> <pre><code>System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);\n</code></pre>"},{"location":"faq/#log4j2","title":"log4j2","text":"<p>When you start MPXJ, you may see the following message written to the console:</p> <pre><code>ERROR StatusLogger Log4j2 could not find a logging implementation.\nPlease add log4j-core to the classpath. Using SimpleLogger to log to the console.\n</code></pre> <p>MPXJ uses Apache POI to read MPP files. Apache POI uses log4j2 to write log messages. By default the only dependency POI has on log4j2 is to its interfaces. If you're not already using log4j2 as part of your code, and you don't explicitly include the rest of the log4j2 implementation jar files, you'll see the warning message shown above. This message can safely be ignored, it's just telling you that any log messages POI produces will be written to the console. If you would like to silence this message, you can supply the following argument to the JVM:</p> <pre><code>-Dlog4j2.loggerContextFactory=org.apache.logging.log4j.simple.SimpleLoggerContextFactory\n</code></pre> <p>If you are using the Python version of MPXJ, you can provide the argument as shown below when you initialize <code>jpype</code>.</p> <pre><code>jpype.startJVM(\"-Dlog4j2.loggerContextFactory=org.apache.logging.log4j.simple.SimpleLoggerContextFactory\")\n</code></pre>"},{"location":"field-guide/","title":"Field Guide","text":""},{"location":"field-guide/#field-guide","title":"Field Guide","text":"<p>The tables below provide an indication of which fields are populated when files of different types are read using MPXJ The tables are not hand-crafted: they have been generated from test data and are therefore may be missing some details.</p>"},{"location":"field-guide/#project","title":"Project","text":""},{"location":"field-guide/#core-fields","title":"Core Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) AM Text \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Cost \u2713 Actual Duration \u2713 Actual Start \u2713 Actual Work \u2713 Actuals In Sync \u2713 Application Version \u2713 \u2713 \u2713 Author \u2713 \u2713 \u2713 \u2713 \u2713 Auto Add New Resources and Tasks \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Auto Filter \u2713 Auto Link \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Bar Text Date Format \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Category \u2713 \u2713 Comments \u2713 \u2713 \u2713 Company \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Content Status \u2713 Content Type \u2713 Cost \u2713 Creation Date \u2713 \u2713 \u2713 \u2713 \u2713 Critical Activity Type \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Critical Slack Limit \u2713 \u2713 Currency Code \u2713 \u2713 Currency Digits \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Currency Symbol \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Currency Symbol Position \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Current Date \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Custom Properties \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Date Format \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Date Order \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Date Separator \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Days per Month \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Decimal Separator \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Default Calendar Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Default Duration Is Fixed \u2713 Default End Time \u2713 \u2713 \u2713 \u2713 Default Overtime Rate \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Default Standard Rate \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Default Start Time \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Default Work Units \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Document Version \u2713 Duration \u2713 \u2713 Earned Value Method \u2713 Editable Actual Costs \u2713 \u2713 Editing Time \u2713 Export Flag \u2713 \u2713 Extended Creation Date \u2713 File Application \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 File Type \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Finish Date \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Fiscal Year Start \u2713 Fiscal Year Start Month \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Full Application Name \u2713 GUID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Honor Constraints \u2713 \u2713 \u2713 Hyperlink Base \u2713 Inserted Projects Like Summary \u2713 Keywords \u2713 \u2713 \u2713 Language \u2713 Last Author \u2713 Last Printed \u2713 Last Saved \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Location Unique ID \u2713 MPP File Type \u2713 MPX Code Page \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 MPX Delimiter \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 MPX File Version \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 MPX Program Name \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Manager \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Microsoft Project Server URL \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Minutes per Day \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Minutes per Month \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Minutes per Week \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Minutes per Year \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Multiple Critical Paths \u2713 \u2713 Must Finish By \u2713 \u2713 Name \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 New Task Start Is Project Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 New Tasks Are Effort Driven \u2713 \u2713 New Tasks Are Manual \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 New Tasks Estimated \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 PM Text \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Percentage Complete \u2713 Planned Start \u2713 \u2713 \u2713 Presentation Format \u2713 Project Externally Edited \u2713 Project File Path \u2713 Project ID \u2713 \u2713 \u2713 Project Title \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Relationship Lag Calendar \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Resource Pool File \u2713 Revision \u2713 \u2713 Schedule From \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Scheduled Finish \u2713 \u2713 \u2713 Short Application Name \u2713 Show Project Summary Task \u2713 Split In Progress Tasks \u2713 \u2713 \u2713 \u2713 Start Date \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Start Variance \u2713 Status Date \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Subject \u2713 \u2713 \u2713 \u2713 Template \u2713 Thousands Separator \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Time Format \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Time Separator \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Total Slack Calculation Type \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Unique ID \u2713 \u2713 \u2713 Updating Task Status Updates Resource Status \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Week Start Day \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Work \u2713 Work 2 \u2713"},{"location":"field-guide/#baseline-fields","title":"Baseline Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Baseline1 Date \u2713 Baseline2 Date \u2713 Baseline3 Date \u2713 Baseline4 Date \u2713 Baseline5 Date \u2713 Baseline6 Date \u2713 Baseline7 Date \u2713 Baseline8 Date \u2713 Baseline9 Date \u2713 Baseline10 Date \u2713 Baseline Cost \u2713 Baseline Date \u2713 Baseline Duration \u2713 Baseline Finish \u2713 Baseline Project Unique ID \u2713 \u2713 \u2713 Baseline Start \u2713 Baseline Work \u2713"},{"location":"field-guide/#task","title":"Task","text":""},{"location":"field-guide/#core-fields_1","title":"Core Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) % Complete \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 % Work Complete \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 ACWP \u2713 \u2713 Active \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Activity Codes \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Activity ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Activity Status \u2713 \u2713 \u2713 Activity Type \u2713 \u2713 \u2713 \u2713 Actual Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Duration \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Duration Units \u2713 \u2713 Actual Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Overtime Cost \u2713 \u2713 \u2713 Actual Overtime Work \u2713 \u2713 \u2713 Actual Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Work Protected \u2713 Bar Name \u2713 Bid Item \u2713 Board Status ID \u2713 Budget Cost \u2713 Budget Work \u2713 CV \u2713 Calendar Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Category of Work \u2713 Complete Through \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Constraint Date \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Constraint Type \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Contact \u2713 \u2713 \u2713 \u2713 Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Cost Variance \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Created \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Critical \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Deadline \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Department \u2713 Duration \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Duration Units \u2713 Duration Variance \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Early Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Early Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Earned Value Method \u2713 Effort Driven \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Estimated \u2713 \u2713 \u2713 \u2713 Expanded \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Expected Finish \u2713 \u2713 Expense Items \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 External Early Start \u2713 \u2713 External Late Finish \u2713 \u2713 External Project \u2713 \u2713 External Task \u2713 \u2713 Feature of Work \u2713 Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Finish Slack \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Finish Variance \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Fixed Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Fixed Cost Accrual \u2713 \u2713 \u2713 Free Slack \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 GUID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Hammock Code \u2713 Hide Bar \u2713 \u2713 \u2713 Hyperlink \u2713 \u2713 \u2713 \u2713 Hyperlink Address \u2713 \u2713 Hyperlink Data \u2713 Hyperlink Screen Tip \u2713 Hyperlink SubAddress \u2713 ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Ignore Resource Calendar \u2713 \u2713 \u2713 \u2713 \u2713 Late Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Late Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Level Assignments \u2713 \u2713 \u2713 Leveling Can Split \u2713 \u2713 \u2713 Leveling Delay \u2713 \u2713 \u2713 Leveling Delay Units \u2713 \u2713 \u2713 Longest Path \u2713 \u2713 Mail \u2713 Manager \u2713 Manual Duration \u2713 \u2713 Manual Duration Units \u2713 Marked \u2713 \u2713 Milestone \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Notes \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Null \u2713 \u2713 \u2713 Outline Level \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Outline Number \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Overall Percent Complete \u2713 Overallocated \u2713 Overtime Cost \u2713 \u2713 \u2713 Overtime Work \u2713 Parent Task Unique ID \u2713 Percent Complete Type \u2713 \u2713 \u2713 Phase of Work \u2713 Physical % Complete \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Planned Cost \u2713 \u2713 \u2713 Planned Duration \u2713 \u2713 \u2713 Planned Finish \u2713 \u2713 \u2713 Planned Start \u2713 \u2713 \u2713 Planned Work \u2713 \u2713 \u2713 Predecessors \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Preleveled Finish \u2713 \u2713 \u2713 Preleveled Start \u2713 \u2713 \u2713 Primary Resource Unique ID \u2713 \u2713 \u2713 Priority \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Project \u2713 \u2713 \u2713 \u2713 \u2713 Recalc Outline Codes \u2713 Recurring \u2713 \u2713 \u2713 Recurring Data \u2713 Regular Work \u2713 \u2713 Remaining Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Remaining Duration \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Remaining Early Finish \u2713 \u2713 \u2713 Remaining Early Start \u2713 \u2713 \u2713 Remaining Late Finish \u2713 \u2713 \u2713 Remaining Late Start \u2713 \u2713 \u2713 Remaining Overtime Cost \u2713 \u2713 \u2713 Remaining Overtime Work \u2713 \u2713 \u2713 Remaining Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Resource Names \u2713 \u2713 Responsibility Code \u2713 Resume \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Resume No Earlier Than \u2713 Resume Valid \u2713 Rollup \u2713 \u2713 \u2713 \u2713 Scheduled Duration \u2713 Scheduled Finish \u2713 Scheduled Start \u2713 Secondary Constraint Date \u2713 Secondary Constraint Type \u2713 Section \u2713 Sequence Number \u2713 \u2713 \u2713 Splits \u2713 \u2713 Sprint ID \u2713 Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Start Slack \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Start Variance \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Steps \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Stop \u2713 \u2713 \u2713 \u2713 Subproject File \u2713 \u2713 \u2713 Subproject GUID \u2713 Subproject Task ID \u2713 \u2713 Subproject Task Unique ID \u2713 Subproject Tasks Unique ID Offset \u2713 Successors \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Summary \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Summary Progress \u2713 Suspend Date \u2713 Task Calendar GUID \u2713 Task Mode \u2713 \u2713 Task Name \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Total Slack \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Type \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Unique ID Successors \u2713 WBS \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Work Variance \u2713 \u2713 \u2713 \u2713 \u2713 \u2713"},{"location":"field-guide/#baseline-fields_1","title":"Baseline Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Baseline1 Cost \u2713 \u2713 \u2713 Baseline1 Duration \u2713 \u2713 \u2713 \u2713 Baseline1 Duration Units \u2713 Baseline1 Estimated Duration \u2713 Baseline1 Estimated Finish \u2713 Baseline1 Estimated Start \u2713 Baseline1 Finish \u2713 \u2713 \u2713 \u2713 Baseline1 Fixed Cost \u2713 Baseline1 Fixed Cost Accrual \u2713 Baseline1 Start \u2713 \u2713 \u2713 \u2713 Baseline1 Work \u2713 \u2713 \u2713 \u2713 Baseline2 Cost \u2713 \u2713 \u2713 Baseline2 Duration \u2713 \u2713 \u2713 Baseline2 Duration Units \u2713 Baseline2 Estimated Duration \u2713 Baseline2 Estimated Finish \u2713 Baseline2 Estimated Start \u2713 Baseline2 Finish \u2713 \u2713 \u2713 Baseline2 Fixed Cost \u2713 Baseline2 Fixed Cost Accrual \u2713 Baseline2 Start \u2713 \u2713 \u2713 Baseline2 Work \u2713 \u2713 \u2713 Baseline3 Cost \u2713 \u2713 \u2713 Baseline3 Duration \u2713 \u2713 \u2713 Baseline3 Duration Units \u2713 Baseline3 Estimated Duration \u2713 Baseline3 Estimated Finish \u2713 Baseline3 Estimated Start \u2713 Baseline3 Finish \u2713 \u2713 \u2713 Baseline3 Fixed Cost \u2713 Baseline3 Fixed Cost Accrual \u2713 Baseline3 Start \u2713 \u2713 \u2713 Baseline3 Work \u2713 \u2713 \u2713 Baseline4 Cost \u2713 \u2713 \u2713 Baseline4 Duration \u2713 \u2713 \u2713 Baseline4 Duration Units \u2713 Baseline4 Estimated Duration \u2713 Baseline4 Estimated Finish \u2713 Baseline4 Estimated Start \u2713 Baseline4 Finish \u2713 \u2713 \u2713 Baseline4 Fixed Cost \u2713 Baseline4 Fixed Cost Accrual \u2713 Baseline4 Start \u2713 \u2713 \u2713 Baseline4 Work \u2713 \u2713 \u2713 Baseline5 Cost \u2713 \u2713 \u2713 Baseline5 Duration \u2713 \u2713 \u2713 Baseline5 Duration Units \u2713 Baseline5 Estimated Duration \u2713 Baseline5 Estimated Finish \u2713 Baseline5 Estimated Start \u2713 Baseline5 Finish \u2713 \u2713 \u2713 Baseline5 Fixed Cost \u2713 Baseline5 Fixed Cost Accrual \u2713 Baseline5 Start \u2713 \u2713 \u2713 Baseline5 Work \u2713 \u2713 \u2713 Baseline6 Cost \u2713 \u2713 \u2713 Baseline6 Duration \u2713 \u2713 \u2713 Baseline6 Duration Units \u2713 Baseline6 Estimated Duration \u2713 Baseline6 Estimated Finish \u2713 Baseline6 Estimated Start \u2713 Baseline6 Finish \u2713 \u2713 \u2713 Baseline6 Fixed Cost \u2713 Baseline6 Fixed Cost Accrual \u2713 Baseline6 Start \u2713 \u2713 \u2713 Baseline6 Work \u2713 \u2713 \u2713 Baseline7 Cost \u2713 \u2713 \u2713 Baseline7 Duration \u2713 \u2713 \u2713 Baseline7 Duration Units \u2713 Baseline7 Estimated Duration \u2713 Baseline7 Estimated Finish \u2713 Baseline7 Estimated Start \u2713 Baseline7 Finish \u2713 \u2713 \u2713 Baseline7 Fixed Cost \u2713 Baseline7 Fixed Cost Accrual \u2713 Baseline7 Start \u2713 \u2713 \u2713 Baseline7 Work \u2713 \u2713 \u2713 Baseline8 Cost \u2713 \u2713 \u2713 Baseline8 Duration \u2713 \u2713 \u2713 Baseline8 Duration Units \u2713 Baseline8 Estimated Duration \u2713 Baseline8 Estimated Finish \u2713 Baseline8 Estimated Start \u2713 Baseline8 Finish \u2713 \u2713 \u2713 Baseline8 Fixed Cost \u2713 Baseline8 Fixed Cost Accrual \u2713 Baseline8 Start \u2713 \u2713 \u2713 Baseline8 Work \u2713 \u2713 \u2713 Baseline9 Cost \u2713 \u2713 \u2713 Baseline9 Duration \u2713 \u2713 \u2713 Baseline9 Duration Units \u2713 Baseline9 Estimated Duration \u2713 Baseline9 Estimated Finish \u2713 Baseline9 Estimated Start \u2713 Baseline9 Finish \u2713 \u2713 \u2713 Baseline9 Fixed Cost \u2713 Baseline9 Fixed Cost Accrual \u2713 Baseline9 Start \u2713 \u2713 \u2713 Baseline9 Work \u2713 \u2713 \u2713 Baseline10 Cost \u2713 \u2713 \u2713 \u2713 Baseline10 Deliverable Finish \u2713 Baseline10 Duration \u2713 \u2713 \u2713 \u2713 Baseline10 Duration Units \u2713 Baseline10 Estimated Duration \u2713 Baseline10 Estimated Finish \u2713 Baseline10 Estimated Start \u2713 Baseline10 Finish \u2713 \u2713 \u2713 \u2713 Baseline10 Fixed Cost \u2713 Baseline10 Fixed Cost Accrual \u2713 Baseline10 Start \u2713 \u2713 \u2713 \u2713 Baseline10 Work \u2713 \u2713 \u2713 \u2713 Baseline Budget Cost \u2713 Baseline Budget Work \u2713 Baseline Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Baseline Deliverable Finish \u2713 Baseline Deliverable Start \u2713 Baseline Duration \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Baseline Duration Units \u2713 Baseline Estimated Duration \u2713 Baseline Estimated Finish \u2713 Baseline Estimated Start \u2713 Baseline Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Baseline Fixed Cost \u2713 \u2713 \u2713 Baseline Fixed Cost Accrual \u2713 Baseline Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Baseline Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713"},{"location":"field-guide/#custom-fields","title":"Custom Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Cost1 \u2713 \u2713 \u2713 \u2713 \u2713 Cost2 \u2713 \u2713 \u2713 \u2713 \u2713 Cost3 \u2713 \u2713 \u2713 \u2713 Cost4 \u2713 \u2713 \u2713 Cost5 \u2713 \u2713 \u2713 Cost6 \u2713 \u2713 \u2713 Cost7 \u2713 \u2713 \u2713 Cost8 \u2713 \u2713 \u2713 Cost9 \u2713 \u2713 \u2713 Cost10 \u2713 \u2713 \u2713 Date1 \u2713 \u2713 \u2713 Date2 \u2713 \u2713 \u2713 Date3 \u2713 \u2713 \u2713 Date4 \u2713 \u2713 \u2713 Date5 \u2713 \u2713 \u2713 Date6 \u2713 \u2713 \u2713 Date7 \u2713 \u2713 \u2713 Date8 \u2713 \u2713 \u2713 Date9 \u2713 \u2713 \u2713 Date10 \u2713 \u2713 \u2713 Duration1 \u2713 \u2713 \u2713 \u2713 Duration1 Units \u2713 Duration2 \u2713 \u2713 \u2713 \u2713 Duration2 Units \u2713 Duration3 \u2713 \u2713 \u2713 \u2713 Duration3 Units \u2713 Duration4 \u2713 \u2713 \u2713 Duration4 Units \u2713 Duration5 \u2713 \u2713 \u2713 Duration5 Units \u2713 Duration6 \u2713 \u2713 \u2713 Duration6 Units \u2713 Duration7 \u2713 \u2713 \u2713 Duration7 Units \u2713 Duration8 \u2713 \u2713 \u2713 Duration8 Units \u2713 Duration9 \u2713 \u2713 \u2713 Duration9 Units \u2713 Duration10 \u2713 \u2713 \u2713 Duration10 Units \u2713 Finish1 \u2713 \u2713 \u2713 \u2713 Finish2 \u2713 \u2713 \u2713 \u2713 Finish3 \u2713 \u2713 \u2713 \u2713 Finish4 \u2713 \u2713 \u2713 \u2713 Finish5 \u2713 \u2713 \u2713 \u2713 Finish6 \u2713 \u2713 \u2713 Finish7 \u2713 \u2713 \u2713 Finish8 \u2713 \u2713 \u2713 Finish9 \u2713 \u2713 \u2713 Finish10 \u2713 \u2713 \u2713 Flag1 \u2713 \u2713 \u2713 \u2713 \u2713 Flag2 \u2713 \u2713 \u2713 \u2713 \u2713 Flag3 \u2713 \u2713 \u2713 \u2713 \u2713 Flag4 \u2713 \u2713 \u2713 \u2713 \u2713 Flag5 \u2713 \u2713 \u2713 \u2713 \u2713 Flag6 \u2713 \u2713 \u2713 \u2713 \u2713 Flag7 \u2713 \u2713 \u2713 \u2713 \u2713 Flag8 \u2713 \u2713 \u2713 \u2713 \u2713 Flag9 \u2713 \u2713 \u2713 \u2713 \u2713 Flag10 \u2713 \u2713 \u2713 \u2713 \u2713 Flag11 \u2713 \u2713 \u2713 \u2713 Flag12 \u2713 \u2713 \u2713 \u2713 Flag13 \u2713 \u2713 \u2713 \u2713 Flag14 \u2713 \u2713 \u2713 \u2713 Flag15 \u2713 \u2713 \u2713 \u2713 Flag16 \u2713 \u2713 \u2713 \u2713 Flag17 \u2713 \u2713 \u2713 \u2713 Flag18 \u2713 \u2713 \u2713 \u2713 Flag19 \u2713 \u2713 \u2713 \u2713 Flag20 \u2713 \u2713 \u2713 \u2713 Number1 \u2713 \u2713 \u2713 \u2713 \u2713 Number2 \u2713 \u2713 \u2713 \u2713 \u2713 Number3 \u2713 \u2713 \u2713 \u2713 \u2713 Number4 \u2713 \u2713 \u2713 \u2713 \u2713 Number5 \u2713 \u2713 \u2713 \u2713 \u2713 Number6 \u2713 \u2713 \u2713 \u2713 Number7 \u2713 \u2713 \u2713 Number8 \u2713 \u2713 \u2713 Number9 \u2713 \u2713 \u2713 Number10 \u2713 \u2713 \u2713 \u2713 Number11 \u2713 \u2713 \u2713 Number12 \u2713 \u2713 \u2713 Number13 \u2713 \u2713 \u2713 Number14 \u2713 \u2713 \u2713 Number15 \u2713 \u2713 \u2713 Number16 \u2713 \u2713 \u2713 Number17 \u2713 \u2713 \u2713 Number18 \u2713 \u2713 \u2713 Number19 \u2713 \u2713 \u2713 Number20 \u2713 \u2713 \u2713 Outline Code1 \u2713 \u2713 \u2713 Outline Code1 Index \u2713 Outline Code2 \u2713 \u2713 \u2713 Outline Code2 Index \u2713 Outline Code3 \u2713 \u2713 \u2713 Outline Code3 Index \u2713 Outline Code4 \u2713 \u2713 \u2713 Outline Code4 Index \u2713 Outline Code5 \u2713 \u2713 \u2713 Outline Code5 Index \u2713 Outline Code6 \u2713 \u2713 \u2713 Outline Code6 Index \u2713 Outline Code7 \u2713 \u2713 \u2713 Outline Code7 Index \u2713 Outline Code8 \u2713 \u2713 Outline Code8 Index \u2713 Outline Code9 \u2713 \u2713 Outline Code9 Index \u2713 Outline Code10 \u2713 \u2713 Outline Code10 Index \u2713 Start1 \u2713 \u2713 \u2713 \u2713 Start2 \u2713 \u2713 \u2713 \u2713 Start3 \u2713 \u2713 \u2713 \u2713 Start4 \u2713 \u2713 \u2713 \u2713 Start5 \u2713 \u2713 \u2713 \u2713 Start6 \u2713 \u2713 \u2713 Start7 \u2713 \u2713 \u2713 Start8 \u2713 \u2713 \u2713 Start9 \u2713 \u2713 \u2713 Start10 \u2713 \u2713 \u2713 Text1 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Text2 \u2713 \u2713 \u2713 \u2713 \u2713 Text3 \u2713 \u2713 \u2713 \u2713 \u2713 Text4 \u2713 \u2713 \u2713 \u2713 \u2713 Text5 \u2713 \u2713 \u2713 \u2713 \u2713 Text6 \u2713 \u2713 \u2713 \u2713 \u2713 Text7 \u2713 \u2713 \u2713 \u2713 \u2713 Text8 \u2713 \u2713 \u2713 \u2713 \u2713 Text9 \u2713 \u2713 \u2713 \u2713 \u2713 Text10 \u2713 \u2713 \u2713 \u2713 Text11 \u2713 \u2713 \u2713 Text12 \u2713 \u2713 \u2713 Text13 \u2713 \u2713 \u2713 Text14 \u2713 \u2713 \u2713 Text15 \u2713 \u2713 \u2713 Text16 \u2713 \u2713 \u2713 Text17 \u2713 \u2713 \u2713 Text18 \u2713 \u2713 \u2713 Text19 \u2713 \u2713 \u2713 Text20 \u2713 \u2713 \u2713 Text21 \u2713 \u2713 \u2713 Text22 \u2713 \u2713 \u2713 Text23 \u2713 \u2713 \u2713 Text24 \u2713 \u2713 \u2713 Text25 \u2713 \u2713 \u2713 Text26 \u2713 \u2713 \u2713 Text27 \u2713 \u2713 \u2713 Text28 \u2713 \u2713 \u2713 Text29 \u2713 \u2713 \u2713 Text30 \u2713 \u2713 \u2713"},{"location":"field-guide/#enterprise-fields","title":"Enterprise Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Enterprise Data \u2713 Enterprise Duration1 Units \u2713 Enterprise Duration2 Units \u2713 Enterprise Duration3 Units \u2713 Enterprise Duration4 Units \u2713 Enterprise Duration5 Units \u2713 Enterprise Duration6 Units \u2713 Enterprise Duration7 Units \u2713 Enterprise Duration8 Units \u2713 Enterprise Duration9 Units \u2713 Enterprise Duration10 Units \u2713 Enterprise Project Date1 \u2713 Enterprise Project Date2 \u2713 Enterprise Project Date3 \u2713 Enterprise Project Date4 \u2713 Enterprise Project Number2 \u2713 Enterprise Project Number4 \u2713 Enterprise Project Number5 \u2713 Enterprise Project Number22 \u2713 Enterprise Project Text1 \u2713 \u2713 Enterprise Project Text2 \u2713 Enterprise Project Text3 \u2713 Enterprise Project Text4 \u2713 Enterprise Project Text5 \u2713 Enterprise Project Text6 \u2713 Enterprise Project Text8 \u2713 Enterprise Project Text9 \u2713 Enterprise Project Text10 \u2713 Enterprise Project Text11 \u2713 Enterprise Project Text12 \u2713 Enterprise Project Text13 \u2713 Enterprise Project Text14 \u2713 Enterprise Project Text15 \u2713 Enterprise Project Text16 \u2713 Enterprise Project Text17 \u2713 Enterprise Project Text18 \u2713 Enterprise Project Text19 \u2713 Enterprise Project Text21 \u2713 Enterprise Project Text40 \u2713 \u2713"},{"location":"field-guide/#resource","title":"Resource","text":""},{"location":"field-guide/#core-fields_2","title":"Core Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) % Work Complete \u2713 ACWP \u2713 \u2713 Accrue At \u2713 \u2713 \u2713 \u2713 \u2713 Active \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Cost \u2713 \u2713 \u2713 \u2713 Actual Overtime Cost \u2713 \u2713 \u2713 Actual Overtime Work \u2713 \u2713 \u2713 Actual Work \u2713 \u2713 \u2713 \u2713 Actual Work Protected \u2713 Availability Data \u2713 Available From \u2713 \u2713 Available To \u2713 \u2713 BCWS \u2713 Base Calendar \u2713 Booking Type \u2713 \u2713 Budget \u2713 \u2713 Budget Cost \u2713 Budget Work \u2713 CV \u2713 Calculate Costs From Units \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Calendar GUID \u2713 Calendar Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Can Level \u2713 \u2713 Code \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Cost \u2713 \u2713 \u2713 \u2713 Cost Center \u2713 \u2713 Cost Per Use \u2713 Cost Rate A \u2713 Cost Rate B \u2713 Cost Rate C \u2713 Cost Rate D \u2713 Cost Rate E \u2713 Cost Variance \u2713 \u2713 \u2713 \u2713 Created \u2713 \u2713 \u2713 Description \u2713 Email Address \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 GUID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Generic \u2713 \u2713 Group \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Hyperlink \u2713 \u2713 Hyperlink Address \u2713 Hyperlink Data \u2713 Hyperlink Screen Tip \u2713 Hyperlink SubAddress \u2713 ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Initials \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Material Label \u2713 \u2713 \u2713 \u2713 \u2713 Max Units \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Name \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Notes \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Overallocated \u2713 \u2713 \u2713 \u2713 \u2713 Overtime Cost \u2713 \u2713 \u2713 Overtime Rate \u2713 Overtime Rate Units \u2713 Overtime Work \u2713 \u2713 \u2713 Parent ID \u2713 \u2713 \u2713 \u2713 Peak \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Per Day \u2713 Phone \u2713 Phonetics \u2713 Pool \u2713 Rate \u2713 Regular Work \u2713 \u2713 \u2713 Remaining Cost \u2713 \u2713 \u2713 \u2713 Remaining Overtime Cost \u2713 \u2713 \u2713 Remaining Overtime Work \u2713 \u2713 \u2713 Remaining Work \u2713 \u2713 \u2713 \u2713 Resource ID \u2713 \u2713 \u2713 Role \u2713 \u2713 \u2713 SV \u2713 Sequence Number \u2713 \u2713 \u2713 Standard Rate \u2713 Standard Rate Units \u2713 Subproject Unique Resource ID \u2713 Supply Reference \u2713 Type \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Unit \u2713 Windows User Account \u2713 Work \u2713 \u2713 \u2713 \u2713 Work Variance \u2713 \u2713 \u2713 \u2713 Workgroup \u2713 \u2713 \u2713"},{"location":"field-guide/#baseline-fields_2","title":"Baseline Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Baseline1 Budget Cost \u2713 Baseline1 Budget Work \u2713 Baseline1 Cost \u2713 \u2713 Baseline1 Work \u2713 \u2713 Baseline2 Budget Cost \u2713 Baseline2 Budget Work \u2713 Baseline2 Cost \u2713 \u2713 Baseline2 Work \u2713 \u2713 Baseline3 Budget Cost \u2713 Baseline3 Budget Work \u2713 Baseline3 Cost \u2713 \u2713 Baseline3 Work \u2713 \u2713 Baseline4 Budget Cost \u2713 Baseline4 Budget Work \u2713 Baseline4 Cost \u2713 \u2713 Baseline4 Work \u2713 \u2713 Baseline5 Budget Cost \u2713 Baseline5 Budget Work \u2713 Baseline5 Cost \u2713 \u2713 Baseline5 Work \u2713 \u2713 Baseline6 Budget Cost \u2713 Baseline6 Budget Work \u2713 Baseline6 Cost \u2713 \u2713 Baseline6 Work \u2713 \u2713 Baseline7 Budget Cost \u2713 Baseline7 Budget Work \u2713 Baseline7 Cost \u2713 \u2713 Baseline7 Work \u2713 \u2713 Baseline8 Budget Cost \u2713 Baseline8 Budget Work \u2713 Baseline8 Cost \u2713 \u2713 Baseline8 Work \u2713 \u2713 Baseline9 Budget Cost \u2713 Baseline9 Budget Work \u2713 Baseline9 Cost \u2713 \u2713 Baseline9 Work \u2713 \u2713 Baseline10 Budget Cost \u2713 Baseline10 Budget Work \u2713 Baseline10 Cost \u2713 \u2713 Baseline10 Work \u2713 \u2713 Baseline Budget Cost \u2713 Baseline Budget Work \u2713 Baseline Cost \u2713 \u2713 \u2713 Baseline Work \u2713 \u2713 \u2713 \u2713"},{"location":"field-guide/#custom-fields_1","title":"Custom Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Cost1 \u2713 \u2713 \u2713 Cost2 \u2713 \u2713 \u2713 Cost3 \u2713 \u2713 \u2713 Cost4 \u2713 \u2713 \u2713 Cost5 \u2713 \u2713 \u2713 Cost6 \u2713 \u2713 \u2713 Cost7 \u2713 \u2713 \u2713 Cost8 \u2713 \u2713 \u2713 Cost9 \u2713 \u2713 \u2713 Cost10 \u2713 \u2713 \u2713 Date1 \u2713 \u2713 \u2713 Date2 \u2713 \u2713 \u2713 Date3 \u2713 \u2713 \u2713 Date4 \u2713 \u2713 \u2713 Date5 \u2713 \u2713 \u2713 Date6 \u2713 \u2713 \u2713 Date7 \u2713 \u2713 \u2713 Date8 \u2713 \u2713 \u2713 Date9 \u2713 \u2713 \u2713 Date10 \u2713 \u2713 \u2713 Duration1 \u2713 \u2713 \u2713 Duration1 Units \u2713 Duration2 \u2713 \u2713 \u2713 Duration2 Units \u2713 Duration3 \u2713 \u2713 \u2713 Duration3 Units \u2713 Duration4 \u2713 \u2713 \u2713 Duration4 Units \u2713 Duration5 \u2713 \u2713 \u2713 Duration5 Units \u2713 Duration6 \u2713 \u2713 \u2713 Duration6 Units \u2713 Duration7 \u2713 \u2713 \u2713 Duration7 Units \u2713 Duration8 \u2713 \u2713 \u2713 Duration8 Units \u2713 Duration9 \u2713 \u2713 \u2713 Duration9 Units \u2713 Duration10 \u2713 \u2713 \u2713 Duration10 Units \u2713 Finish1 \u2713 \u2713 \u2713 Finish2 \u2713 \u2713 \u2713 Finish3 \u2713 \u2713 \u2713 Finish4 \u2713 \u2713 \u2713 Finish5 \u2713 \u2713 \u2713 Finish6 \u2713 \u2713 \u2713 Finish7 \u2713 \u2713 \u2713 Finish8 \u2713 \u2713 \u2713 Finish9 \u2713 \u2713 \u2713 Finish10 \u2713 \u2713 \u2713 Flag1 \u2713 \u2713 \u2713 \u2713 Flag2 \u2713 \u2713 \u2713 \u2713 Flag3 \u2713 \u2713 \u2713 \u2713 Flag4 \u2713 \u2713 \u2713 \u2713 Flag5 \u2713 \u2713 \u2713 \u2713 Flag6 \u2713 \u2713 \u2713 \u2713 Flag7 \u2713 \u2713 \u2713 \u2713 Flag8 \u2713 \u2713 \u2713 \u2713 Flag9 \u2713 \u2713 \u2713 \u2713 Flag10 \u2713 \u2713 \u2713 \u2713 Flag11 \u2713 \u2713 \u2713 \u2713 Flag12 \u2713 \u2713 \u2713 \u2713 Flag13 \u2713 \u2713 \u2713 \u2713 Flag14 \u2713 \u2713 \u2713 \u2713 Flag15 \u2713 \u2713 \u2713 \u2713 Flag16 \u2713 \u2713 \u2713 \u2713 Flag17 \u2713 \u2713 \u2713 \u2713 Flag18 \u2713 \u2713 \u2713 \u2713 Flag19 \u2713 \u2713 \u2713 \u2713 Flag20 \u2713 \u2713 \u2713 \u2713 Number1 \u2713 \u2713 \u2713 Number2 \u2713 \u2713 \u2713 Number3 \u2713 \u2713 \u2713 Number4 \u2713 \u2713 \u2713 Number5 \u2713 \u2713 \u2713 Number6 \u2713 \u2713 \u2713 Number7 \u2713 \u2713 \u2713 Number8 \u2713 \u2713 \u2713 Number9 \u2713 \u2713 \u2713 Number10 \u2713 \u2713 \u2713 Number11 \u2713 \u2713 \u2713 Number12 \u2713 \u2713 \u2713 Number13 \u2713 \u2713 \u2713 Number14 \u2713 \u2713 \u2713 Number15 \u2713 \u2713 \u2713 Number16 \u2713 \u2713 \u2713 Number17 \u2713 \u2713 \u2713 Number18 \u2713 \u2713 \u2713 Number19 \u2713 \u2713 \u2713 Number20 \u2713 \u2713 \u2713 Outline Code1 \u2713 \u2713 \u2713 Outline Code1 Index \u2713 Outline Code2 \u2713 \u2713 \u2713 Outline Code2 Index \u2713 Outline Code3 \u2713 \u2713 \u2713 Outline Code3 Index \u2713 Outline Code4 \u2713 \u2713 \u2713 Outline Code4 Index \u2713 Outline Code5 \u2713 \u2713 \u2713 Outline Code5 Index \u2713 Outline Code6 \u2713 \u2713 \u2713 Outline Code6 Index \u2713 Outline Code7 \u2713 \u2713 \u2713 Outline Code7 Index \u2713 Outline Code8 \u2713 \u2713 \u2713 Outline Code8 Index \u2713 Outline Code9 \u2713 \u2713 \u2713 Outline Code9 Index \u2713 Outline Code10 \u2713 \u2713 \u2713 Outline Code10 Index \u2713 Start1 \u2713 \u2713 \u2713 Start2 \u2713 \u2713 \u2713 Start3 \u2713 \u2713 \u2713 Start4 \u2713 \u2713 \u2713 Start5 \u2713 \u2713 \u2713 Start6 \u2713 \u2713 \u2713 Start7 \u2713 \u2713 \u2713 Start8 \u2713 \u2713 \u2713 Start9 \u2713 \u2713 \u2713 Start10 \u2713 \u2713 \u2713 Text1 \u2713 \u2713 \u2713 \u2713 \u2713 Text2 \u2713 \u2713 \u2713 \u2713 Text3 \u2713 \u2713 \u2713 \u2713 Text4 \u2713 \u2713 \u2713 \u2713 Text5 \u2713 \u2713 \u2713 Text6 \u2713 \u2713 \u2713 Text7 \u2713 \u2713 \u2713 Text8 \u2713 \u2713 \u2713 Text9 \u2713 \u2713 \u2713 Text10 \u2713 \u2713 \u2713 Text11 \u2713 \u2713 \u2713 Text12 \u2713 \u2713 \u2713 Text13 \u2713 \u2713 \u2713 Text14 \u2713 \u2713 \u2713 Text15 \u2713 \u2713 \u2713 Text16 \u2713 \u2713 \u2713 Text17 \u2713 \u2713 \u2713 Text18 \u2713 \u2713 \u2713 Text19 \u2713 \u2713 \u2713 Text20 \u2713 \u2713 \u2713 Text21 \u2713 \u2713 \u2713 Text22 \u2713 \u2713 \u2713 Text23 \u2713 \u2713 \u2713 Text24 \u2713 \u2713 \u2713 Text25 \u2713 \u2713 \u2713 Text26 \u2713 \u2713 \u2713 Text27 \u2713 \u2713 \u2713 Text28 \u2713 \u2713 \u2713 Text29 \u2713 \u2713 \u2713 Text30 \u2713 \u2713 \u2713"},{"location":"field-guide/#enterprise-fields_1","title":"Enterprise Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Enterprise \u2713 \u2713 Enterprise Data \u2713 Enterprise Duration1 Units \u2713 Enterprise Duration2 Units \u2713 Enterprise Duration3 Units \u2713 Enterprise Duration4 Units \u2713 Enterprise Duration5 Units \u2713 Enterprise Duration6 Units \u2713 Enterprise Duration7 Units \u2713 Enterprise Duration8 Units \u2713 Enterprise Duration9 Units \u2713 Enterprise Duration10 Units \u2713 Enterprise Unique ID \u2713"},{"location":"field-guide/#resource-assignment","title":"Resource Assignment","text":""},{"location":"field-guide/#core-fields_3","title":"Core Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) ACWP \u2713 \u2713 Actual Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Overtime Cost \u2713 \u2713 \u2713 Actual Overtime Work \u2713 \u2713 \u2713 Actual Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Actual Work Protected \u2713 Assignment Delay \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Assignment GUID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Assignment Resource GUID \u2713 Assignment Task GUID \u2713 Assignment Units \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 BCWS \u2713 Budget Cost \u2713 \u2713 Budget Work \u2713 \u2713 CV \u2713 Calculate Costs From Units \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Confirmed \u2713 Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Cost Account ID \u2713 \u2713 \u2713 Cost Rate Table \u2713 \u2713 \u2713 Cost Variance \u2713 \u2713 \u2713 Created \u2713 \u2713 Finish \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Finish Variance \u2713 \u2713 \u2713 Hyperlink \u2713 \u2713 \u2713 Hyperlink Address \u2713 \u2713 \u2713 Hyperlink Data \u2713 Hyperlink Screen Tip \u2713 Hyperlink Subaddress \u2713 \u2713 \u2713 Leveling Delay \u2713 Leveling Delay Units \u2713 Linked Fields \u2713 Notes \u2713 \u2713 \u2713 Override Rate \u2713 \u2713 \u2713 Overtime Work \u2713 \u2713 \u2713 Owner \u2713 Percent Work Complete \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Planned Cost \u2713 \u2713 \u2713 Planned Finish \u2713 \u2713 \u2713 Planned Start \u2713 \u2713 \u2713 Planned Work \u2713 \u2713 \u2713 Rate Index \u2713 \u2713 Rate Source \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Regular Work \u2713 \u2713 \u2713 Remaining Cost \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Remaining Overtime Cost \u2713 \u2713 \u2713 Remaining Overtime Work \u2713 \u2713 \u2713 Remaining Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Resource Request Type \u2713 Resource Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Response Pending \u2713 \u2713 Resume \u2713 \u2713 \u2713 Role Unique ID \u2713 \u2713 \u2713 SV \u2713 Start \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Start Variance \u2713 \u2713 \u2713 Stop \u2713 \u2713 \u2713 Task Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Team Status Pending \u2713 \u2713 Timephased Actual Overtime Work \u2713 Timephased Actual Work \u2713 Timephased Work \u2713 Unique ID \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Variable Rate Units \u2713 \u2713 Work \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Work Contour \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Work Variance \u2713 \u2713 \u2713"},{"location":"field-guide/#baseline-fields_3","title":"Baseline Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Baseline1 Budget Cost \u2713 Baseline1 Budget Work \u2713 Baseline1 Cost \u2713 \u2713 \u2713 Baseline1 Finish \u2713 \u2713 \u2713 Baseline1 Start \u2713 \u2713 \u2713 Baseline1 Work \u2713 \u2713 \u2713 Baseline2 Budget Cost \u2713 Baseline2 Budget Work \u2713 Baseline2 Cost \u2713 \u2713 \u2713 Baseline2 Finish \u2713 \u2713 \u2713 Baseline2 Start \u2713 \u2713 \u2713 Baseline2 Work \u2713 \u2713 \u2713 Baseline3 Budget Cost \u2713 Baseline3 Budget Work \u2713 Baseline3 Cost \u2713 \u2713 \u2713 Baseline3 Finish \u2713 \u2713 \u2713 Baseline3 Start \u2713 \u2713 \u2713 Baseline3 Work \u2713 \u2713 \u2713 Baseline4 Budget Cost \u2713 Baseline4 Budget Work \u2713 Baseline4 Cost \u2713 \u2713 \u2713 Baseline4 Finish \u2713 \u2713 \u2713 Baseline4 Start \u2713 \u2713 \u2713 Baseline4 Work \u2713 \u2713 \u2713 Baseline5 Budget Cost \u2713 Baseline5 Budget Work \u2713 Baseline5 Cost \u2713 \u2713 \u2713 Baseline5 Finish \u2713 \u2713 \u2713 Baseline5 Start \u2713 \u2713 \u2713 Baseline5 Work \u2713 \u2713 \u2713 Baseline6 Budget Cost \u2713 Baseline6 Budget Work \u2713 Baseline6 Cost \u2713 \u2713 \u2713 Baseline6 Finish \u2713 \u2713 \u2713 Baseline6 Start \u2713 \u2713 \u2713 Baseline6 Work \u2713 \u2713 \u2713 Baseline7 Budget Cost \u2713 Baseline7 Budget Work \u2713 Baseline7 Cost \u2713 \u2713 \u2713 Baseline7 Finish \u2713 \u2713 \u2713 Baseline7 Start \u2713 \u2713 \u2713 Baseline7 Work \u2713 \u2713 \u2713 Baseline8 Budget Cost \u2713 Baseline8 Budget Work \u2713 Baseline8 Cost \u2713 \u2713 \u2713 Baseline8 Finish \u2713 \u2713 \u2713 Baseline8 Start \u2713 \u2713 \u2713 Baseline8 Work \u2713 \u2713 \u2713 Baseline9 Budget Cost \u2713 Baseline9 Budget Work \u2713 Baseline9 Cost \u2713 \u2713 \u2713 Baseline9 Finish \u2713 \u2713 \u2713 Baseline9 Start \u2713 \u2713 \u2713 Baseline9 Work \u2713 \u2713 \u2713 Baseline10 Budget Cost \u2713 Baseline10 Budget Work \u2713 Baseline10 Cost \u2713 \u2713 \u2713 Baseline10 Finish \u2713 \u2713 \u2713 Baseline10 Start \u2713 \u2713 \u2713 Baseline10 Work \u2713 \u2713 \u2713 Baseline Budget Cost \u2713 Baseline Budget Work \u2713 Baseline Cost \u2713 \u2713 \u2713 \u2713 Baseline Finish \u2713 \u2713 \u2713 Baseline Start \u2713 \u2713 \u2713 Baseline Work \u2713 \u2713 \u2713 \u2713 Timephased Baseline1 Cost \u2713 Timephased Baseline1 Work \u2713 Timephased Baseline2 Cost \u2713 Timephased Baseline2 Work \u2713 Timephased Baseline3 Cost \u2713 Timephased Baseline3 Work \u2713 Timephased Baseline4 Cost \u2713 Timephased Baseline4 Work \u2713 Timephased Baseline5 Cost \u2713 Timephased Baseline5 Work \u2713 Timephased Baseline6 Cost \u2713 Timephased Baseline6 Work \u2713 Timephased Baseline7 Cost \u2713 Timephased Baseline7 Work \u2713 Timephased Baseline8 Cost \u2713 Timephased Baseline8 Work \u2713 Timephased Baseline9 Cost \u2713 Timephased Baseline9 Work \u2713 Timephased Baseline10 Cost \u2713 Timephased Baseline10 Work \u2713 Timephased Baseline Cost \u2713 Timephased Baseline Work \u2713"},{"location":"field-guide/#custom-fields_2","title":"Custom Fields","text":"Field Asta (PP) ConceptDraw PROJECT (CDP) FastTrack (FTS) GanttDesigner (GNT) GanttProject (GAN) Merlin (SQLITE) Microsoft (MPD) Microsoft (MPP) Microsoft (MPX) Microsoft (MSPDI) P3 (BTRIEVE) Phoenix (PPX) Planner (XML) Primavera (PMXML) Primavera (SQLITE) Primavera (XER) Project Commander (PC) ProjectLibre (POD) SDEF (SDEF) Sage (SCHEDULE_GRID) SureTrak (STW) Synchro (SP) TurboProject (PEP) Cost1 \u2713 \u2713 \u2713 Cost2 \u2713 \u2713 \u2713 Cost3 \u2713 \u2713 \u2713 Cost4 \u2713 \u2713 \u2713 Cost5 \u2713 \u2713 \u2713 Cost6 \u2713 \u2713 \u2713 Cost7 \u2713 \u2713 \u2713 Cost8 \u2713 \u2713 \u2713 Cost9 \u2713 \u2713 \u2713 Cost10 \u2713 \u2713 \u2713 Date1 \u2713 \u2713 \u2713 Date2 \u2713 \u2713 \u2713 Date3 \u2713 \u2713 \u2713 Date4 \u2713 \u2713 \u2713 Date5 \u2713 \u2713 \u2713 Date6 \u2713 \u2713 \u2713 Date7 \u2713 \u2713 \u2713 Date8 \u2713 \u2713 \u2713 Date9 \u2713 \u2713 \u2713 Date10 \u2713 \u2713 \u2713 Duration1 \u2713 \u2713 \u2713 Duration1 Units \u2713 Duration2 \u2713 \u2713 \u2713 Duration2 Units \u2713 Duration3 \u2713 \u2713 \u2713 Duration3 Units \u2713 Duration4 \u2713 \u2713 \u2713 Duration4 Units \u2713 Duration5 \u2713 \u2713 \u2713 Duration5 Units \u2713 Duration6 \u2713 \u2713 \u2713 Duration6 Units \u2713 Duration7 \u2713 \u2713 \u2713 Duration7 Units \u2713 Duration8 \u2713 \u2713 \u2713 Duration8 Units \u2713 Duration9 \u2713 \u2713 \u2713 Duration9 Units \u2713 Duration10 \u2713 \u2713 \u2713 Duration10 Units \u2713 Finish1 \u2713 \u2713 \u2713 Finish2 \u2713 \u2713 \u2713 Finish3 \u2713 \u2713 \u2713 Finish4 \u2713 \u2713 \u2713 Finish5 \u2713 \u2713 \u2713 Finish6 \u2713 \u2713 \u2713 Finish7 \u2713 \u2713 \u2713 Finish8 \u2713 \u2713 \u2713 Finish9 \u2713 \u2713 \u2713 Finish10 \u2713 \u2713 \u2713 Flag1 \u2713 \u2713 \u2713 Flag2 \u2713 \u2713 \u2713 Flag3 \u2713 \u2713 \u2713 Flag4 \u2713 \u2713 \u2713 Flag5 \u2713 \u2713 \u2713 Flag6 \u2713 \u2713 \u2713 Flag7 \u2713 \u2713 \u2713 Flag8 \u2713 \u2713 \u2713 Flag9 \u2713 \u2713 \u2713 Flag10 \u2713 \u2713 \u2713 Flag11 \u2713 \u2713 \u2713 Flag12 \u2713 \u2713 \u2713 Flag13 \u2713 \u2713 \u2713 Flag14 \u2713 \u2713 \u2713 Flag15 \u2713 \u2713 \u2713 Flag16 \u2713 \u2713 \u2713 Flag17 \u2713 \u2713 \u2713 Flag18 \u2713 \u2713 \u2713 Flag19 \u2713 \u2713 \u2713 Flag20 \u2713 \u2713 \u2713 Number1 \u2713 \u2713 \u2713 Number2 \u2713 \u2713 \u2713 Number3 \u2713 \u2713 \u2713 Number4 \u2713 \u2713 \u2713 Number5 \u2713 \u2713 \u2713 Number6 \u2713 \u2713 \u2713 Number7 \u2713 \u2713 \u2713 Number8 \u2713 \u2713 \u2713 Number9 \u2713 \u2713 \u2713 Number10 \u2713 \u2713 \u2713 Number11 \u2713 \u2713 \u2713 Number12 \u2713 \u2713 \u2713 Number13 \u2713 \u2713 \u2713 Number14 \u2713 \u2713 \u2713 Number15 \u2713 \u2713 \u2713 Number16 \u2713 \u2713 \u2713 Number17 \u2713 \u2713 \u2713 Number18 \u2713 \u2713 \u2713 Number19 \u2713 \u2713 \u2713 Number20 \u2713 \u2713 \u2713 Start1 \u2713 \u2713 \u2713 Start2 \u2713 \u2713 \u2713 Start3 \u2713 \u2713 \u2713 Start4 \u2713 \u2713 \u2713 Start5 \u2713 \u2713 \u2713 Start6 \u2713 \u2713 \u2713 Start7 \u2713 \u2713 \u2713 Start8 \u2713 \u2713 \u2713 Start9 \u2713 \u2713 \u2713 Start10 \u2713 \u2713 \u2713 Text1 \u2713 \u2713 \u2713 Text2 \u2713 \u2713 \u2713 Text3 \u2713 \u2713 \u2713 Text4 \u2713 \u2713 \u2713 Text5 \u2713 \u2713 \u2713 Text6 \u2713 \u2713 \u2713 Text7 \u2713 \u2713 \u2713 Text8 \u2713 \u2713 \u2713 Text9 \u2713 \u2713 \u2713 Text10 \u2713 \u2713 \u2713 Text11 \u2713 \u2713 \u2713 Text12 \u2713 \u2713 \u2713 Text13 \u2713 \u2713 \u2713 Text14 \u2713 \u2713 \u2713 Text15 \u2713 \u2713 \u2713 Text16 \u2713 \u2713 \u2713 Text17 \u2713 \u2713 \u2713 Text18 \u2713 \u2713 \u2713 Text19 \u2713 \u2713 \u2713 Text20 \u2713 \u2713 \u2713 Text21 \u2713 \u2713 \u2713 Text22 \u2713 \u2713 \u2713 Text23 \u2713 \u2713 \u2713 Text24 \u2713 \u2713 \u2713 Text25 \u2713 \u2713 \u2713 Text26 \u2713 \u2713 \u2713 Text27 \u2713 \u2713 \u2713 Text28 \u2713 \u2713 \u2713 Text29 \u2713 \u2713 \u2713 Text30 \u2713 \u2713 \u2713"},{"location":"howto-build/","title":"Building MPXJ","text":"<p>Although MPXJ can be downloaded as a complete package from Maven, GitHub and SourceForge, the development of the library continues between releases and is driven by user requests for new functionality and bug fixes being applied to existing features. Many MPXJ users will work with and ship software based on  intermediate versions of MPXJ built from the code on GitHub in order to take advantage of these enhancements before they become available in an official  release. This approach is supported by the fact that code is only pushed to  the master branch on GitHub if the suite of regression tests have been completed successfully:  therefore the quality of the code taken from GitHub at any point can normally be guaranteed  to be as good as that in an official release.</p> <p>In order to take advantage of MPXJ functionality from GitHub, you will need to  understand how to build the library, whether you are using it in the form of a Java JAR or a .NET DLL. The following sections explain how to do this.</p>"},{"location":"howto-build/#obtaining-the-source","title":"Obtaining the source","text":"<p>The first step in the process of building your own version of MPXJ is to obtain  the latest source from GitHub. Instructions for cloning the repository can be found on this page.</p>"},{"location":"howto-build/#building-the-java-jar","title":"Building the Java JAR","text":"<p>MPXJ is built using Maven. Once you have a cloned copy of the MPXJ repository, you may wish to update the <code>groupId</code>, <code>artifactId</code> or <code>version</code> attributes in <code>pom.xml</code>. This will ensure that there is no confusion between the version of MPXJ you build and the official distributions.</p> <p>If you have a copy of Maven installed, you can issue the following command to build MPXJ:</p> <pre><code>mvn -DskipTests=true -Dmaven.javadoc.skip=true -Dsource.skip=true package\n</code></pre> <p>This will generate the <code>mpxj.jar</code> for you in the Maven target directory, and copies MPXJ's dependencies to the <code>lib</code> directory. Note that for convenience this skips running the unit tests, javadoc generation and source packaging. </p> <p>If you are using Maven to manage dependencies for your own project, you can install your newly built version of MPXJ in a local Maven repository:</p> <pre><code>mvn -DskipTests=true -Dmaven.javadoc.skip=true -Dsource.skip=true install\n</code></pre>"},{"location":"howto-build/#building-the-net-dlls","title":"Building the .NET DLLs","text":"<p>Building the .NET versions of MPXJ uses an Ant script to first run Maven to create the Java version, then run IKVM to create a .Net Framework and a .Net Core version.</p> <ul> <li>Download .Net Framework version of IKVM   and unzip the files into a convenient directory</li> <li>Change directory to the MPXJ folder.</li> <li>Edit the <code>build.xml</code> file and ensure that the property named <code>ikvm.net45.dir</code>   is set to point to the location where you have unzipped IKVM.</li> </ul> <p>You can now issue the following command:</p> <pre><code>ant archive\n</code></pre> <p>The Ant script will recognise that IKVM is present and build the .NET Framework  version of MPXJ, with the results found in the <code>src.net\\lib\\net45</code> folder.</p>"},{"location":"howto-build/#generating-the-jaxb-code","title":"Generating the JAXB code","text":"<p>In order to read and write various XML file formats, MPXJ relies on code generated by the JAXB tool <code>xjc</code> from the XML schema for each file format. Normally you will not need to regenerate this source, but if you are changing  the JAXB implementation, or modifying the use of JAXB in some way, then you may need to regenerate this code. </p> <p>Where I have created an XML schema to support a particular file format, I have included it in the MPXJ distribution in the <code>jaxb</code> directory. For XML schemas published by product vendors, I have included a note on the home page indicating where these can be located. </p> <p>If you obtain a copy of the XML schema file you want to work with, you can update   the JAXB source using the <code>xjc</code> target found in the ant <code>build.xml</code> file.  Note that the <code>xjc</code> target is platform specific, you will need to  change the name of <code>xjc</code> tool to be <code>xjc.bat</code>, <code>xjc.exe</code>, or <code>xjc.sh</code>  depending on your operating system. You will also need to set  the properties indicated in <code>build.xml</code> to tell it where to  find <code>xjc</code> and the XML schema file. If you are only regenerating source for one of the XML schemas, you can comment out the others in the Ant script to avoid unnecessary work.</p>"},{"location":"howto-com/","title":"Getting Started with COM","text":"<p>The .Net Framework assemblies provided in the DLLs described here are accessible from COM. This should allow you to, for example, write VBA code which utilises MPXJ functionality. To assist with this, for each of the DLLs distributed with MPXJ type libraries in the form of <code>TLB</code> files are provided in the <code>src.net\\lib\\net45</code> directory.  You will also need to register the MPXJ assemblies in order to use them from COM,  using the <code>regasm</code> assembly registration tool. </p> <p>For your convenience two batch files have been provided in the <code>src.net\\lib\\net45</code> directory: <code>mpxj-register-assemblies.bat</code> and <code>mpxj-unregister-assemblies.bat</code>. These batch files will register and unregister the MPXJ assemblies respectively. These batch files assume that <code>regasm</code> is available on the path.</p>"},{"location":"howto-convert/","title":"Converting Files","text":"<p>To convert project data between different formats you read the source  data using an appropriate Reader class, then write the data using a Writer class which matches the format you want to convert to.</p> <p>MPXJ can do a lot of the work for you, as the example below illustrates. The <code>UniversalProjectReader</code> will detect the type of schedule being read and handle it accordingly. The <code>ProjectWriterUtility</code> will use the extension of the output file to determine the type of file written.</p> <p>The extensions recognised by the <code>ProjectWriterUtility</code> class are:</p> <ul> <li>MPX</li> <li>XML (writes an MSPDI file)</li> <li>PMXML</li> <li>PLANNER</li> <li>JSON</li> <li>SDEF</li> </ul> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\nimport net.sf.mpxj.writer.ProjectWriter;\nimport net.sf.mpxj.writer.ProjectWriterUtility;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile projectFile = reader.read(inputFile);\n\nProjectWriter writer = ProjectWriterUtility.getProjectWriter(outputFile);\nwriter.write(projectFile, outputFile);\n</code></pre> <p>If you already know the file types you are converting between, you can use the specific Reader and Writer classes, as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.ProjectReader;\nimport net.sf.mpxj.writer.ProjectWriter;\nimport net.sf.mpxj.mpp.MPPReader;\nimport net.sf.mpxj.mpx.MPXWriter;\n\n// ...\n\nProjectReader reader = new MPPReader();\nProjectFile projectFile = reader.read(inputFile);\n\nProjectWriter writer = new MPXWriter();\nwriter.write(projectFile, outputFile);\n</code></pre>"},{"location":"howto-dotnet/","title":"Getting Started with .Net","text":"<p>For many people the easiest way to work with MPXJ is via NuGet. The .Net assemblies and their dependencies can also be found in the zip file distribution from GitHub or SourceForge.</p> <p>You'll find a general introduction to MPXJ's functionality here.</p>"},{"location":"howto-dotnet/#mpxj-assemblies","title":"MPXJ assemblies","text":"<p>MPXJ ships with a set of .Net Framework and .Net Core assemblies, which are managed for you by NuGet or can be found in the <code>src.net\\lib\\net45</code> and <code>src.net\\lib\\netcoreapp3.1</code> folders of the distribution respectively.</p> <p>There are actually three different .Net DLLs shipped with MPXJ - you only need one of these:</p> <ul> <li>mpxj.dll - this is the default .Net version, the API is   identical to the Java version</li> <li>mpxj-for-csharp.dll - in this version the API has been modified to make   it less like Java and more like C#: there are properties rather than getter   and setter methods and the method names follow the same uppercase initial   letter convention used by C#.</li> <li>mpxj-for-vb.dll - this version also transforms getters and setters into   properties, but the method names are unchanged. VB is case insensitive and   can't cope with the seeing two methods whose name differs only by case</li> </ul> <p>As noted above, in the \"for C#\" and \"for VB\" versions of the MPXJ DLL, getters and setters have been replaced by properties. For example, where you would have previously written code like this:</p> <pre><code>String text = task.getText();\ntask.setText(text);\n</code></pre> <p>Now when you work with the \"for C#\" and \"for VB\" versions of the MPXJ DLL, you'll be able to write code in a more familiar style:</p> <pre><code>String text = task.Text\ntask.Text = text;\n</code></pre> <p>Also noted above, in the case of the \"for C#\" MPXJ DLL, method names have been modified to begin with an initial capital, so the code will again have a more familiar style. For example, using the original Java method names you'd write something like this:</p> <pre><code>Task task = projectFile.addTask();\n</code></pre> <p>Using the \"for C#\" DLL your code will look like this:</p> <pre><code>Task task = projectFile.AddTask();\n</code></pre>"},{"location":"howto-dotnet/#mpxj-dependencies","title":"MPXJ dependencies","text":"<p>Once you have selected the version of the MPXJ DLL most suitable for your project, you will need to add its dependencies. If you are using NuGet to manage your dependencies, this is done for you automatically. If you are managing the dependencies manually, the files you need will all be in the relevant sub folder with the <code>src.net\\lib</code> folder of the MPXJ distribution.</p>"},{"location":"howto-dotnet/#net-samples","title":".Net samples","text":"<p>MPXJ ships with some sample files which can be found in the <code>src.net\\samples</code> folder of the distribution. These files illustrate how the MPXJ API can be  used to manipulate project data. In particular the <code>MpxjQuery</code> example shows how various elements which make up the project data can be queried. Two versions of this utility are present in <code>src.net\\samples</code>, one written in C#, and the other written in Visual Basic (VB) to illustrate the basics of using MPXJ in either language. Even if you are developing software in a .Net language you may still find it useful to refer to the Java examples, and indeed the original Java source of MPXJ, to give you an insight into how the API can be used.</p>"},{"location":"howto-dotnet/#net-and-java-types","title":".Net and Java types","text":"<p>The .Net version of MPXJ has been generated directly from the Java version using a tool called IKVM. One of the side effects of using IKVM to perform this conversion is that the MPXJ exposes .Net versions of the original Java data types, so for example you will find that the API returns a type called <code>LocalDateTime</code> rather than a .Net <code>DateTime</code>, and collections which don't expose the familiar <code>IEnumerable</code> interface.</p> <p>To simplify the translation between Java and .Net types, a set of extension methods have been provided. These are included n the NuGet package, and the source can be found in the <code>src.net\\utilities</code> folder, in a project called <code>MpxjUtilities</code>. This project contains extension methods which enhance both Java and .Net classes to make it easier to pass data to and from the API. For example the extension method <code>ToIEnumerable</code> is added to Java collection data types which allows them to be iterated using the familiar <code>foreach</code> .Net syntax.</p> <p>To use these extension methods, simply add a reference to the <code>MpxjUtilities</code> assembly in your own project. The methods themselves are documented in the source, and examples of their use can be seen in the samples provided in the <code>src.net\\samples</code> folder.</p>"},{"location":"howto-dotnet/#mpxj-and-the-gac","title":"MPXJ and the GAC","text":"<p>For your convenience two batch files are provided in the <code>src.net\\lib\\net45</code> directory: <code>mpxj-gac-install.bat</code> and <code>mpxj-gac-uninstall.bat</code>. These batch files install the MPXJ assemblies into the GAC and uninstall the MPXJ assemblies from the GAC using the <code>gacutil</code> global assembly cache tool. Note that these batch files assume that <code>gacutil</code> is available on the path.</p>"},{"location":"howto-read-asta/","title":"How To: Read Asta Powerproject and Easyproject files","text":"<p>Asta Powerproject and Asta Easyproject both use PP files.</p>"},{"location":"howto-read-asta/#reading-pp-files","title":"Reading PP files","text":"<p>The simplest way to read a PP file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.pp\");\n</code></pre> <p>You can work directly with the <code>AstaFileReader</code> by replacing <code>UniversalProjectReader</code> with <code>AstaFileReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>AstaFileReader</code> class.</p>"},{"location":"howto-read-conceptdraw/","title":"How To: Read ConceptDraw PROJECT files","text":"<p>ConceptDraw PROJECT writes CDPX, CPDZ and CPDTZ files.</p>"},{"location":"howto-read-conceptdraw/#reading-cdpx-cpdz-and-cpdtz-files","title":"Reading  CDPX, CPDZ and CPDTZ files","text":"<p>The simplest way to read a  CDPX, CPDZ or CPDTZ file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.cdpx\");\n</code></pre> <p>You can work directly with the <code>ConceptDrawProjectReader</code> by replacing <code>UniversalProjectReader</code> with <code>ConceptDrawProjectReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>ConceptDrawProjectReader</code> class.</p>"},{"location":"howto-read-fasttrack/","title":"How To: Read FastTrack Schedule files","text":"<p>FastTrack Schedule writes schedule data to FTS files. Note that MPXJ has only been tested with FTS files produced by FastTrack 10.</p>"},{"location":"howto-read-fasttrack/#reading-fts-files","title":"Reading FTS files","text":"<p>The simplest way to read an FTS file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.fts\");\n</code></pre> <p>You can work directly with the <code>FastTrackReader</code> by replacing <code>UniversalProjectReader</code> with <code>FastTrackReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>FastTrackReader</code> class.</p>"},{"location":"howto-read-ganttdesigner/","title":"How To: Read Gantt Designer files","text":"<p>Gantt Designer writes schedule data to GNT files.</p>"},{"location":"howto-read-ganttdesigner/#reading-gnt-files","title":"Reading GNT files","text":"<p>The simplest way to read a GNT file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.gnt\");\n</code></pre> <p>You can work directly with the <code>GanttDesignerReader</code> by replacing <code>UniversalProjectReader</code> with <code>GanttDesignerReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>GanttDesignerReader</code> class.</p>"},{"location":"howto-read-ganttproject/","title":"How To: Read GanttProject files","text":"<p>GanttProject writes schedule data to GAN files (which are actually just XML files).</p>"},{"location":"howto-read-ganttproject/#reading-gan-files","title":"Reading GAN files","text":"<p>The simplest way to read a GAN file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.gan\");\n</code></pre> <p>You can work directly with the <code>GanttProjectReader</code> by replacing <code>UniversalProjectReader</code> with <code>GanttProjectReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>GanttProjectReader</code> class.</p>"},{"location":"howto-read-merlin/","title":"How To: Read Merlin files","text":"<p>Merlin Project is a Mac application. MPXJ provides experimental support for reading some Merlin Project files. The Merlin file format does not necessarily contain a full set of start and finish dates for each task. Merlin calculates these dates when it displays a schedule. At the moment MPXJ lacks this functionality, so you may not find start and finish dates for each task.</p>"},{"location":"howto-read-merlin/#reading-merlin-files","title":"Reading Merlin files","text":"<p>The simplest way to read a Merlin file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample-merlin-project\");\n</code></pre> <p>Note that on a Mac Merlin projects are not single files, but rather they are directories containing multiple files (the Mac Finder normally hides this from you). When using MPXJ to read a Merlin project you pass the directory name to the <code>UniversalProjectReader</code> class.</p> <p>You can work directly with the <code>MerlinReader</code> by replacing <code>UniversalProjectReader</code> with <code>MerlinReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>MerlinReader</code> class.</p>"},{"location":"howto-read-mpd/","title":"How To: Read MPD files","text":"<p>Microsoft Project from Project 98 until Project 2003 could read and write schedules as Microsoft Access database files with the extension MPD. Versions of Microsoft Project after 2003 can import projects from MPD databases but cannot create or write to them. Project 98 crates a database with a schema known as MPD8, which MPXJ does not currently support reading. Project 2000 onward uses a schema call MPD9 which MPXJ can read.</p> <p>Coincidentally, Microsoft Project Server originally shared the same database schema as the MPD9 file format. This means that the <code>MPDDatabaseReader</code> class may also be used to read data from a Project Server SQL Server database.</p>"},{"location":"howto-read-mpd/#reading-mpd-files","title":"Reading MPD files","text":"<p>The simplest way to read an MPD file is to use the <code>UniversalProjectReader</code>:</p> <p><pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.mpd\");\n</code></pre> In order for this to work the <code>UniversalProjectReader</code> assumes that the JDBC-ODBC bridge driver is available. As an MPD file can contain multiple projects, the <code>UniversalProjectReader</code> assumes that a single project is present in the file with an ID of 1. This is normally the case when a single project is saved as an MPD file.</p>"},{"location":"howto-read-mpd/#using-mpddatabasereader","title":"Using MPDDatabaseReader","text":"<p>You can work directly with the <code>MPDDatabaseReader</code> class by replacing <code>UniversalProjectReader</code> with <code>MPDDatabaseReader</code>. This provides access to additional options, as described below.</p>"},{"location":"howto-read-mpd/#setting-the-database-connection","title":"Setting the database connection","text":"<p>Three <code>read</code> methods are provided by the <code>MPDDatabaseReader</code> class which allow you to work directly with an MPD file, either by passing in a file name a <code>File</code> instance or an <code>InputStream</code> instance. These methods use the JDBC-ODBC bridge driver to open the database. An alternative approach is for you to provide your own database connection. To that end the <code>MPDDatabaseReader</code> class provides two additional methods: <code>setConnection</code> and <code>setDataSource</code> which allows you to supply a JDBC <code>Connection</code> instance or a JDBC <code>DataSource</code> instance.</p> <p>You can of course use this to set up your own JDBC connection to read from the MDB file, however these methods may be more useful if you wish to read data from a Microsoft Project Server database instance, which shares the same schema as the MDB file.</p>"},{"location":"howto-read-mpd/#selecting-a-project","title":"Selecting a project","text":"<p>If the MPD file contains multiple projects, you can retrieve details of the available projects using the <code>listProjects</code> method. This returns a map of project IDs and project names. The sample code below illustrates how to retrieve this list of projects, and select the specific project that you want to read. In this case we read each project in the file in turn.</p> <pre><code>import java.util.Map;\nimport java.util.Map.Entry;\nimport net.sf.mpxj.mpd.MPDDatabaseReader;\n\nMPDDatabaseReader reader = new MPDDatabaseReader();\nreader.setConnection(connection);\nMap&lt;Integer, String&gt; projects = reader.listProjects();\nfor (Entry&lt;Integer, String&gt; entry : projects.entrySet())\n{\nSystem.out.println(\"Project name: \" + entry.getValue());\nreader.setProjectID(entry.getKey());\nreader.read();\n}\n</code></pre>"},{"location":"howto-read-mpp/","title":"How To: Read MPP files","text":"<p>The native Microsoft Project file format is typically has the extension MPP (or MPT for a template file). Although a common file extension uis used, there are actually a number if different variants of the file format. The list below shows the different variants, and the versions of  Microsoft Project which produce them:</p> <ul> <li>MPP8 - Project 98</li> <li>MPP9 - Project 2000 and Project 2002</li> <li>MPP12 - Project 2003, Project 2007</li> <li>MPP14 - Project 2010 and all later versions</li> </ul>"},{"location":"howto-read-mpp/#reading-mpp-files","title":"Reading MPP files","text":"<p>The simplest way to read an MPP file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.mpp\");\n</code></pre>"},{"location":"howto-read-mpp/#using-mppreader","title":"Using MPPReader","text":"<p>You can work directly with the <code>MPPReader</code> class by replacing <code>UniversalProjectReader</code> with <code>MPPReader</code>. This provides access to additional options, as described below.</p>"},{"location":"howto-read-mpp/#password-protected-files","title":"Password Protected Files","text":"<p>When a read password has been set for an MPP file, the contents of the file are partially encrypted. If you attempt to read an MPP file which has been password protected an <code>MPXJException</code>  will be raised, with the message <code>File is password protected</code>.</p> <p>MPXJ only supports decryption of password protected MPP9 files. The code below illustrates how you would supply the password:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpp.MPPReader;\n\n// ...\n\nMPPReader reader = new MPPReader();\nreader.setReadPassword(\"my secret password\");\nProjectFile project = reader.read(\"my-sample.mpp\");\n</code></pre> <p>The encryption used by MPP9 files doesn't actually require the password in order to read the contents of the file. If you wish you can set a flag to ignore  the MPP9 password protection.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpp.MPPReader;\n\n// ...\n\nMPPReader reader = new MPPReader();\nreader.setRespectPasswordProtection(false);\nProjectFile project = reader.read(\"my-sample.mpp\");\n</code></pre>"},{"location":"howto-read-mpp/#presentation-data","title":"Presentation Data","text":"<p>Alongside the schedule data itself, MPXJ also extracts much of the presentation data available in an MPP file, for example table layouts, filters, graphical indicators and so on. If you are not interested in this type of data, you can tell MPXJ not to read it. This will speed up reading MPP files, and slightly reduce memory consumption. To do this you will use the <code>setReadPresentationData</code> method, as shown below:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpp.MPPReader;\n\n// ...\n\nMPPReader reader = new MPPReader();\nreader.setReadPresentationData(false);\nProjectFile project = reader.read(\"my-sample.mpp\");\n</code></pre>"},{"location":"howto-read-mpp/#properties-only","title":"Properties Only","text":"<p>Should you wish to simply \"peek\" at the contents of the MPP file by just reading the summary properties from the file, you can use the <code>setReadPropertiesOnly</code> method as shown below:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpp.MPPReader;\n\n// ...\n\nMPPReader reader = new MPPReader();\nreader.setReadPropertiesOnly(true);\nProjectFile project = reader.read(\"my-sample.mpp\");\n</code></pre>"},{"location":"howto-read-mpp/#raw-timephased-data","title":"Raw timephased data","text":"<p>When MPXJ reads timephased data from an MPP file it \"normalises\" the data, converting it from the compact format Microsoft Project uses internally into a representation which shows the timephased values day-by-day. This is generally easier to understand, and can be further processed using the methods in the <code>TimephasedUtility</code> class to show the data over the required timescale.</p> <p>If you do not want MPXJ to normalise the data, and would prefer instead to work with the raw data directly from the MPP file, you can use the <code>setUseRawTimephasedData</code> to do this, as shown below:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpp.MPPReader;\n\n// ...\n\nMPPReader reader = new MPPReader();\nreader.setUseRawTimephasedData(true);\nProjectFile project = reader.read(\"my-sample.mpp\");\n</code></pre>"},{"location":"howto-read-mpx/","title":"How To: Read MPX files","text":"<p>Versions of Microsoft Project up to Project 98 could read and write MPX files as a data interchange format. Versions of Project after Project 98 until Project 2010 can only read MPX files. Versions of Microsoft Project after 2010 cannot read MPX files. Other third party project planning applications continue to use MPX as a data interchange format.</p>"},{"location":"howto-read-mpx/#reading-mpx-files","title":"Reading MPX files","text":"<p>The simplest way to read an MPX file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.mpx\");\n</code></pre>"},{"location":"howto-read-mpx/#using-mpxreader","title":"Using MPXReader","text":"<p>You can work directly with the <code>MPXReader</code> class by replacing <code>UniversalProjectReader</code> with <code>MPXReader</code>. This provides access to additional options, as described below.</p>"},{"location":"howto-read-mpx/#locale","title":"Locale","text":"<p>It appears that very early in the life of the MPX file format, Microsoft Project was internationalised to allow versions of the application to be used in languages other than English. One unfortunate side effect of this was that the text used in the MPX file format was also internationalised. Thus rather than having a single file format which could be exchanged globally between any applications, you now need to know which internationalised version of Microsoft Project was used to create the MPX file in order to read it successfully.</p> <p>Fortunately in most cases MPX files have been generated using the English language version of Microsoft Project, or an application which generates this variant, so the default settings for <code>MPXReader</code> will work.</p> <p>If you encounter an MPX file  generated by something other than an English version of Microsoft Project, you'll need to explicitly set the locale in order to read the file. The sample below shows how this is done:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpx.MPXReader;\n\n// ...\n\nMPXReader reader = new MPXReader();\nreader.setLocale(Locale.GERMAN);\nProjectFile project = reader.read(\"my-sample.mpx\");\n</code></pre> <p>The following locales are supported by <code>MPXReader</code>:</p> <ul> <li>English</li> <li>German</li> <li>Spanish</li> <li>French</li> <li>Italian</li> <li>Portuguese</li> <li>Russian</li> <li>Swedish</li> <li>Chinese</li> </ul> <p>You can retrieve a list of supported locales programmatically using the code shown below:</p> <pre><code>import net.sf.mpxj.mpx.MPXReader;\n\n// ...\n\nLocale[] locales = MPXReader.getSupportedLocales();\n</code></pre>"},{"location":"howto-read-mpx/#ignore-text-models","title":"Ignore Text Models","text":"<p>You should not normally need to modify this option.</p> <p>An MPX file consists of a series of sections with each section representing a specific entity, for example tasks, resources, and so on. The set of attributes written for each entity is not fixed, instead at the start of each section the attributes which appear in the file are listed in two forms: as a series of numeric values, and as a series on human-readable attribute names.</p> <p>Originally MPXJ used to read both of these lists, however it was found that the human-readable attribute names were often not consistent and caused problems when attempting to read MPX files. The default now is that these attributes are ignored. If for some reason you should wish to enable MPXJ's original behaviour and read these files, you would call <code>setIgnoreTextModels</code> as shown in the example below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpx.MPXReader;\n\n// ...\n\nMPXReader reader = new MPXReader();\nreader.setIgnoreTextModels(false);\nProjectFile project = reader.read(\"my-sample.mpx\");\n</code></pre>"},{"location":"howto-read-mspdi/","title":"How To: Read MSPDI files","text":"<p>The Microsoft Project Data Interchange (MSPDI) format is an XML file format which Microsoft Project has been able to read and write since Project 2002.</p>"},{"location":"howto-read-mspdi/#reading-mspdi-files","title":"Reading MSPDI files","text":"<p>The simplest way to read an MSPDI file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.xml\");\n</code></pre>"},{"location":"howto-read-mspdi/#using-mspdireader","title":"Using MSPDIReader","text":"<p>You can work directly with the <code>MSPDIReader</code> class by replacing <code>UniversalProjectReader</code> with <code>MSPDIReader</code>. This provides access to additional options, as described below.</p>"},{"location":"howto-read-mspdi/#encoding","title":"Encoding","text":"<p>By default MPXJ assumes that MSPDI files are encoded as UTF-8. The <code>UniversalProjectReader</code> understands Unicode Byte Order Marks (BOM) and will adjust the encoding appropriately if a BOM is present. If you have an MSPDI file with an unusual encoding, you can manually set the encoding used by the reader.</p> <p>Two methods are provided to do this: <code>setCharset</code> and <code>setEncoding</code>. The <code>setCharset</code> method takes an instance of the <code>Charset</code> class, while the <code>setEncoding</code> method takes the name of an encoding. Examples of these methods are shown below:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIReader;\n\n// ...\n\nMSPDIReader reader = new MSPDIReader();\n\n// Use a Charset instance\nreader.setCharset(Charset.forName(\"GB2312\"));\nProjectFile project = reader.read(\"my-sample.xml\");\n\n// Use an encoding name\nreader.setEncoding(\"GB2312\");\nproject = reader.read(\"my-sample.xml\");\n</code></pre>"},{"location":"howto-read-mspdi/#microsoft-project-compatibility","title":"Microsoft Project Compatibility","text":"<p>Microsoft Project will read MSPDI files which are not valid XML according to the MSPDI schema. By default MPXJ has been configured to take the same approach. If for some reason you wish to  apply strict validation when reading an MSPDI file, you can do this using the  <code>setMicrosoftProjectCompatibleInput</code> method, as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIReader;\n\n// ...\n\nMSPDIReader reader = new MSPDIReader();\nreader.setMicrosoftProjectCompatibleInput(false);\nProjectFile project = reader.read(\"my-sample.xml\");\n</code></pre>"},{"location":"howto-read-p3/","title":"How To: Read P3 files","text":"<p>A Primavera P3 installation stores project data as a database consisting of a number of individual files. In a typical P3 installation files for a number of different projects live in a single projects directory. A P3 user can back up an individual project to create a PRX file, which is a compressed archive containing all of the files from a single project.</p>"},{"location":"howto-read-p3/#reading-prx-files","title":"Reading PRX files","text":"<p>The simplest way to read a PRX file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.prx\");\n</code></pre> <p>You can work directly with the <code>P3PRXFileReader</code> by replacing <code>UniversalProjectReader</code> with <code>P3PRXFileReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>P3PRXFileReader</code> class.</p>"},{"location":"howto-read-p3/#reading-a-p3-directory","title":"Reading a P3 directory","text":"<p>If you are working with a directory containing P3 project data you have two options. If you know that the directory only contains a single project, you can use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-p3-directory\");\n</code></pre> <p>If the directory happens to contain multiple projects the <code>UniversalProjectReader</code> will simply read the first one it finds, in alphabetic order.</p> <p>If you know that the directory you are working with contains multiple projects, you will need to use the <code>P3DatabaseReader</code> class.</p> <pre><code>import java.util.List;\nimport net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.p3.P3DatabaseReader;\n\n// ...\n\n// Find a list of the project names\nString directory = \"my-p3-directory\";\nList&lt;String&gt; projectNames = P3DatabaseReader.listProjectNames(directory);\n\n// Tell the reader which project to work with\nP3DatabaseReader reader = new P3DatabaseReader();\nreader.setProjectName(projectNames.get(0));\n\n// Read the project\nProjectFile project = reader.read(directory);\n</code></pre> <p>As the example above shows, the <code>P3DatabaseReader</code> class provides a method which lists the names of the P3 projects it finds in a directory. You can then select which project you want to load, and call the <code>setProjectName</code> method of the reader to make this selection. You can then call the <code>read</code> method passing in the name of the directory, and the reader will extract data for the selected project.</p>"},{"location":"howto-read-phoenix/","title":"How To: Read Phoenix Project Manager files","text":"<p>Phoenix Project Manager uses PPX files.</p>"},{"location":"howto-read-phoenix/#reading-ppx-files","title":"Reading PPX files","text":"<p>The simplest way to read a PPX file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.ppx\");\n</code></pre> <p>You can work directly with the <code>PhoenixReader</code> by replacing <code>UniversalProjectReader</code> with <code>PhoenixReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>PhoenixReader</code> class.</p>"},{"location":"howto-read-planner/","title":"How To: Read Planner files","text":"<p>Gnome Planner is a popular open source planning tool which writes its own XML files.</p>"},{"location":"howto-read-planner/#reading-planner-files","title":"Reading Planner files","text":"<p>The simplest way to read a Planner file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.xml\");\n</code></pre> <p>You can work directly with the <code>PlannerReader</code> by replacing <code>UniversalProjectReader</code> with <code>PlannerReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>PlannerReader</code> class.</p>"},{"location":"howto-read-plf/","title":"How To: Read Primavera PLF files","text":"<p>Primavera P6 can export layout information as PLF files. These files define the visual appearance of the P6 user interface, and can be imported and exported by P6. Although MPXJ doesn't currently offer any facilities to interpret the contents of these files, the data they contain can be read.</p>"},{"location":"howto-read-plf/#reading-plf-files","title":"Reading PLF files","text":"<p>A PLF file contains \"structured text\" and can be read using <code>StructuredTextParser</code>:</p> <pre><code>import net.sf.mpxj.primavera.StructuredTextParser;\n\n// ...\n\nStructuredTextParser parser = new StructuredTextParser();\nStructuredTextRecord record = parser.parse(new FileInputStream(\"test.plf\"))\n</code></pre>"},{"location":"howto-read-plf/#attributes","title":"Attributes","text":"<p>The resulting <code>StructuredTextRecord</code> contains attributes which can be accesed individually by name, as shown below:</p> <pre><code>record.getAttribute(\"attribute_name\");\n</code></pre> <p>The attributes can also be retrieved in the form of a <code>Map</code> containing all attributes for this record:</p> <pre><code>Map&lt;String,String&gt; attributes = record.getAttributes();\nattributes.get(\"attribute_name\");\n</code></pre> <p>Each record has two special attributes: a record number, and optionally a record name. These appear as part of the identifying information for each record, not as part of the general set of attributes for the record. These can be retrieved as shown below:</p> <pre><code>String recordNumber = record.getRecordNumber();\nString recordName = record.getRecordName();\n</code></pre> <p>These attributes will also be found in the attributes <code>Map</code> with the keys <code>_record_number</code> and <code>_record_name</code>.</p>"},{"location":"howto-read-plf/#child-records","title":"Child records","text":"<p>Along with a set of attributes, each <code>StructuredTextRecord</code> may have child <code>StructuredTextRecord</code> instances. These be retrieved as a list, as shown below:</p> <pre><code>List&lt;StructuredTextRecord&gt; childRecords = record.getChildren();\n</code></pre> <p>Certain record types are named, and where this is the case a child record can be retrieved individually by name:</p> <pre><code>StructuredTextRecord child = record.getChild(\"child_name\");\n</code></pre>"},{"location":"howto-read-pmxml/","title":"How To: Read Primavera PMXML files","text":"<p>Primavera P6 can export data in an XML format known as PMXML.</p>"},{"location":"howto-read-pmxml/#reading-pmxml-files","title":"Reading PMXML files","text":"<p>The simplest way to read a PMXML file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.xml\");\n</code></pre>"},{"location":"howto-read-pmxml/#using-primaverapmfilereader","title":"Using PrimaveraPMFileReader","text":"<p>You can work directly with the <code>PrimaveraPMFileReader</code> by replacing <code>UniversalProjectReader</code> with <code>PrimaveraPMFileReader</code>. This provides access to additional options, as described below.</p>"},{"location":"howto-read-pmxml/#wbs-is-full-path","title":"WBS is Full Path","text":"<p>Currently, the WBS attribute of summary tasks (WBS entities in P6) will be a dot separated hierarchy of all the parent WBS attributes. In this example, <code>root.wbs1.wbs2</code> is the WBS attribute for <code>wbs2</code> which has the parents <code>root</code> and <code>wbs1</code>. To disable this behaviour, and simply record the code for the current WBS entry (in the example above <code>wbs2</code>) call the <code>setWbsIsFullPath</code> method, passing in <code>false</code>, as illustrated below.  </p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraPMFileReader;\n\n// ...\n\nPrimaveraPMFileReader reader = new PrimaveraPMFileReader();\nreader.setWbsIsFullPath(false);\n</code></pre>"},{"location":"howto-read-pmxml/#multiple-projects","title":"Multiple Projects","text":"<p>A PMXML file can contain multiple projects. By default, MPXJ reads the first non-external project it finds in the file, otherwise it defaults to the first project it finds. You can however use MPXJ to list the projects contained in a PMXML file, as shown below:</p> <p><pre><code>import net.sf.mpxj.primavera.PrimaveraPMFileReader;\n\n// ...\n\nPrimaveraPMFileReader reader = new PrimaveraPMFileReader();\nFileInputStream is = new FileInputStream(\"my-sample.xml\");\nMap&lt;Integer, String&gt; projects = reader.listProjects(is);\nSystem.out.println(\"ID\\tName\");\nfor (Entry&lt;Integer, String&gt; entry : projects.entrySet())\n{\nSystem.out.println(entry.getKey()+\"\\t\"+entry.getValue());\n}\n</code></pre> The call to <code>listProjects</code> returns a <code>Map</code> whose key is the project ID, and the values are project short names.</p> <p>Once you have decided which of these projects you want to work with, you can call <code>setProjectID</code> to tell the reader which project to open, as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraPMFileReader;\n\n// ...\n\nPrimaveraPMFileReader reader = new PrimaveraPMFileReader();\nreader.setProjectID(123);\nProjectFile file = reader.read(\"my-sample.xml\");\n</code></pre> <p>Alternatively you can ask MPXJ to read all the projects contained in the file:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraPMFileReader;\n\n// ...\n\nPrimaveraPMFileReader reader = new PrimaveraPMFileReader();\nInputStream is = new FileInputStream(\"my-sample.xml\");\nList&lt;ProjectFile&gt; files = reader.readAll(is);\n</code></pre> <p>The call to the <code>readAll</code> method returns a list of <code>ProjectFile</code> instances corresponding to the projects in the PMXML file.</p>"},{"location":"howto-read-pmxml/#link-cross-project-relations","title":"Link Cross-Project Relations","text":"<p>A PMXML file can contain multiple projects with relations between activities which span those projects. By default, these cross-project relations are ignored. However, if you set the <code>linkCrossProjectRelations</code> reader attribute to <code>true</code>, MPXJ will attempt to link these relations across projects: </p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraPMFileReader;\n\n// ...\n\nPrimaveraPMFileReader reader = new PrimaveraPMFileReader();\nreader.setLinkCrossProjectRelations(true);\nInputStream is = new FileInputStream(\"my-sample.xml\");\nList&lt;ProjectFile&gt; files = reader.readAll(is);\n</code></pre>"},{"location":"howto-read-pmxml/#baselines","title":"Baselines","text":"<p>Users can export PMXML files from P6 which contain the baseline project along with the main project being exported. When the <code>readAll</code> method is used to read a PMXML file, MPXJ will attempt to populate the baseline fields of the main project if it can locate the baseline project in the PMXML file.</p> <p>By default the \"Planned Dates\" strategy is used to populate baseline fields, which is the approach P6 uses when the \"Earned Value Calculation\" method is set to  \"Budgeted values with planned dates\".</p> <p><code>PrimaveraPMFileReader</code> provides a method allowing the strategy to be changed, thus allowing you to select the \"Current Dates\" strategy, which is the approach used by P6 when the Earned Value Calculation method is set to \"At Completion values with current dates\" or \"Budgeted values with current dates\". The example below illustrates how this method is used:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraBaselineStrategy;\nimport net.sf.mpxj.primavera.PrimaveraPMFileReader;\n\n// ...\n\nPrimaveraPMFileReader reader = new PrimaveraPMFileReader();\nreader.setBaselineStrategy(PrimaveraBaselineStrategy.CURRENT_DATES);\nInputStream is = new FileInputStream(\"my-sample.xml\");\nList&lt;ProjectFile&gt; files = reader.readAll(is);\n</code></pre>"},{"location":"howto-read-primavera/","title":"How To: Read a Primavera P6 database","text":"<p>Reading from a Primavera database is a slightly different proposition to reading file-based project data, as a database connection is required.</p>"},{"location":"howto-read-primavera/#java","title":"Java","text":"<p>The example below illustrates how to do this for a Primavera database hosted in SQL Server, using the open source JTDS JDBC driver.  The only difference when reading from an Oracle database will be the JDBC driver and connection string used.</p> <pre><code>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraDatabaseReader;\n\n// ...\n\n//\n// Load the JDBC driver\n//\nString driverClass=\"net.sourceforge.jtds.jdbc.Driver\";\nClass.forName(driverClass);\n\n//\n// Open a database connection. You will need to change\n// these details to match the name of your server, database, user and password.\n//\nString connectionString=\"jdbc:jtds:sqlserver://localhost/PMDB;user=pmdb;password=pmdb\";\nConnection c = DriverManager.getConnection(connectionString);\nPrimaveraDatabaseReader reader = new PrimaveraDatabaseReader();\nreader.setConnection(c);\n\n//\n// Retrieve a list of the projects available in the database\n//\nMap&lt;Integer,String&gt; projects = reader.listProjects();\n\n//\n// At this point you'll select the project\n// you want to work with.\n//\n\n//\n// Now open the selected project using its ID\n//\nint selectedProjectID = 1;\nreader.setProjectID(selectedProjectID);\nProjectFile projectFile = reader.read();\n</code></pre> <p>You can also connect to a standalone SQLite P6 database. This is easier to achieve as a specific reader class has been created which manages the database connection for you:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraDatabaseFileReader;\n\n...\n\nPrimaveraDatabaseFileReader reader = new PrimaveraDatabaseFileReader();\n\n//\n// Retrieve a list of the projects available in the database\n//\nMap&lt;Integer,String&gt; projects = reader.listProjects(\"PPMDBSQLite.db\");\n\n//\n// At this point you'll select the project\n// you want to work with.\n//\n\n//\n// Now open the selected project using its ID\n//\nint selectedProjectID = 1;\nreader.setProjectID(selectedProjectID);\nProjectFile projectFile = reader.read(\"PPMDBSQLite.db\");\n</code></pre>"},{"location":"howto-read-primavera/#net","title":".Net","text":"<p>The situation is a little more complicated when using the .Net version of MPXJ. In this case you are still actually running Java code, so you need to use a JDBC driver to establish a database connection.</p> <p>Your first step will be to convert your JDBC driver to a .Net assembly using IKVM. For example the command line below converts a version of Microsoft's SQL Server JDBC driver to a .Net assembly:</p> <pre><code>c:\\java\\ikvm-8.0.5449.1\\bin\\ikvmc.exe -out:mssql-jdbc-6.4.0.jre8.dll -target:library -keyfile:c:\\java\\mpxj\\src.net\\mpxj.snk -version:6.4.0.0 mssql-jdbc-6.4.0.jre8.jar\n</code></pre> <p>You can then add a reference to this assembly to your project. Configuring the JDBC driver needs to be done in a slightly different way than you would when using Java. Here we need to create an instance of the JDBC driver class directly, rather than referencing it by name as we would in Java.</p> <pre><code>//\n// Configure the connection\n//\nvar driver = new SQLServerDriver();\nvar connectionProperties = new Properties();\nvar connection = driver.connect(connectionString, connectionProperties);\n\n//\n// Configure the reader\n//\nvar reader = new PrimaveraDatabaseReader();\nreader.Connection = connection;\n</code></pre> <p>You can find the complete code for this here.</p>"},{"location":"howto-read-primavera/#using-primaveradatabasereader","title":"Using PrimaveraDatabaseReader","text":"<p>This section documents the additional options provided by the PrimaveraDatabaseReader.</p>"},{"location":"howto-read-primavera/#activity-wbs","title":"Activity WBS","text":"<p>In the original implementation of the database handling code, MPXJ would assign each task representing a Primavera Activity its own distinct WBS value. This does not match Primavera's behaviour where all of a WBS element's child activities will have the same WBS value as the parent WBS element. MPXJ's default behaviour now matches Primavera, but should you wish to you can revert to the original behaviour by calling the <code>setMatchPrimaveraWBS</code> as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraDatabaseReader;\n\n// ...\n\nPrimaveraDatabaseReader reader = new PrimaveraDatabaseReader();\nreader.setMatchPrimaveraWBS(false);\n</code></pre>"},{"location":"howto-read-primavera/#wbs-is-full-path","title":"WBS is Full Path","text":"<p>Currently, the WBS attribute of summary tasks (WBS entities in P6) will be a dot separated hierarchy of all the parent WBS attributes. In this example, <code>root.wbs1.wbs2</code> is the WBS attribute for <code>wbs2</code> which has the parents <code>root</code> and <code>wbs1</code>. To disable this behaviour, and simply record the code for the current WBS entry (in the example above <code>wbs2</code>) call the <code>setWbsIsFullPath</code> method, passing in <code>false</code>, as illustrated below.  </p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraDatabaseReader;\n\n// ...\n\nPrimaveraDatabaseReader reader = new PrimaveraDatabaseReader();\nreader.setWbsIsFullPath(false);\n</code></pre>"},{"location":"howto-read-primavera/#reading-additional-attributes","title":"Reading Additional Attributes","text":"<p>A data-driven approach is used to extract the attributes used by MPXJ from the database. You can if you wish change the way attributes are read from the file, or add support for additional attributes. This assumes that you know the column name of the attributes you want to work with in the database. To make changes you will need to retrieve the maps which define which MPXJ attributes are used to store which columns from the database:</p> <pre><code>PrimaveraDatabaseReader reader = new PrimaveraDatabaseReader();\nMap&lt;FieldType, String&gt; resourceFieldMap = reader.getResourceFieldMap();\nMap&lt;FieldType, String&gt; wbsFieldMap = reader.getWbsFieldMap();\nMap&lt;FieldType, String&gt; activityFieldMap = reader.getActivityFieldMap();\nMap&lt;FieldType, String&gt; assignmentFieldMap = reader.getAssignmentFieldMap();\n</code></pre> <p>These maps will contain the default mapping between columns and MPXJ attributes. You can modify these existing mappings, or add new ones, for example:</p> <pre><code>//\n// Change the field used to store rsrc_id\n//\nactivityFieldMap.remove(TaskField.NUMBER1);\nactivityFieldMap.put(TaskField.NUMBER2, \"rsrc_id\");\n\n//\n// Read an Activity column called an_example_field and store it in TEXT10\n//\nactivityFieldMap.put(TaskField.TEXT10, \"an_example_field\");\n</code></pre>"},{"location":"howto-read-projectcommander/","title":"How To: Read Project Commander files","text":"<p>Project Commander is a planning tool for Windows which writes its own PC file format.</p>"},{"location":"howto-read-projectcommander/#reading-project-commander-files","title":"Reading Project Commander files","text":"<p>The simplest way to read a Project Commander file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.pc\");\n</code></pre> <p>You can work directly with the <code>ProjectCommanderReader</code> by replacing <code>UniversalProjectReader</code> with <code>ProjectCommanderReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>ProjectCommanderReader</code> class.</p>"},{"location":"howto-read-projectlibre/","title":"How To: Read ProjectLibre files","text":"<p>ProjectLibre writes schedule data to POD files. MPXJ can read POD files written by ProjectLibre version 1.5.5 and later versions.</p>"},{"location":"howto-read-projectlibre/#reading-pod-files","title":"Reading POD files","text":"<p>The simplest way to read a POD file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.pod\");\n</code></pre> <p>You can work directly with the <code>ProjectLibreReader</code> by replacing <code>UniversalProjectReader</code> with <code>ProjectLibreReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>ProjectLibreReader</code> class.</p>"},{"location":"howto-read-schedule-grid/","title":"How To: Read Schedule Grid files","text":"<p>Schedule grid files are produced when a schedule is exported from Sage 100 Contractor.</p>"},{"location":"howto-read-schedule-grid/#reading-schedule-grid-files","title":"Reading Schedule Grid files","text":"<p>The simplest way to read a schedule grid file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.schedule_grid\");\n</code></pre> <p>You can work directly with the <code>SageReader</code> by replacing <code>UniversalProjectReader</code> with <code>SageReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>SageReader</code> class.</p>"},{"location":"howto-read-sdef/","title":"How To: Read SDEF files","text":"<p>The Standard Data Exchange Format (SDEF) is the US Army Corps of Engineers standard format for exchanging schedule data between systems. The definition of this format can be found  here.</p>"},{"location":"howto-read-sdef/#reading-sdef-files","title":"Reading SDEF files","text":"<p>The simplest way to read an SDEF file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.sdef\");\n</code></pre> <p>You can work directly with the <code>SDEFReader</code> by replacing <code>UniversalProjectReader</code> with <code>SDEFReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>SDEFReader</code> class.</p>"},{"location":"howto-read-suretrak/","title":"How To: Read SureTrak files","text":"<p>A Primavera SureTrak installation stores project data as a database consisting of a number of individual files. In a typical SureTrak installation files for a number of different projects live in a single projects directory. A SureTrak user can back up an individual project to create an STX file, which is a compressed archive containing all of the files from a single project.</p>"},{"location":"howto-read-suretrak/#reading-stx-files","title":"Reading STX files","text":"<p>The simplest way to read an STX file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.stx\");\n</code></pre> <p>You can work directly with the <code>SureTrakSTXFileReader</code> by replacing <code>UniversalProjectReader</code> with <code>SureTrakSTXFileReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>SureTrakSTXFileReader</code> class.</p>"},{"location":"howto-read-suretrak/#reading-a-suretrak-directory","title":"Reading a SureTrak directory","text":"<p>If you are working with a directory containing SureTrak project data you have two options. If you know that the directory only contains a single project, you can use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-suretrak-directory\");\n</code></pre> <p>If the directory happens to contain multiple projects the <code>UniversalProjectReader</code> will simply read the first one it finds, in alphabetic order.</p> <p>If you know that the directory you are working with contains multiple projects, you will need to use the <code>SureTrakDatabaseReader</code> class.</p> <pre><code>import java.util.List;\nimport net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.suretrak.SureTrakDatabaseReader;\n\n// ...\n\n// Find a list of the project names\nString directory = \"my-suretrak-directory\";\nList&lt;String&gt; projectNames = SureTrakDatabaseReader.listProjectNames(directory);\n\n// Tell the reader which project to work with\nP3DatabaseReader reader = new SureTrakDatabaseReader();\nreader.setProjectName(projectNames.get(0));\n\n// Read the project\nProjectFile project = reader.read(directory);\n</code></pre> <p>As the example above shows, the <code>SureTrakDatabaseReader</code> class provides a method which lists the names of the SureTrak projects it finds in a directory. You can then select which project you want to load, and call the <code>setProjectName</code> method of the reader to make this selection. You can then call the <code>read</code> method passing in the name of the directory, and the reader will extract data for the selected project.</p>"},{"location":"howto-read-synchro/","title":"How To: Read Synchro Scheduler files","text":"<p>Synchro Scheduler writes SP files.</p>"},{"location":"howto-read-synchro/#reading-sp-files","title":"Reading SP files","text":"<p>The simplest way to read an SP file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.sp\");\n</code></pre> <p>You can work directly with the <code>SynchroReader</code> by replacing <code>UniversalProjectReader</code> with <code>SynchroReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>SynchroReader</code> class.</p>"},{"location":"howto-read-turboproject/","title":"How To: Read TurboProject files","text":"<p>TurboProject writes schedule data to PEP files.</p>"},{"location":"howto-read-turboproject/#reading-pep-files","title":"Reading PEP files","text":"<p>The simplest way to read a PEP file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.pep\");\n</code></pre> <p>You can work directly with the <code>TurboProjectReader</code> by replacing <code>UniversalProjectReader</code> with <code>TurboProjectReader</code>, although this offers no particular advantage as there are no additional configuration settings available on the <code>TurboProjectReader</code> class.</p>"},{"location":"howto-read-xer/","title":"How To: Read XER files","text":"<p>The XER file format has long been read and written by Primavera P6. Although an XML file format (PMXML) is now also supported, the XER file format is still widely used.</p>"},{"location":"howto-read-xer/#reading-xer-files","title":"Reading XER files","text":"<p>The simplest way to read an XER file is to use the <code>UniversalProjectReader</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n// ...\n\nUniversalProjectReader reader = new UniversalProjectReader();\nProjectFile project = reader.read(\"my-sample.xer\");\n</code></pre>"},{"location":"howto-read-xer/#using-primaveraxerfilereader","title":"Using PrimaveraXERFileReader","text":"<p>You can work directly with the <code>PrimaveraXERFileReader</code> class by replacing <code>UniversalProjectReader</code> with <code>PrimaveraXERFileReader</code>. This provides access to additional options, as described below.</p>"},{"location":"howto-read-xer/#ignore-errors","title":"Ignore Errors","text":"<p>By default P6 ignores records it can't successfully read from an XER file. MPXJ takes the same approach, and in most cases if it doesn't receive the data it expects for a particular record it will ignore the problematic item.</p> <p>This behavior is controlled using the <code>setIgnoreErrors</code> method. The example below illustrates how we can force the <code>PrimaveraXERFileReader</code> to report errors encountered when reading a file:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\n\nreader.setIgnoreErrors(false);\nProjectFile project = reader.read(\"my-sample.xer\");\n</code></pre>"},{"location":"howto-read-xer/#encoding","title":"Encoding","text":"<p>By default MPXJ assumes that XER files are encoded using Windows-1252. The <code>UniversalProjectReader</code> understands Unicode Byte Order Marks (BOM) and will adjust the encoding appropriately if a BOM is present. If you have an XER file with an unusual encoding, you can manually set the encoding used by the reader.</p> <p>Two methods are provided to do this: <code>setCharset</code> and <code>setEncoding</code>. The <code>setCharset</code> method takes an instance of the <code>Charset</code> class, while the <code>setEncoding</code> method takes the name of an encoding. Examples of these methods are shown below:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\n\n// Use a Charset instance\nreader.setCharset(Charset.forName(\"GB2312\"));\nProjectFile project = reader.read(\"my-sample.xer\");\n\n// Use an encoding name\nreader.setEncoding(\"GB2312\");\nproject = reader.read(\"my-sample.xer\");\n</code></pre>"},{"location":"howto-read-xer/#multiple-projects","title":"Multiple Projects","text":"<p>An XER file can contain multiple projects. By default MPXJ reads the first project it finds in the file which has been marked as the \"exported\" project, otherwise it will simply read the first project it finds. You can however use MPXJ to list the projects contained in an XER file, as shown below:</p> <p><pre><code>import net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nFileInputStream is = new FileInputStream(\"my-sample.xer\");\nMap&lt;Integer, String&gt; projects = reader.listProjects(is);\nSystem.out.println(\"ID\\tName\");\nfor (Entry&lt;Integer, String&gt; entry : projects.entrySet())\n{\nSystem.out.println(entry.getKey()+\"\\t\"+entry.getValue());\n}\n</code></pre> The call to <code>listProjects</code> returns a <code>Map</code> whose key is the project ID, and the values are project short names.</p> <p>Once you have decided which of these projects you want to work with, you can call <code>setProjectID</code> to tell the reader which project to open, as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nreader.setProjectID(123);\nProjectFile file = reader.read(\"my-sample.xer\");\n</code></pre> <p>Alternatively you can ask MPXJ to read all of the projects contained in the file:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nInputStream is = new FileInputStream(\"my-sample.xer\");\nList&lt;ProjectFile&gt; files = reader.readAll(is);\n</code></pre> <p>The call to the <code>readAll</code> method returns a list of <code>ProjectFile</code> instances corresponding to the projects in the XER file.</p>"},{"location":"howto-read-xer/#link-cross-project-relations","title":"Link Cross-Project Relations","text":"<p>An XER file can contain multiple projects with relations between activities which span those projects. By default these cross-project relations are ignored. However, if you set the <code>linkCrossProjectRelations</code> reader attribute to <code>true</code>, MPXJ will attempt to link these relations across projects: </p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nreader.setLinkCrossProjectRelations(true);\nInputStream is = new FileInputStream(\"my-sample.xer\");\nList&lt;ProjectFile&gt; files = reader.readAll(is);\n</code></pre>"},{"location":"howto-read-xer/#activity-wbs","title":"Activity WBS","text":"<p>In the original implementation of the XER file handling code, MPXJ would assign each task representing a Primavera Activity its own distinct WBS value. This does not match Primavera's behaviour where all of a WBS element's child activities will have the same WBS value as the parent WBS element. MPXJ's default behaviour now matches Primavera, but should you wish to you can revert to the original behaviour by calling the <code>setMatchPrimaveraWBS</code> as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nreader.setMatchPrimaveraWBS(false);\nProjectFile file = reader.read(\"my-sample.xer\");\n</code></pre>"},{"location":"howto-read-xer/#wbs-is-full-path","title":"WBS is Full Path","text":"<p>Currently the WBS attribute of summary tasks (WBS entities in P6) will be a dot separated hierarchy of all of the parent WBS attributes. In this example, <code>root.wbs1.wbs2</code> is the WBS attribute for <code>wbs2</code> which has the parents <code>root</code> and <code>wbs1</code>. To disable this behaviour, and simply record the code for the current WBS entry (in the example above <code>wbs2</code>) call the <code>setWbsIsFullPath</code> method, passing in <code>false</code>, as illustrated below.  </p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileReader;\n\n// ...\n\nPrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nreader.setWbsIsFullPath(false);\n</code></pre>"},{"location":"howto-read-xer/#reading-additional-attributes","title":"Reading Additional Attributes","text":"<p>A data-driven approach is used to extract the attributes used by MPXJ from the XER file. You can if you wish change the way attributes are read from the file, or add support for additional attributes. This assumes that you know the column name of the attributes you want to work with in the XER file. To make changes you will need to retrieve the maps which define which MPXJ attributes are used to store which columns from the XER file:</p> <pre><code>PrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nMap&lt;FieldType, String&gt; resourceFieldMap = reader.getResourceFieldMap();\nMap&lt;FieldType, String&gt; wbsFieldMap = reader.getWbsFieldMap();\nMap&lt;FieldType, String&gt; activityFieldMap = reader.getActivityFieldMap();\nMap&lt;FieldType, String&gt; assignmentFieldMap = reader.getAssignmentFieldMap();\n</code></pre> <p>These maps will contain the default mapping between columns and MPXJ attributes. You can modify these existing mappings, or add new ones, for example:</p> <pre><code>//\n// Change the field used to store rsrc_id\n//\nactivityFieldMap.remove(TaskField.NUMBER1);\nactivityFieldMap.put(TaskField.NUMBER2, \"rsrc_id\");\n\n//\n// Read an Activity column called an_example_field and store it in TEXT10\n//\nactivityFieldMap.put(TaskField.TEXT10, \"an_example_field\");\n</code></pre> <p>When reading new columns from the XER file, if these columns have a type other than String, it is important to register the type of the column to ensure that it is converted correctly. You will also need to ensure that the MPXJ attribute you are writing this new value to can receive the data type you are assigning to it (for example, you must store a date in a date attribute, you can't store a date in an integer attribute).</p> <p>For example, if we are reading an integer column called <code>an_example_id</code> and store it in the <code>NUMBER2</code> attribute, we will need to take the following steps:</p> <pre><code>PrimaveraXERFileReader reader = new PrimaveraXERFileReader();\nMap&lt;String, XerFieldType&gt; fieldTypeMap = reader.getFieldTypeMap();\nfieldTypeMap.put(\"an_example_id\", XerFieldType.INTEGER);\nMap&lt;FieldType, String&gt; activityFieldMap = reader.getActivityFieldMap();\nactivityFieldMap.put(TaskField.NUMBER2, \"an_example_id\");\n</code></pre>"},{"location":"howto-start-java/","title":"Gettsing Started with Java","text":"<p>MPXJ is built to work with versions of Java from 1.8 onwards. For many people, the easiest way to get started with MPXJ and its dependencies is to use Maven. Just include the following in your POM to register MPXJ as a  dependency of your project:</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;net.sf.mpxj&lt;/groupId&gt;\n&lt;artifactId&gt;mpxj&lt;/artifactId&gt;\n&lt;version&gt;10.11.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>The traditional method of downloading the MPXJ distribution as a zip file  can also be used. Distributions can be found at GitHub and SourceForge.</p> <p>The zip files contain all of the source, the MPXJ JAR file in the root of the zip file, with the libraries on which MPXJ depends being found in the <code>lib</code> directory of the zip file. These libraries will need to be available on your classpath in order to use all of the MPXJ functionality. The <code>script</code> directory in the zip file contains a batch file and a shell script which show how this can be done.</p> <p>You'll find a general introduction to MPXJ's functionality here.</p>"},{"location":"howto-start-python/","title":"Getting Started with Python","text":"<p>MPXJ is available as a Python Package, which can be installed using <code>pip</code>:</p> <pre><code>pip install mpxj\n</code></pre> <p>You can find some documentation for the Package here. You'll need Java installed to make use of this package.</p> <p>You'll find a general introduction to MPXJ's functionality here.</p>"},{"location":"howto-start-ruby/","title":"Getting Started with Ruby","text":"<p>MPXJ is available as a RubyGem, which can be installed using <code>gem</code>:</p> <pre><code>gem install mpxj\n</code></pre> <p>or included in you <code>Gemfile</code> and installed using <code>bundler</code>.</p> <p>Note that the Ruby version of MPXJ is just a wrapper around the Java library, and provides read-only access to schedule data. You will need Java installed to make use of this Gem. You can find some documentation for the Gem [here] (https://rubygems.org/gems/mpxj)</p> <p>You'll find a general introduction to MPXJ's functionality here.</p>"},{"location":"howto-start/","title":"MPXJ Basics","text":"<p>The MPXJ library allows various formats of Microsoft Project file formats, and file formats from other project planning applications to be read and written using a single consistent API in Java, .Net, Python or any other  related languages, and provides read-only access as a Ruby gem.</p> <p>MPXJ is based around a \"neutral\" data structure which is used to represent project data, coupled with a set of format-specific reader and writer classes which understand how to read from and write to the various supported file  formats.</p> <p>The diagram below illustrates the key entities represented by the MPXJ data structure.</p> <p></p> <p>MPXJ currently allows project data to be read from a wide variety of schedule file formats and databases. You can find details of the  individual file formats supported elsewhere in the documentation. By far the easiest way to read schedule data is to use the \"universal project reader\" which can determine for itself the type of file you have passed to it.</p> <pre><code>ProjectReader reader = new UniversalProjectReader ();\nProjectFile project = reader.read(\"example.mpp\");\n</code></pre> <p>A similar arrangement exists for the writer classes, although there is not a \"universal project writer\" as such:</p> <ul> <li><code>net.sf.mpxj.mpx.MPXWriter</code>: writes Microsoft MPX files</li> <li><code>net.sf.mpxj.mspdi.MSPDIWriter</code>: writes Microsoft MSPDI (XML) files</li> <li><code>net.sf.mpxj.planner.PlannerWriter</code>: writes Planner (XML) files</li> <li><code>net.sf.mpxj.sdef.SDEFWriter</code>: writes SDEF files</li> <li><code>net.sf.mpxj.primavera.PrimaveraPMFileWriter</code>: writes Primavera PMXML (XML) files</li> <li><code>net.sf.mpxj.json.JsonWriter</code>: writes JSON files (primarily used to support the Ruby version of MPXJ)</li> </ul> <p>All of these classes implement the ProjectWriter interface. If you know which  type of file you are working with, you can use these writers directly,  for example:</p> <pre><code>ProjectWriter writer = new MPXWriter();\nwriter.write(project, \"example.mpx\");\n</code></pre>"},{"location":"howto-start/#tasks-and-resources","title":"Tasks and Resources","text":"<p>Once you've read your project file, what next? The first things of interest  are the tasks and resources which are present in the file.</p> <pre><code>ProjectReader reader = new UniversalProjectReader ();\nProjectFile project = reader.read(\"example.mpp\");\nfor (Resource resource : project.getAllResources())\n{\nSystem.out.println(\"Resource: \" + resource.getName()\n+ \" (Unique ID=\" + resource.getUniqueID() + \")\");\n}\n</code></pre> <p>The code fragment above shows how we can retrieve a collection containing all of the resources present in the file, and iterate through them printing the resource name, ID and unique ID.</p> <p>Many of the entities represented in  MPXJ have some concept of a unique ID. Tasks and resources have two ID fields, the unique ID, which as its name suggests never changes and uniquely identifies a task or a resource, and the ID. The ID of a task or a resource is the  sequential number which typically appears next to the task or resource when  displayed in Microsoft Project. If the task or resource is moved up or down  the list, this number will change depending on the position in the list. The unique ID never changes.</p> <pre><code>ProjectReader reader = new UniversalProjectReader ();\nProjectFile project = reader.read(\"example.mpp\");\nfor (Task task : project.getAllTasks())\n{\nSystem.out.println(\"Task: \" + task.getName() + \" ID=\" + task.getID()\n+ \" Unique ID=\" + task.getUniqueID());\n}\n</code></pre> <p>The code fragment above retrieves all tasks present in the file and prints details of their names, IDs, and unique IDs. </p> <p>Methods are provided on the project to locate both tasks and resource using either their ID or their Unique ID, as the examples below illustrate.</p> <pre><code>Resource r = project.getResourceByUniqueID(Integer.valueOf(99));\nTask t = project.getTaskByUniqueID(Integer.valueOf(99));\n</code></pre> <p>The methods shown above for retrieving all tasks present in a project file ignores the hierarchical task structure which Microsoft Project allows users to create. To understand the hierarchical task structure, the following methods are used to descend through the hierarchy, starting from the top.</p> <pre><code>List&lt;Task&gt; tasks = project.getChildTasks();\nTask task = tasks.get(0);\ntasks = task.getChildTasks();\n</code></pre> <p>These methods are used in the following code fragment to print out an indented list representing the task hierarchy in the file.  </p> <pre><code>public void listHierarchy(ProjectFile file)\n{\nfor (Task task : file.getChildTasks())\n{\nSystem.out.println(\"Task: \" + task.getName());\nlistHierarchy(task, \" \");\n}\n\nSystem.out.println();\n}\n\nprivate void listHierarchy(Task task, String indent)\n{\nfor (Task child : task.getChildTasks())\n{\nSystem.out.println(indent + \"Task: \" + child.getName());\nlistHierarchy(child, indent + \" \");\n}\n}\n</code></pre> <p>As well as the hierarchical relationships between tasks, there is also a temporal relationship between them: this is typically used to indicate when a task can start in relation to the completion of an earlier task. The  code fragment below shows the predecessor relationships between tasks. </p> <pre><code>for (Task task : file.getAllTasks())\n{\nList&lt;Relation&gt; predecessors = task.getPredecessors();\nif (predecessors != null &amp;&amp; !predecessors.isEmpty())\n{\nSystem.out.println(task.getName() + \" predecessors:\");\nfor (Relation relation : predecessors)\n{\nSystem.out.println(\"   Task: \" + file.getTaskByUniqueID(relation.getTaskUniqueID()).getName());\nSystem.out.println(\"   Type: \" + relation.getType());\nSystem.out.println(\"   Lag: \" + relation.getDuration());\n}\n}\n}\n</code></pre>"},{"location":"howto-start/#resource-assignments","title":"Resource Assignments","text":"<p>Tasks and resources are related by resource assignments. There is a method  available on the ProjectFile class which will retrieve all resource assignments in the file. This is used by the code fragment below to provide an overview of all assignments.</p> <pre><code>for (ResourceAssignment assignment : file.getAllResourceAssignments())\n{\nTask task = assignment.getTask();\nString taskName;\nif (task == null)\n{\ntaskName = \"(null task)\";\n}\nelse\n{\ntaskName = task.getName();\n}\n\nResource resource = assignment.getResource();\nString resourceName;\nif (resource == null)\n{\nresourceName = \"(null resource)\";\n}\nelse\n{\nresourceName = resource.getName();\n}\n\nSystem.out.println(\"Assignment: Task=\" + taskName + \" Resource=\" + resourceName);\n}\n</code></pre> <p>Resource assignments can also be retrieved on a task-by-task basis, as the code fragment below illustrates.</p> <pre><code>for (Task task : file.getAllTasks())\n{\nSystem.out.println(\"Assignments for task \" + task.getName() + \":\");\n\nfor (ResourceAssignment assignment : task.getResourceAssignments())\n{\nResource resource = assignment.getResource();\nString resourceName;\n\nif (resource == null)\n{\nresourceName = \"(null resource)\";\n}\nelse\n{\nresourceName = resource.getName();\n}\n\nSystem.out.println(\"   \" + resourceName);\n}\n}\n</code></pre> <p>Finally, resource assignments can be viewed on a resource-by-resource basis, as the following code fragment shows. </p> <pre><code>for (Resource resource : file.getAllResources())\n{\nSystem.out.println(\"Assignments for resource \" + resource.getName() + \":\");\n\nfor (ResourceAssignment assignment : resource.getTaskAssignments())\n{\nTask task = assignment.getTask();\nSystem.out.println(\"   \" + task.getName());\n}\n}\n</code></pre>"},{"location":"howto-start/#calendars","title":"Calendars","text":"<p>Calendars are used to define working and non-working time, and are one of the more complex structures defined as part of a project. They are in turn used to define the time period over which a task is scheduled. There are two types of calendar:  base calendars and resource calendars. Each base calendar provides a complete  definition of the working and non working time for each day of the week.  Resource calendars are associated with individual resources. Each resource  calendar is derived from a base calendar; resource calendars may be unmodified in which case it will appear to be identical to the underlying base calendar,  or the resource calendar may modify the working and non-working days. In this case these changes are \"overlaid\" on top of the working and non-working times defined by the base calendar. The calendars defined in a project can be retrieved using the method call shown below.</p> <pre><code>List&lt;ProjectCalendar&gt; calendars = file.getCalendars();\n</code></pre> <p>Normally a task without resource assignments will be scheduled with reference  to the \"Standard\" (default) calendar defined as part of the project. This is retrieved using the method calls shown below.</p> <pre><code>ProjectCalendar defaultCalendar = file.getDefaultCalendar();\n</code></pre> <p>It is also possible to associate a specific calendar with an individual task. The method call below shows the calendar associated with a task being retrieved.  </p> <pre><code>ProjectCalendar taskCalendar = task.getCalendar();\n</code></pre> <p>Bearing in mind that one calendar may be derived from another, care must be  taken when choosing the methods called on a calendar instance: some methods are used to retrieve attributes defined as part of that specific calendar only, while others are used to descend through the hierarchy of calendars until an \"actual\" value is retrieved. For example the getDays method will retrieve an array of flags indicating the working/non-working/default state of each day of the week as defined by the current calendar. The getDay method however will test the current calendar to see if it is a working or non-working day. If the  flag in the current calendar is set to \"default\", the method will use the base calendar from which the current calendar is derived to determine if the day is working or non-working.   </p> <p>As noted above a calendar contains a set of flags which represent  each day of the week, these  indicate the day of the week is working non-working, or \"default\". Where a day is set as \"default\", the working time for that day is taken from the underlying  base calendar, if it is a resource calendar, or uses the default values provided by Microsoft Project if it is a base calendar. </p> <p>If a particular day is defined as a working day, then the calendar will also contain a set of working hours for that day. The working hours for a day are defined by an instance of the ProjectCalendarHours class. This contains a  collection of <code>LocalTimeRange</code> instances which defined the start and end times of each working period during the day.</p> <p>Alongside the flags which control whether a day is working or non-working,  and the working hours for each day, each calendar defines a set of exceptions which are used to \"override\" the default working or non-working hours for individual days or entire date ranges. Methods are provided to allow a list of  all exceptions defined by a calendar can be retrieved, or to retrieve the exception which covers an individual date. Calendar exceptions are represented by  instances of the ProjectCalendarException class. </p>"},{"location":"howto-start/#timephased-data","title":"Timephased Data","text":"<p>Although resource assignments on their own describe which resources are assigned to which tasks, and how much work they are going to do, this does not necessarily tell us how much work a resource will be doing on any particular  date. In order to find this information, you will need to consult the timephased resource assignment data.</p> <p>Each resource assignment has a pair of methods allowing you to retrieve  timephased data, as shown by the example code below.</p> <pre><code>List&lt;TimephasedResourceAssignment&gt; planned = assignment.getTimephasedPlanned();\nList&lt;TimephasedResourceAssignment&gt; complete = assignment.getTimephasedComplete();\n</code></pre> <p>Timephased resource assignment data is represented by instances of the  TimephasedResourceAssignment class. This class is designed to provide a compact representation of the work carried out over ranges of days, rather than having to represent the work carried out on each individual day using a single class  instance per day. Each TimephasedResourceAssignment defines four attributes: a start date, an end date, a total amount of work, and an amount of work per day.</p> <p>For example, you may retrieve an instance of the TimephasedResourceAssignment class whose start and end date defines a five day period. The total work for the period is  40 hours, and the work per day is defined as 8 hours. This indicates  that for the period in question, on each working day within the date range, 8 hours of work will be carried out. It is important to remember that  non-working days are ignored, so for example if we have a 7 day period which  spans a weekend, the total work could still be 40 hours, and the work per day 8 hours: only the 5 working days are allocated work, the non-working weekend days have zero hours of work performed.   </p> <p>The two lists defined above will contain multiple  TimephasedResourceAssignment instances where different numbers of hours are  worked on different days. Each contiguous range of dates where the same number of hours are worked in a day will be represented by one TimephasedResourceAssignment instance.  </p> <p>The two lists of timephased data represent completed (actual) work, and planned work respectively. These lists may overlap by a single day if they are being used to show a partially completed day's work. For example, during a normal 8 hour working day, if 4 hours of work has been completed, and 4 hours remains, then the list of completed timephased data will end with 4 hours of work which have been completed,  and the planned work list will start with the 4 hours remaining on the same day.</p>"},{"location":"howto-use-calendars/","title":"How To: Use Calendars","text":"<p>Calendars are the foundation on which schedules are built. They determine when work can be carried out, and when work is not possible. Given some tasks we need to plan, and knowing how much work each task will require, a calendar can be used to decide when work on each task could start and how much elapsed time will be required to complete the tasks.</p>"},{"location":"howto-use-calendars/#calendars-in-mpxj","title":"Calendars in MPXJ","text":"<p>Let's see how calendars work in MPXJ. First let's try creating one. As it happens, the <code>ProjectFile</code> class provides a convenience method <code>addDefaultBaseCalendar</code> to create a default calendar. The calendar it creates is modelled on the <code>Standard</code> calendar you'd see in Microsoft Project if you created a new project. This default calendar defines Monday to Friday as working days, with 8 working hours each day (8am to noon, then 1pm to 5pm).</p> <pre><code>ProjectFile file = new ProjectFile();\nProjectCalendar calendar = file.addDefaultBaseCalendar();\nSystem.out.println(\"The calendar name is \" + calendar.getName());\n</code></pre> <p>As you can see from the code above, the calendar also has a name which we can set to distinguish between different calendars.</p>"},{"location":"howto-use-calendars/#working-days","title":"Working Days","text":"<p>Let's see what the calendar can tell us. First we'll use the <code>DayOfWeek</code> enumeration to retrieve the working/non-working state for each day.</p> <pre><code>for (DayOfWeek day : DayOfWeek.values()) {\nString dayType = calendar.getCalendarDayType(day).toString();\nSystem.out.println(day + \" is a \" + dayType + \" day\");\n}\n</code></pre> <p>Running the code shown above will produce output like this:</p> <pre><code>MONDAY is a WORKING day\nTUESDAY is a WORKING day\nWEDNESDAY is a WORKING day\nTHURSDAY is a WORKING day\nFRIDAY is a WORKING day\nSATURDAY is a NON_WORKING day\nSUNDAY is a NON_WORKING day\n</code></pre> <p>We can use the <code>setWorkingDay</code> method to change our pattern of working day. Let's make Saturday a working day for our team, and make Monday a non-working day to compensate.</p> <pre><code>calendar.setWorkingDay(DayOfWeek.SATURDAY, true);\ncalendar.setWorkingDay(DayOfWeek.MONDAY, false);\n</code></pre> <p>Now if we use the loop we saw previously to inspect the week days, we'll see this output:</p> <pre><code>MONDAY is a NON_WORKING day\nTUESDAY is a WORKING day\nWEDNESDAY is a WORKING day\nTHURSDAY is a WORKING day\nFRIDAY is a WORKING day\nSATURDAY is a WORKING day\nSUNDAY is a NON_WORKING day\n</code></pre>"},{"location":"howto-use-calendars/#working-hours","title":"Working Hours","text":"<p>So far, all we have done is set a flag which tells us whether a day is working or non-working. How do we know the working times on those days? We can use the <code>getCalendarHours</code> method to find that information.</p> <p>The <code>getCalendarHours</code> method returns a <code>List</code> of <code>LocalTimeRange</code> instances. <code>LocalTimeRange</code> is a simple immutable class which represents a span of time between a start time and an end time as an inclusive range. Let's try printing these <code>LocalTimeRange</code> instances to our output to see what we get:</p> <pre><code>List&lt;LocalTimeRange&gt; hours = calendar.getCalendarHours(Day.TUESDAY);\nhours.forEach(System.out::println);\n</code></pre> <p>Here's the output:</p> <pre><code>[LocalTimeRange start=08:00 end=12:00]\n[LocalTimeRange start=13:00 end=17:00]\n</code></pre> <p>Let's add a method to format the hours of a day a little more concisely for display:</p> <pre><code>private String formatLocalTimeRanges(List&lt;LocalTimeRange&gt; hours) {\nreturn hours.stream()\n.map(h -&gt; h.getStart() + \"-\" + h.getEnd())\n.collect(Collectors.joining(\", \"));\n}\n</code></pre> <p>So now our output looks like this:</p> <pre><code>08:00-12:00, 13:00-17:00\n</code></pre> <p>Let's use this method to take a look at the whole week again:</p> <pre><code>for (Day day : Day.values()) {\nString dayType = calendar.getCalendarDayType(day).toString();\nSystem.out.println(day\n+ \" is a \" + dayType + \" day (\"\n+ formatLocalTimeRanges(calendar.getCalendarHours(day)) + \")\");\n}\n</code></pre> <p>Here's the output:</p> <pre><code>MONDAY is a NON_WORKING day ()\nTUESDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nWEDNESDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nTHURSDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nFRIDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nSATURDAY is a WORKING day ()\nSUNDAY is a NON_WORKING day ()\n</code></pre> <p>The one thing we're missing now is that although we have set Saturday to be a working day, it doesn't have any working hours. MPXJ has some constants which can be used to help us add some working hours:</p> <pre><code>hours = calendar.getCalendarHours(Day.SATURDAY);\nhours.add(ProjectCalendarDays.DEFAULT_WORKING_MORNING);\nhours.add(ProjectCalendarDays.DEFAULT_WORKING_AFTERNOON);\n</code></pre> <p>Now when we examine our week this is what we see:</p> <pre><code>MONDAY is a NON_WORKING day ()\nTUESDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nWEDNESDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nTHURSDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nFRIDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nSATURDAY is a WORKING day (08:00-12:00, 13:00-17:00)\nSUNDAY is a NON_WORKING day ()\n</code></pre> <p>The version of MPXJ at the time of writing (12.0.0) has a limitation that if <code>setCalendarDayType</code> is used to make a day into a working day, we don't automatically add working hours for it. This behaviour is likely to change with the next major version of MPXJ.</p> <p>What if we want to supply some working hours different from the defaults we've used so far? To set our own working hours we just need to create as many <code>LocalTimeRange</code> instances as we need using a pair of <code>LocalTime</code> instances for each one to represent the start and end times.</p> <pre><code>LocalTime startTime = LocalTime.of(9, 0);\nLocalTime finishTime = LocalTime.of(14, 30);\nhours = calendar.getCalendarHours(DayOfWeek.SATURDAY);\nhours.clear();\nhours.add(new LocalTimeRange(startTime, finishTime));\n</code></pre> <p>Now when we look at the working hours for Saturday, this is what we see:</p> <pre><code>SATURDAY is a WORKING day (09:00-14:30)\n</code></pre> <p>Now we've seen how we can create our own ranges of working time for a day, let's tackle a slightly more challenging case: dealing with midnight. Our first step is to take a look at the actual amount of working time we've set up on Saturday. To do this we call the <code>getWork</code> method, as shown below.</p> <pre><code>Duration duration = calendar.getWork(Day.SATURDAY, TimeUnit.HOURS);\nSystem.out.println(duration);\n</code></pre> <p>This <code>getWork</code> method determines the total amount of work on the given day, and returns this in the format we specify. In this case we've asked for hours, and we'll be receiving the result as a <code>Duration</code> object. <code>Duration</code> simply combines the duration amount with an instance of the <code>TimeUnit</code> enumeration so we always know the units of the duration amount.</p> <p>Running the code above give us this output:</p> <pre><code>5.5h\n</code></pre> <p>As you can see, the <code>toString</code> method of <code>Duration</code> give us a nicely formatted result, complete with an abbreviation for the units.</p> <p>Let's try to change Saturday to be 24 hour working. First we'll configure a midnight to midnight date range:</p> <pre><code>startTime = LocalTime.MIDNIGHT;\nfinishTime = LocalTime.MIDNIGHT;\nhours.clear();\nhours.add(new LocalTimeRange(startTime, finishTime));\nSystem.out.println(formatLocalTimeRanges(calendar.getCalendarHours(DayOfWeek.SATURDAY)));\n</code></pre> <p>This looks reasonable:</p> <pre><code>00:00-00:00\n</code></pre> <p>Now let's see how much work this represents:</p> <pre><code>duration = calendar.getWork(DayOfWeek.SATURDAY, TimeUnit.HOURS);\nSystem.out.println(duration);\n</code></pre> <pre><code>24.0h\n</code></pre> <p>So we have our 24 hours of work on Saturday!</p>"},{"location":"howto-use-calendars/#exceptions","title":"Exceptions","text":"<p>After working a few of these 24 hour days on Saturdays, we might be in need of a vacation! How can we add this to our calendar?</p> <p>So far we've been working with the <code>DayOfWeek</code> class to make changes to days of the week, rather than any specific date. Now we'll need to work with a specific date, and add an \"exception\" for this date. The terminology here can be slightly confusing when coming from a programming background, but the term exception is often used by scheduling applications in the context of making ad-hoc adjustments to a calendar.</p> <pre><code>LocalDate exceptionDate = LocalDate.of(2022, 5, 10);\n\nboolean workingDate = calendar.isWorkingDate(exceptionDate);\nSystem.out.println(exceptionDate + \" is a \"\n+ (workingDate ? \"working\" : \"non-working\") + \" day\");\n</code></pre> <p>In the code above we're creating a <code>LocalDate</code> instance to represent the date we want to add an exception for. The code uses the <code>isWorkingDate</code> method to determine whether or not the  given date is a working day. Before we add the exception, here's the output we get:</p> <pre><code>2022-05-10 is a working day\n</code></pre> <p>Now we can create our exception.</p> <pre><code>ProjectCalendarException exception = calendar.addCalendarException(exceptionDate);\nexception.setName(\"A day off\");\n</code></pre> <p>The code above illustrates adding an exception for a single day. The code above also shows that optionally an exception can be named, this can make it easier to understand the purpose of each exception. Now if we re-run our code which displays whether our chosen date is a working day, this is what we see:</p> <pre><code>2022-05-10 is a non-working day\n</code></pre> <p>We have successfully added an exception to turn this date into a day off!</p> <p>Perhaps we were being a little too generous in giving ourselves the entire day off, perhaps in this case we should make this a half day instead. To do that, we just need to add a time range to the exception:</p> <pre><code>startTime = LocalTime.of(8, 0);\nfinishTime = LocalTime.of(12, 0);\nexception.add(new LocalTimeRange(startTime, finishTime));\n</code></pre> <p>Now if we look at our chosen date, this is what we see:</p> <pre><code>2022-05-10 is a working day\n</code></pre> <p>Let's take a closer look at what's happening on that day:</p> <pre><code>System.out.println(\"Working time on Tuesdays is normally \"\n+ calendar.getWork(DayOfWeek.TUESDAY, TimeUnit.HOURS) + \" but on \"\n+ exceptionDate + \" it is \"\n+ calendar.getWork(exceptionDate, TimeUnit.HOURS));\n</code></pre> <p>The code above shows how we use the <code>getWork</code> method which takes a <code>DayOfWeek</code> as an argument to look at what the default working hours are on a Tuesday, then we use the <code>getWork</code> method which takes a <code>LocalDate</code> instance as an argument to see what's happening on the specific Tuesday of our exception. Here's the output we get:</p> <pre><code>Working time on Tuesdays is normally 8.0h but on 2022-05-10 it is 4.0h\n</code></pre> <p>We can see the effect of adding a <code>LocalTimeRange</code> to our exception: we've gone from an exception which changes a working day into a non-working day to an exception which just changes the number of working hours in the day. This same approach can be used to change a date which falls on a day that's typically non-working (for example a Sunday) into a working day, just by adding an exception with some working hours.</p> <p>We can also use a single exception to affect a number of days. First let's write a little code to see the number of working hours over a range of days:</p> <pre><code>private void dateDump(ProjectCalendar calendar, LocalDate startDate, LocalDate endDate)\n{\nfor (LocalDate date = startDate; date.isBefore(endDate); date = date.plusDays(1)) {\nSystem.out.println(date + \"\\t\" + calendar.getWork(date, TimeUnit.HOURS));\n}\n}\n</code></pre> <p>Running this code with our calendar as its stands produces this output for the example week we're using:</p> <pre><code>2022-05-23  0.0h\n2022-05-24  8.0h\n2022-05-25  8.0h\n2022-05-26  8.0h\n2022-05-27  8.0h\n</code></pre> <p>Let's add an exception which covers Tuesday to Thursday that week (24th to 26th), and changes the working hours, so there are now only four hours of work per day (9am to 12pm):</p> <pre><code>LocalDate exceptionStartDate = LocalDate.of(2022, 5, 24);\nLocalDate exceptionEndDate = LocalDate.of(2022, 5, 26);\nexception = calendar.addCalendarException(exceptionStartDate, exceptionEndDate);\nstartTime = LocalTime.of(9, 0);\nfinishTime = LocalTime.of(13, 0);\nexception.add(new LocalTimeRange(startTime, finishTime));\n</code></pre> <p>Here we can see that we're using a different version of the <code>addCalendarException</code> method which takes a start and an end date, rather that just a single date. Running our code again to print out the working hours for each day now gives us this output:</p> <pre><code>2022-05-23  0.0h\n2022-05-24  4.0h\n2022-05-25  4.0h\n2022-05-26  4.0h\n2022-05-27  8.0h\n</code></pre> <p>As we can see, we've changed multiple days with this single exception.</p>"},{"location":"howto-use-calendars/#working-weeks","title":"Working Weeks","text":"<p>So far we've looked at using <code>ProjectCalendarException</code>, which can make one change (add working hours, change working hours, or make days non-working) and apply that change to one day or a contiguous range of days. What if we want to make more complex changes to the working pattern of a calendar?</p> <p>Let's imagine that our project has a three week \"crunch\" period at the beginning of October where we will need to work 16 hour days, Monday through Friday, and 8 hour days at weekends. (I hope this is a fictional example and you'd don't have to work at such a high intensity in real life!). We could construct this work pattern using exceptions: we'd need six in total, one for each of the three sets of weekend days, and one for each of the three sets of week days.</p> <p>An alternative way to do this is to set up a new working week, using the <code>ProjectCalendarWeek</code> class. \"Working Week\" is perhaps a slightly misleading name, as a <code>ProjectCalendarWeek</code> can be set up for an arbitrary range of dates, from a few days to many weeks. What it represents is the pattern of working an non-working time over the seven days of a week, and this pattern is applied from the start to the end of the date range we configure.</p> <p>The <code>ProjectCalendar</code> we've been working with so far is actually already a form of working week (they share a common parent class). The main differences between the two are that a <code>ProjectCalendarWeek</code> allows us to specify the range of dates over which it is effective, and a <code>ProjectCalendarWeek</code> does not have exceptions: exceptions are only added to a <code>ProjectCalendar</code>. </p> <p>For a fresh start, we'll create a new <code>ProjectCalendar</code> instance. With this we'll add a new working week definition and give it a name, to make it easily identifiable. Now we'll set the dates for which this work pattern is valid (in this case the first three weeks of October). Finally we mark every day as a working day. Here's how our example looks in code:</p> <pre><code>LocalDate weekStart = LocalDate.of(2022, 10, 1);\nLocalDate weekEnd = LocalDate.of(2022, 10, 21);\ncalendar = file.addDefaultBaseCalendar();\nProjectCalendarWeek week = calendar.addWorkWeek();\nweek.setName(\"Crunch Time!\");\nweek.setDateRange(new LocalDateRange(weekStart, weekEnd));\nArrays.stream(DayOfWeek.values()).forEach(d -&gt; week.setWorkingDay(d, true));\n</code></pre> <p>Next we can set up our weekend 9am to 5pm working pattern:</p> <pre><code>startTime = LocalTime.of(9, 0);\nfinishTime = LocalTime.of(17, 0);\nLocalTimeRange weekendHours = new LocalTimeRange(startTime, finishTime);\nArrays.asList(DayOfWeek.SATURDAY, DayOfWeek.SUNDAY)\n.stream().forEach(d -&gt; week.addCalendarHours(d).add(weekendHours));\n</code></pre> <p>Finally we can set up our weekday 5am to 9pm pattern:</p> <pre><code>startTime = LocalTime.of(5, 0);\nfinishTime = LocalTime.of(21, 0);\nLocalTimeRange weekdayHours = new LocalTimeRange(startTime, finishTime);\nArrays.asList(DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,\nDayOfWeek.THURSDAY, DayOfWeek.FRIDAY)\n.stream().forEach(d -&gt; week.addCalendarHours(d).add(weekdayHours));\n</code></pre> <p>As <code>ProjectCalendar</code> and <code>ProjectCalendarWeek</code> are both derived from the same parent class, we can use the same code we did previously to examine how our new <code>ProjectCalendarWeek</code> instance looks:</p> <pre><code>MONDAY is a WORKING day (05:00-21:00)\nTUESDAY is a WORKING day (05:00-21:00)\nWEDNESDAY is a WORKING day (05:00-21:00)\nTHURSDAY is a WORKING day (05:00-21:00)\nFRIDAY is a WORKING day (05:00-21:00)\nSATURDAY is a WORKING day (09:00-17:00)\nSUNDAY is a WORKING day (09:00-17:00)\n</code></pre> <p>To see the effect that our new working week has had on the calendar, let's first take a look at the week running up to the start of our crunch period. Using the same code we worked with previously to present working hours for a range of dates we see this output:</p> <pre><code>2022-09-24  0.0h\n2022-09-25  0.0h\n2022-09-26  8.0h\n2022-09-27  8.0h\n2022-09-28  8.0h\n2022-09-29  8.0h\n2022-09-30  8.0h\n</code></pre> <p>So starting from Saturday 24th we can see that we have that standard working pattern: weekends are non-working (zero working hours), and week days have 8 hours of working time.</p> <p>Now let's look at the first week of our crunch period:</p> <pre><code>2022-10-01  8.0h\n2022-10-02  8.0h\n2022-10-03  16.0h\n2022-10-04  16.0h\n2022-10-05  16.0h\n2022-10-06  16.0h\n2022-10-07  16.0h\n</code></pre> <p>We can see that the crunch is in full effect, we're working 8 hour days at the weekend, and 16 hour days for the rest of the week - not something I'd like to try for any length of time!</p> <p>To summarise: the <code>ProjectCalendar</code> instance itself defines the default working and non-working pattern for the seven week days. Additional working weeks can be added to the calendar which override this pattern for specific date ranges.</p>"},{"location":"howto-use-calendars/#recurring-exceptions","title":"Recurring Exceptions","text":"<p>So far we've seen how exceptions can be used to override the default working pattern established by a calendar for either a single day, or for a contiguous range of days. We've also seen how an entirely new seven-day working pattern can be applied across a range of dates by using working weeks. But what if we want to represent a regularly occurring exception which will change our default working pattern such as, for example, Christmas Day or Thanksgiving? To deal with this we can use recurring exceptions.</p> <p>A recurring exception can be created simply by passing an instance of <code>RecurringData</code> to the <code>addCalendarException</code> method.</p> <pre><code>RecurringData recurringData = new RecurringData();\nexception = calendar.addCalendarException(recurringData);\n</code></pre> <p>Let's create a simple recurence for 1st January for five years:</p> <pre><code>recurringData.setRecurrenceType(RecurrenceType.YEARLY);\nrecurringData.setOccurrences(5);\nrecurringData.setDayNumber(Integer.valueOf(1));\nrecurringData.setMonthNumber(Integer.valueOf(1));\nrecurringData.setStartDate(LocalDate.of(2023, 1, 1));\nSystem.out.println(recurringData);\n</code></pre> <p>The <code>toString</code> method on the <code>RecurringData</code> class tries to describe the recurrence as best it can, here's the output we'll see from the code above:</p> <pre><code>[RecurringData Yearly on the 1 January From 2023-01-01 For 5 occurrences]\n</code></pre> <p>The example above shows a very simple configuration. Full details of how to use <code>RecurringData</code> are provided elsewhere as they are beyond the scope of this section.</p> <p>Before we move on from recurring exceptions, one useful feature of the <code>ProjectCalendarException</code> class is the <code>getExpandedExceptions</code> method. This will convert a recurring exception into a list of individual exceptions representing each date or range of dates the recurring exception will affect the calendar. You may find this useful if you need to display or pass this data on for consumption elsewhere.</p>"},{"location":"howto-use-calendars/#calendar-hierarchies","title":"Calendar Hierarchies","text":"<p>Now we've seen how to set up an individual calendar, perhaps we could go ahead and create calendars for all of the people who will be working on our project? What we'd quickly find is that a considerable amount of the information in each calendar will be the same: the same working week pattern, the same public holidays and so on. We could set all of this up programmatically of course, but wouldn't it be great if we could change this kind of detail in just one place, and have all of our other calendars inherit it?</p>"},{"location":"howto-use-calendars/#creating-a-calendar-hierarchy","title":"Creating a Calendar Hierarchy","text":"<p>As it happens, we can do this as our calendars can be organised into a hierarchy, with each \"child\" calendar inheriting its configuration from a \"parent\" calendar and overriding that configuration as required rather like a class hierarchy in a programing language). This will allow us to have one shared \"base\" calendar for everyone, with derived calendars used for individuals on our team where we need to add variation, for example personal vacation time and so on.</p> <pre><code>ProjectFile file = new ProjectFile();\nProjectCalendar parentCalendar = file.addDefaultBaseCalendar();\nLocalDate christmasDay = LocalDate.of(2023, 12, 25);\nparentCalendar.addCalendarException(christmasDay);\n</code></pre> <p>In the example above we've used the familiar <code>addDefaultBaseCalendar</code> method to create a simple calendar, and called <code>addCalendarException</code> to add an exception for Christmas Day 2023.</p> <pre><code>ProjectCalendar childCalendar = file.addDefaultDerivedCalendar();\nchildCalendar.setParent(parentCalendar);\nSystem.out.println(christmasDay + \" is a working day: \"\n+ childCalendar.isWorkingDate(christmasDay));\n</code></pre> <p>Now we've created <code>childCalendar</code>, using a method we've not seen before, <code>addDefaultBaseCalendar</code> (we'll talk about this method in more detail in a minute), and we've used the new calendar's <code>setParent</code> method to attach <code>parentCalendar</code> as its parent. We can see the effect of this when we check to see if Christmas Day 2023 is a working day. This is a Monday so by default it will be a working day, but as <code>childCalendar</code> is inheriting from <code>parentCalendar</code> it picks up the exception defined in <code>parentCalendar</code> and makes Christmas Day a non-working day.</p> <p>Here's the output when our code is executed:</p> <pre><code>2023-12-25 is a working day: false\n</code></pre> <p>We can also do the same thing with day types:</p> <pre><code>parentCalendar.setCalendarDayType(DayOfWeek.TUESDAY, DayType.NON_WORKING);\nSystem.out.println(\"Is \" + DayOfWeek.TUESDAY + \" a working day: \" + childCalendar.isWorkingDay(DayOfWeek.TUESDAY));\n</code></pre> <p>In the example above we've set Tuesday to be a non-working day in the parent calendar, and we can see that this is inherited by the child calendar. Here's the output we see when we execute our code:</p> <pre><code>Is TUESDAY a working day: false\n</code></pre> <p>So what's special about the \"derived calendar\" we've just created (<code>childCalendar</code>), why is it different to the normal calendar, and what's the difference between the <code>addDefaultBaseCalendar</code> and <code>addDefaultDerivedCalendar</code> methods?</p> <p>The answer to this question lies in the <code>DayType</code> enumeration. Let's take a look at the day types for <code>parentCalendar</code>.</p> <pre><code>SUNDAY is a NON_WORKING day\nMONDAY is a WORKING day\nTUESDAY is a NON_WORKING day\nWEDNESDAY is a WORKING day\nTHURSDAY is a WORKING day\nFRIDAY is a WORKING day\nSATURDAY is a NON_WORKING day\n</code></pre> <p>So far so good, we have a mixture of working an non-working days, and we can see that as part of our last example we set Tuesday to be a non-working day. Now let's take a look at <code>childCalendar</code>:</p> <pre><code>SUNDAY is a DEFAULT day\nMONDAY is a DEFAULT day\nTUESDAY is a DEFAULT day\nWEDNESDAY is a DEFAULT day\nTHURSDAY is a DEFAULT day\nFRIDAY is a DEFAULT day\nSATURDAY is a DEFAULT day\n</code></pre> <p>Ah-ha! Here we can see that the <code>DayType</code> enumeration actually has a third value alongside <code>WORKING</code> and <code>NON_WORKING</code>: <code>DEFAULT</code>. The <code>DEFAULT</code> value simply means that we should inherit the parent calendar's settings for this particular day: so whether the day is working, non-working, what the working hours are, and so on.</p> <p>We can override the day type we're inheriting from the base calendar:</p> <pre><code>childCalendar.setCalendarDayType(DayOfWeek.TUESDAY, DayType.WORKING);\nLocalTime startTime = LocalTime.of(9, 0);\nLocalTime finishTime = LocalTime.of(12, 30);\nchildCalendar.addCalendarHours(DayOfWeek.TUESDAY).add(new LocalTimeRange(startTime, finishTime));\n</code></pre> <p>In the code above we're explicitly setting Tuesday to be a working day, rather than inheriting the settings for Tuesday from the parent calendar, then we're adding the working hours we want for Tuesday.</p> <p>Earlier we said we come back and look at the <code>addDefaultDerivedCalendar</code> method in a little more detail. The main difference between <code>addDefaultDerivedCalendar</code> and <code>addDefaultBaseCalendar</code> is that the calendar created by <code>addDefaultDerivedCalendar</code> has no working hours defined, and all day types are set to <code>DEFAULT</code> so everything is inherited from the parent calendar.</p>"},{"location":"howto-use-calendars/#working-with-a-calendar-hierarchy","title":"Working with a Calendar Hierarchy","text":"<p>In general when working with a calendar hierarchy, if we use a calendar to determine working/non-working time, working hours, and so on for a given date, anything configured in a child calendar will always override what we find in the parent calendar. So for example if we have exceptions or working weeks configured in a child calendar, these will override anything found in a parent calendar.</p> <p>If we're asking the calendar a question about a particular day (rather than a date), for example Monday, Tuesday and so on, we'll use information from the child calendar if the day type is <code>WORKING</code> or <code>NON_WORKING</code>, otherwise we'll work our way up the calendar hierarchy until we find the first ancestor calendar which does not specify the day type as <code>DEFAULT</code>, and we'll use the configuration for the day in question from that calendar.</p> <p>This brings us on to an interesting question: how do we know if we ask the calendar for a piece of information, whether that's come from the calendar whose method we've just called, or if the response we've received has come from another calendar somewhere further up the calendar hierarchy?</p> <p>As it happens there are only a small number of attributes for which this is relevant. These are summarised by the table below.</p> Attribute Set Get Get with Hierarchy Day Type <code>setCalendarDayType</code> <code>getCalendarDayType</code> <code>getDayType</code> Hours <code>addCalendarHours</code> <code>getCalendarHours</code> <code>getHours</code> Minutes Per Day <code>setCalendarMinutesPerDay</code> <code>getCalendarMinutesPerDay</code> <code>getMinutesPerDay</code> Minutes Per Week <code>setCalendarMinutesPerWeek</code> <code>getCalendarMinutesPerWeek</code> <code>getMinutesPerWeek</code> Minutes Per Month <code>setCalendarMinutesPerMonth</code> <code>getCalendarMinutesPerMonth</code> <code>getMinutesPerWeek</code> Minutes Per Year <code>setCalendarMinutesPerYear</code> <code>getCalendarMinutesPerYear</code> <code>getMinutesPerYear</code> <p>The first column give us the name of the attribute, and the second column give the name of the method we'd call to set that attribute for the current calendar. The third column gives us the name of the method we'd use to retrieve the attribute from the current calendar only (i.e this will ignore any parent calendars). Finally the last column gives us the name of the method we'd call to retrieve the attribute from the current calendar, or inherit that attribute from a parent calendar if it is not present in the current calendar.</p> <p>We haven't looked at the Minutes Per X attributes so far. The values they contain are used when calculating working time. One interesting  point to note is that if no calendars in a hierarchy define these values the default values will be retrieved from from the <code>ProjectFile</code> configuration, which is represented by the <code>ProjectConfig</code> class.</p>"},{"location":"howto-use-calendars/#how-deep-is-your-hierarchy","title":"How deep is your Hierarchy?","text":"<p>MPXJ will allow you to create an arbitrarily deep hierarchy of calendars if you wish by establishing parent-child relationships between the calendars you create. Most schedule application file formats will only support a limited hierarchy of calendars, which you will see when you read files of this type when using MPXJ. The notes below briefly outlines how calendar hierarchies operate in some of the applications MPXJ can work with.</p> <p>If you are using MPXJ to create or modify schedule data, when you write the results to a file MPXJ will attempt to ensure that the calendars it writes to the file format you have chosen reflect what the target application is expecting. This means that MPXJ may end up \"flattening\" or otherwise simplifying a set of calendars and their hierarchy to ensure that they are read correctly by the target application and are \"functionally equivalent\" in use.</p>"},{"location":"howto-use-calendars/#microsoft-project","title":"Microsoft Project","text":"<p>Microsoft Project uses two tiers of calendars. The first tier of calendars are referred to as \"base calendars\", one of which is marked as the default calendar for the project. Work is scheduled based on the default calendar, unless a task explicitly selects a different base calendar to use when being scheduled, or resources with their own calendars have been assigned to the task. Each resource will have its own calendar, which is always derived from a base calendar.</p> <p>Note that, as you might expect, material resources don't have a calendar!</p>"},{"location":"howto-use-calendars/#primavera-p6","title":"Primavera P6","text":"<p>The situation with P6 is a little more complicated, although it's still a two tier arrangement. P6 has the concept of Global calendars (broadly similar to base calendars in Microsoft Project). These can be assigned to activities in any project. Global calendars are never derived from other calendars.</p> <p>You can also have Project calendars which, as their name suggests, can only be assigned to activities in the project to which they belong. Project calendars can be derived from a Global Calendar, or they can have no parent calendar.</p> <p>Finally you can have two types of resource calendar: Shared, or Personal. These can either be derived from a Global calendar, or can have no parent. A Shared resource calendar can be assigned to multiple resources, but a Personal resource calendar can only be assigned to a single resource.</p> <p>When reading a P6 schedule, the <code>ProjectCalendar</code> method <code>getType</code> can be used to retrieve the calendar type (Global, Shared, or Personal), while the <code>getPersonal</code> method returns a Boolean flag indicating if the calendar is a Personal resource calendar.</p>"},{"location":"howto-use-calendars/#others","title":"Others","text":"<p>ConceptDraw, Planner, SureTrak and TurboProject all support some form of calendar hierarchy, although Planner is the only one which definitely supports an arbitrarily deep nested calendar structure.</p>"},{"location":"howto-use-calendars/#calendar-container","title":"Calendar Container","text":"<p>So far we've looked at creating and configuring calendars, and lining them together in a hierarchy. If we've just read a schedule in from a file, how can we examine the calendars it contains? Let's set up some calendars and take a look:</p> <pre><code>ProjectFile file = new ProjectFile();\nProjectCalendar calendar1 = file.addCalendar();\ncalendar1.setName(\"Calendar 1\");\n\nProjectCalendar calendar2 = file.addCalendar();\ncalendar2.setName(\"Calendar 2\");\n\nProjectCalendar calendar3 = file.addCalendar();\ncalendar2.setName(\"Calendar 3\");\n</code></pre> <p>Our sample code above creates three calendars, each with a distinct name. To see what calendars our file contains we can use the <code>ProjectFile</code> method <code>getCalendars</code>:</p> <pre><code>file.getCalendars().forEach(c -&gt; System.out.println(c.getName()));\n</code></pre> <p>Which gives us the following output, as we'd expect:</p> <pre><code>Calendar 1\nCalendar 2\nCalendar 3\n</code></pre> <p>The <code>getCalendars</code> method returns an object which implements the <code>List&lt;ProjectCalendar&gt;</code> interface, but it also does more for us than just that. The actual object being returned is a <code>ProjectCalendarContainer</code>, which is in charge of managing the calendars in the file and making it easy to access them.</p> <p>The typical way this is done is through the use of the calendar's Unique ID attribute. Each calendar has an <code>Integer</code> Unique ID, typically this is read as part of the calendar information from a schedule file, or if you are creating a schedule yourself, the default is for the Unique ID to be automatically populated. Let's see:</p> <pre><code>file.getCalendars().forEach(c -&gt; System.out.println(c.getName() + \" (Unique ID: \" + c.getUniqueID() + \")\"));\n</code></pre> <p>Here's what we get:</p> <pre><code>Calendar 1 (Unique ID: 1)\nCalendar 2 (Unique ID: 2)\nCalendar 3 (Unique ID: 3)\n</code></pre> <p>Let's use a Unique ID to retrieve a calendar:</p> <pre><code>ProjectCalendar calendar = file.getCalendars().getByUniqueID(2);\nSystem.out.println(calendar.getName());\n</code></pre> <p>Here's the result of running this code:</p> <pre><code>Calendar 2\n</code></pre> <p>The <code>ProjectCalendarContainer</code> class also allows us to retrieve calendars by name, although that's not recommended as MPXJ doesn't enforce presence or uniqueness constraints on calendar names.</p> <p>Most of the time accessing a calendar from some other part of MPXJ is handled for you, for example to retrieve a resource's calendar you just need to call the <code>Resource</code> method <code>getCalendar</code> rather than having to use <code>ProjectCalendarContainer</code> to retrieve it by Unique ID.</p>"},{"location":"howto-use-calendars/#calendar-relationships","title":"Calendar Relationships","text":"<p>The <code>ProjectCalendar</code> class provides a variety of methods to allow us to explore how it relates to other calendars and the rest of the schedule.</p> <p>As we've been discussing the hierarchy of calendars, the first method we can try is <code>isDerived</code>, which will return <code>true</code> if this calendar has been derived from a parent calendar. Alongside this we can also use the <code>getParent</code> method to  retrieve this calendar's parent. We can traverse a hierarchy of calendars using this method until <code>getParent</code> returns <code>null</code> at which point we know we have reached a \"base\" calendar and can go no further.</p> <p>Calendars can also be assigned to both Tasks and Resources. The <code>getTasks</code> and <code>getResources</code> methods will each retrieve a list of the tasks and resources which explicitly use this calendar.</p> <p>Finally, earlier in this section we mentioned the idea of the default calendar for a project. We can set or retrieve the default calendar using the <code>ProjectFile</code> methods <code>setDefaultCalendar</code> and <code>getDefaultCalendar</code>, as illustrated below.</p> <pre><code>ProjectFile file = new ProjectFile();\nProjectCalendar calendar = file.addDefaultBaseCalendar();\nfile.setDefaultCalendar(calendar);\nSystem.out.println(\"The default calendar name is \"\n+ file.getDefaultCalendar().getName());\n</code></pre> <p>As the name suggests, the default calendar will be used for all date, time, duration and work calculations if no other calendar has been assigned explicitly.</p>"},{"location":"howto-use-external-projects/","title":"How To: Use External Projects","text":"<p>From a schedule in Microsoft Project you can work with data from other project files in three ways: Subprojects, External Predecessors, and Resource Pools.</p>"},{"location":"howto-use-external-projects/#subprojects","title":"Subprojects","text":"<p>Microsoft Project allows you to manage larger projects by breaking them down into Subprojects. From one MPP file, a link can be added to another MPP file forming a parent-child relationship. The child MPP file will appear as a summary task in the location you've selected within the parent file. When this summary task is expanded the tasks from the child MPP file will appear seamlessly as tasks in the parent file.</p>"},{"location":"howto-use-external-projects/#identifying-subproject-tasks","title":"Identifying Subproject Tasks","text":"<p>If you use MPXJ to read an MPP file that contains a Subproject, initially you won't see anything different to a file which just contains ordinary tasks: the Subproject will just appear as a normal summary task whose attributes will roll up the details from the Subproject. If you want you can just work with the task as-is, you only need to so something different if you want to work with the contents of the Subproject.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.Task;\nimport net.sf.mpxj.reader.UniversalProjectReader;\n\n...\n\nProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nfor (Task task : file.getTasks())\n{\nif (task.getExternalProject())\n{\nSystem.out.println(task.getName() + \" is a subproject\");\nSystem.out.println(\"Path to the file is: \" +\ntask.getSubprojectFile());\nSystem.out.println(\"GUID of this project is: \" +\ntask.getSubprojectGUID());\nSystem.out.println(\"Offset used when displaying Unique ID values is: \" +\ntask.getSubprojectTasksUniqueIDOffset());\n}\n}\n</code></pre> <p>The example above illustrates how we can identify a Subproject using a task's External Project attribute. Once we have identified that we have a Subproject we can determine where the file is located, using the Subproject File  attribute, and the GUID of this project, using the Subproject GUID attribute.</p> <p>The last attribute we're looking at in this example is the Subproject Tasks Unique ID Offset. When Microsoft Project provides a combined view of two or more MPP files using Subprojects, one issue is that the Unique ID values in each project will no longer be unique. To get around this problem Microsoft Project adds an offset to the Unique ID values of the tasks it displays from each Subproject to ensure that each one has a distinct value. This offset is the value we're retrieving using the <code>getSubprojectTasksUniqueIDOffset</code> method.</p>"},{"location":"howto-use-external-projects/#reading-subproject-data","title":"Reading Subproject Data","text":"<p>If you wish, you can use <code>UniversalProjectReader</code> directly to load the external project, as the example below illustrates:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nTask externalProjectTask = file.getTaskByID(Integer.valueOf(1));\nString filePath = externalProjectTask.getSubprojectFile();\nProjectFile externalProjectFile = new UniversalProjectReader().read(filePath);\n</code></pre> <p>The code above assumes that the file is located on a readable filesystem at the exact path specified by the Subproject File attribute.</p> <p>Note that these examples assume that the file is on a filesystem which is directly readable. For MPP files exported from Project Server, it is likely that the path to an external project will be in the form <code>&lt;&gt;\\FileName</code> which represents a project hosted by Project Server. MPXJ cannot open this type of external project.</p> <p>An alternative to writing your own code to do this would be to use the method provided by MPXJ, as illustrated below:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nTask externalProjectTask = file.getTaskByID(Integer.valueOf(1));\nProjectFile externalProjectFile = externalProjectTask.getSubprojectObject();\n</code></pre> <p>The advantage of this approach, apart from using less code, is that MPXJ will attempt to find the file in locations other than the full path provided in Subproject File. By default the other place MPXJ will look is in the working directory of the current process, however this behaviour can be configured as the example below illustrates:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nfile.getProjectConfig().setSubprojectWorkingDirectory(new File(\"/path/to/dir\"));\nTask externalProjectTask = file.getTaskByID(Integer.valueOf(1));\nProjectFile externalProjectFile = externalProjectTask.getSubprojectObject();\n</code></pre> <p>In the code above we're calling the <code>setSubprojectWorkingDirectory</code> method to give MPXJ details of a directory to look in when attempting to read an external project.</p> <p>Note that if MPXJ can't load the external project for any reason, the <code>getSubprojectObject</code> method will return <code>null</code>.</p>"},{"location":"howto-use-external-projects/#expanding-subproject-data","title":"Expanding Subproject Data","text":"<p>In Microsoft Project, when a Subproject task is expanded it behaves just like any other summary task by revealing the child tasks it contains. We can reproduce this behavior using the code shown in the sample below:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nTask externalProjectTask = file.getTaskByID(Integer.valueOf(1));\nSystem.out.println(\"Has child tasks? \" + externalProjectTask.hasChildTasks());\nexternalProjectTask.expandSubproject();\nSystem.out.println(\"Has child tasks? \" + externalProjectTask.hasChildTasks());\n</code></pre> <p>The <code>expandSubproject</code> method attempts to open the external project, and if successful attaches the tasks from the external project as children of the external project task. You are then able to access the tasks from the parent project along with the tasks from the external project as part of the same MPXJ ProjectFile instance.</p> <p>Note that when using the <code>expandSubproject</code> method, the <code>setSubprojectWorkingDirectory</code> method on <code>ProjectConfig</code> can be  used to tell MPXJ where to find the external projects in the same way we did when using the <code>getSubprojectObject</code> method.</p> <p>You can also do this globally and expand all Subproject tasks in a project by using the <code>expandSubprojects</code> method on the project file itself:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nfile.expandSubprojects();\n</code></pre>"},{"location":"howto-use-external-projects/#external-predecessors","title":"External Predecessors","text":"<p>The second way an external project can be referenced in a Microsoft Project schedule is through the use of an external predecessor task. Project allows you to enter the task ID for a predecessor in the form <code>myproject.mpp\\123</code> which selects the task with ID <code>123</code> in <code>myproject.mpp</code> as the predecessor of the task in the schedule you are working on.</p> <p>When you use an external predecessor task like this, Project includes a \"placeholder\" task in your current schedule which represents the task in the external project and has a copy of all of the relevant attributes of the task from the external project. In many cases this placeholder task is all you need to work with the schedule.</p> <p>When you are working with MPXJ, how can you identify that you are looking at a placeholder task representing an external predecessor? The sample code below illustrates this:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nfor (Task task : file.getTasks())\n{\nif (task.getExternalTask())\n{\nSystem.out.println(task.getName() + \" is an external predecessor\");\nSystem.out.println(\"The path to the file containing this task is: \"\n+ task.getSubprojectFile());\nSystem.out.println(\"The ID of the task in this file is: \"\n+ task.getSubprojectTaskID());\nSystem.out.println(\"The Unique ID of the task in this file is: \"\n+ task.getSubprojectTaskUniqueID());\n}\n}\n</code></pre> <p>As the code above illustrates, if the <code>getExternalTask</code> method return true, the task is an external predecessor. As illustrated by the code there are three relevant attributes: Subproject File (the location of the external project this predecessor belongs to), and the Subproject Task ID and Subproject Task Unique ID which are the ID and Unique ID of the task in the schedule it comes from.</p> <p>As with a task representing an external project, you can retrieve the project for an external predecessor task using the <code>getSubprojectObject</code> method. Note however that the <code>expandSubproject</code> method will have no effect as the external predecessor task does not represent an entire project!</p>"},{"location":"howto-use-external-projects/#resource-pools","title":"Resource Pools","text":"<p>The final way an external project can be used from a Microsoft Project schedule is as a resource pool. A resource pool schedule allows you to capture details of all of your organisation's resources in one place, then refer to them from multiple schedules. Setting up a resource pool like this should ensure that your resource utilisation across different projects is accurately captured as the utilisation detail in the resource pool is updated by the projects using those resources.</p> <p>The full path for a project's resource pool can be retrieved using the <code>getResourcePoolFile</code> method as illustrated below:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nString path = file.getProjectProperties().getResourcePoolFile();\n</code></pre> <p>In a similar manner to the other external project examples given in previous sections, MPXJ can also open and read the resource pool file for you:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"sample.mpp\");\nProjectFile resourcePool = file.getProjectProperties().getResourcePoolObject();\n</code></pre>"},{"location":"howto-use-external-projects/#mspdi-files","title":"MSPDI Files","text":"<p>Much of the detail noted above is also applicable to MSPDI files, but with the following exceptions:</p> <ul> <li>Where the MSPDI file contains a Subproject, only the Subproject File attribute   will be populated, the Subproject GUID add Subproject Tasks Unique ID Offset   will not be available.</li> <li>If an MSPDI file has been saved in Microsoft Project from an MPP file which   contains Subprojects, and those Subprojects were expanded at the point the   file was exported, the MSPDI file will actually contain the data for the   Subproject as well as the main project. MPXJ will automatically read this   data, which you can access using the <code>getSubprojectObject</code>   method on the task, or you can call the <code>expandSubproject</code> or   <code>expandSubprojects</code> methods documented in the previous sections to show the   tasks contained in the Subproject as part of the main project.</li> <li>Where the original MPP file contained an external task predecessor, the   equivalent MSPDI file will not contain a placeholder task for the predecessor.   MPXJ will generate one for you, but this will contain none of the attributes   you would find if you read the MPP file using MPXJ.</li> <li>MSPDI files do not contain any references to resource pools.</li> </ul> <p>Note that although Microsoft Project will write external predecessor information to an MSPDI file, it will fail to load these correctly when the MSPDI file is reopened.</p>"},{"location":"howto-use-fields/","title":"How To: Use Fields","text":"<p>Once you've read a schedule using MPXJ, and you have a <code>ProjectFile</code> instance with tasks, resources and resource assignments, how do you access the data represented as fields in each of these entities? If you're creating or updating a schedule, how can you assign values to fields? This section explains the different approaches you can take in each of these cases.</p>"},{"location":"howto-use-fields/#setter-and-getter-methods","title":"Setter and Getter Methods","text":"<p>Let's start by creating a task we can use to demonstrate some of these approaches:</p> <pre><code>ProjectFile file = new ProjectFile();\nTask task = file.addTask();\n</code></pre> <p>When you already know exactly which field you need to access, you can work with  the data these fields contain in a type-safe way by using the setter and getter methods provided by each class, for example:</p> <pre><code>task.setName(\"Task 1\");\n\nString name = task.getName();\nSystem.out.println(\"Task name: \" + name);\n</code></pre> <p>Here's the output from the sample code:</p> <pre><code>Task name: Task 1\n</code></pre> <p>Here we can see that we are able to set the name of the task using a <code>String</code>, and when we call the getter method we'll be returned the name as a <code>String</code>. How about working with a field that has a type other than a String?</p> <pre><code>LocalDateTime startDate = LocalDateTime.of(2022, 5, 10, 8, 0);\ntask.setStart(startDate);\n\nSystem.out.println(\"Start date: \" + task.getStart());\n</code></pre> <p>Here's the output from the sample code:</p> <pre><code>Start date: 2022-05-10T08:00\n</code></pre> <p>We're setting and retrieving the task's start date using a <code>LocalDateTime</code> instance. For almost all of the fields supported by tasks, resources, and resource assignments you'll find a pair of getter and setter methods allowing you to access and modify the field with a convenient type safe interface.</p>"},{"location":"howto-use-fields/#field-enumerations","title":"Field Enumerations","text":"<p>What if we don't know ahead of time which fields we need to access? For example, what if our application allows users to choose which fields to display for each task? In this case we can use a data-driven approach to read and write fields, as shown in the example below.</p> <pre><code>task = file.addTask();\ntask.set(TaskField.NAME, \"Task 2\");\n\nname = (String)task.get(TaskField.NAME);\nSystem.out.println(\"Task name: \" + name);\n\nstartDate = LocalDateTime.of(2022, 5, 11, 8, 0);\ntask.set(TaskField.START, startDate);\n\nSystem.out.println(\"Start date: \" + task.getStart());\n</code></pre> <p>Here's the output from this sample code:</p> <pre><code>Task name: Task 2\nStart date: 2022-05-11T08:00\n</code></pre> <p>What are the <code>TaskField</code> values in the example above? <code>TaskField</code> is an enumeration representing all of the fields of a <code>Task</code> instance. This type of enumeration is not unique to tasks, there are four main enumerations available:</p> <ul> <li><code>ProjectField</code>: fields available from <code>ProjectProperties</code></li> <li><code>ResourceField</code>: fields available from a <code>Resource</code> </li> <li><code>TaskField</code>: fields available from a <code>Task</code></li> <li><code>AssignmentField</code>: fields available from a <code>ResourceAssignment</code></li> </ul> <p>The <code>ProjectProperties</code>, <code>Resource</code>, <code>Task</code> and <code>ResourceAssignment</code> classes noted above actually all implement the <code>FieldContainer</code> interface. This is the interface that gives us the <code>get</code> and <code>set</code> methods we've seen in the examples above. <code>FieldContainer</code> also provides us with one more interesting method: <code>getCachedValue</code>. What is this, and why is it different to the <code>get</code> method? Let's take a step back and look at calculated values to understand where <code>getCachedValue</code> fits in.</p>"},{"location":"howto-use-fields/#calculated-fields","title":"Calculated Fields","text":"<p>Some of the fields available from each of these classes can actually contain a calculated value. For example: the <code>Task</code> field \"Start Variance\" represents the difference between the Baseline Start date and the Start date of a task. Some schedules may provide this value for us when we read the data they contain, others may not. If we don't have this value when we read our schedule data, but we do have a Baseline Start and Start date available to us, then we can perform the calculation ourselves to produce the Start Variance value. The example below illustrates this:</p> <pre><code>// Set up the sample project\nProjectFile file = new ProjectFile();\n\n// We need at least a default calendar to calculate variance\nfile.setDefaultCalendar(file.addDefaultBaseCalendar());\n\n// Create tasks\nTask task1 = file.addTask();\nTask task2 = file.addTask();\n\n// Set up example dates\nLocalDateTime baselineStart = LocalDateTime.of(2022, 5, 1, 8, 0);\nLocalDateTime startDate = LocalDateTime.of(2022,5, 10, 8, 0);\n\n// Update task1 using methods\ntask1.setStart(startDate);\ntask1.setBaselineStart(baselineStart);\n\n// Update task2 using TaskField enumeration\ntask2.set(TaskField.START, startDate);\ntask2.set(TaskField.BASELINE_START, baselineStart);\n\n// Show the variance being retrieved by method and TaskField enumeration\nSystem.out.println(\"Task 1\");\nSystem.out.println(\"Start Variance from method: \"\n+ task1.getStartVariance());\nSystem.out.println(\"Start Variance from get: \"\n+ task1.get(TaskField.START_VARIANCE));\nSystem.out.println();\n\nSystem.out.println(\"Task 2\");\nSystem.out.println(\"Start Variance from method: \"\n+ task2.getStartVariance());\nSystem.out.println(\"Start Variance from get: \"\n+ task2.get(TaskField.START_VARIANCE));\n</code></pre> <p>Here's the output from running this code:</p> <pre><code>Task 1\nStart Variance from method: 6.0d\nStart Variance from get: 6.0d\n\nTask 2\nStart Variance from method: 6.0d\nStart Variance from get: 6.0d\n</code></pre> <p>Regardless of how we set up the data, both the <code>getStartVariance</code> method and the call to <code>get(TaskField.START_VARIANCE)</code> trigger the calculation and produce the expected Start Variance value.</p> <p>Rather than immediately discarding the Start Variance value we've just calculated, this value is cached as part of the data held by the task, and will be returned next time we use the <code>getStartVariance</code> method or we call <code>get(TaskField.START_VARIANCE)</code>.</p>"},{"location":"howto-use-fields/#cached-values","title":"Cached Values","text":"<p>The <code>getCachedValue</code> method allows us to retrieve a field without attempting to calculate a value. It's not a method you'd normally expect to use, but it's worth mentioning for completeness. Let's take a look at this using a new example:</p> <pre><code>// Set up the sample project with a default calendar\nProjectFile file = new ProjectFile();\nfile.setDefaultCalendar(file.addDefaultBaseCalendar());\n\n// Set up example dates\nLocalDateTime baselineStart = LocalDateTime.of(2022, 5, 1, 8, 0);\nLocalDateTime startDate = LocalDateTime.of(2022,5, 10, 8, 0);\n\n// Create a task\nTask task = file.addTask();\ntask.setStart(startDate);\ntask.setBaselineStart(baselineStart);\n\nSystem.out.println(\"Start Variance using getCachedValue(): \" + task.getCachedValue(TaskField.START_VARIANCE));\nSystem.out.println(\"Start Variance using get(): \" + task.get(TaskField.START_VARIANCE));\nSystem.out.println(\"Start Variance using getCachedValue(): \" + task.getCachedValue(TaskField.START_VARIANCE));\n</code></pre> <p>The output from this code is:</p> <pre><code>Start Variance using getCachedValue(): null\nStart Variance using get(): 6.0d\nStart Variance using getCachedValue(): 6.0d\n</code></pre> <p>What we can see happening here is that using the <code>getCachedValue</code> method initially returns <code>null</code> as the Start Variance is not present, and MPXJ doesn't attempt to calculate it. When we use the <code>get</code> method, MPXJ sees that it doesn't have a value for this field and knows how to calculate it, and returns the expected result. Finally if we use the <code>getCachedValue</code> method again, as we've now calculated this value and cached it, the method returns the Start Variance.</p> <p>In summary, <code>getCachedValue</code> will never attempt to calculate values for fields which are not already present. This can be useful if you want to read a schedule using MPXJ, but retrieve only the fields which were in the original schedule, not calculated or inferred by MPXJ.</p>"},{"location":"howto-use-fields/#fieldtype","title":"FieldType","text":"<p>Earlier in this section we noted that there were four main enumerations representing the fields which particular classes can contain.</p> <ul> <li><code>ProjectField</code></li> <li><code>ResourceField</code></li> <li><code>TaskField</code></li> <li><code>AssignmentField</code></li> </ul> <p>What I didn't mention then is that each of these enumerations implements the <code>FieldType</code> interface which defines a common set of methods for each of these enumerations. The most interesting of these methods are:</p> <ul> <li><code>name()</code></li> <li><code>getName()</code></li> <li><code>getFieldTypeClass()</code></li> <li><code>getDataType()</code></li> </ul> <p>The <code>name()</code> method retrieves the name of the enumeration value exactly as it appears in the code. The <code>getName()</code> method returns a localized version of the name, suitable for display to end users (currently English is the default and only supported locale).</p> <p>The <code>getFieldTypeClass()</code> method returns a value from the <code>FieldTypeClass</code> enumeration which will help you to determine which kind of object this <code>FieldType</code> belongs to (for example task, resource, and so on). Finally the <code>getDataType()</code> method will return a value from the <code>DataType</code> enumeration which indicates the data type you will receive from the <code>get</code> method when accessing this field, and the type to pass to the <code>set</code> method when updating the field.</p> <p>Here's some example code to make this a little clearer:</p> <pre><code>FieldType type = TaskField.START_VARIANCE;\n\nSystem.out.println(\"name(): \" + type.name());\nSystem.out.println(\"getName(): \" + type.getName());\nSystem.out.println(\"getFieldTypeClass(): \" + type.getFieldTypeClass());\nSystem.out.println(\"getDataType():\" + type.getDataType());\n</code></pre> <p>In this case we're using the Task Start Variance field as an example. Here's the output:</p> <pre><code>name(): START_VARIANCE\ngetName(): Start Variance\ngetFieldTypeClass(): TASK\ngetDataType(): DURATION\n</code></pre> <p>Returning to our earlier example of how we might allow a user to select  fields we will display, we can use the data type of the selected field to determine how we format the value for display.</p> <pre><code>private String getValueAsText(FieldContainer container, FieldType type)\n{\nObject value = container.get(type);\nif (value == null)\n{\nreturn \"\";\n}\n\nString result;\nswitch (type.getDataType())\n{\ncase CURRENCY:\n{\nresult = new DecimalFormat(\"\u00a30.00\").format(value);\nbreak;\n}\n\ncase DATE:\n{\nresult = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\").format((LocalDateTime)value);\nbreak;\n}\n\ncase BOOLEAN:\n{\nresult = ((Boolean)value).booleanValue() ? \"Yes\" : \"No\";\nbreak;\n}\n\ndefault:\n{\nresult = value.toString();\nbreak;\n}\n}\n\nreturn result;\n}\n</code></pre> <p>The sample code above implements a generic method which can work with any class implementing the <code>FieldContainer</code> interface (for example, <code>Task</code>, <code>Resource</code> and so on). Given the particular field the user has asked us to display (passed in via the <code>type</code> argument), we retrieve the value from the container as an <code>Object</code>, then use the data type to decide how best to format the value for display. (This is obviously a contrived example - I wouldn't recommend creating new instances of <code>DecimalFormat</code> and <code>DateTimeFormatter</code> each time you need to format a value!)</p>"},{"location":"howto-use-fields/#custom-fields","title":"Custom Fields","text":"<p>So far we've seen how simple fields like Name and Start can be accessed and modified using both field-specific and generic methods. Name and Start are examples of standard fields which might be provided and managed by schedule applications, and have a well understood meaning. What if we have some additional data we want to capture in our schedule, but that data doesn't fit into any of these standard fields?</p> <p>Microsoft Project's solution to this problem is Custom Fields. By default Microsoft Project provides a number of general purpose fields with names like \"Text 1\", \"Text 2\", \"Date 1\", \"Date 2\" and so on, which can be used to relevant vales as part of the schedule. If we look for methods like <code>setText1</code> or <code>setDate1</code> we won't find them, so how can we work with these fields?</p> <p>The answer is quite straightforward, for each of these custom fields you'll find getter and setter methods which take an integer value, for example:</p> <pre><code>task.setText(1, \"This is Text 1\");\nString text1 = task.getText(1);\nSystem.out.println(\"Text 1 is: \" + text1);\n</code></pre> <p>If you're working with the generic <code>get</code> and <code>set</code> methods, the situation is more straightforward as each individual field has its own enumeration, as  shown below:</p> <pre><code>task.set(TaskField.TEXT1, \"This is also Text 1\");\ntext1 = (String)task.get(TaskField.TEXT1);\nSystem.out.println(\"Text 1 is: \" + text1);\n</code></pre> <p>For <code>Task</code>, <code>Resource</code> and <code>ResourceAssignment</code> the following custom fields are available for use:</p> <ul> <li>Cost 1-10</li> <li>Date 1-10</li> <li>Duration 1-10</li> <li>Flag 1-20</li> <li>Finish 1-10</li> <li>Number 1-20</li> <li>Start 1-10</li> <li>Text 1-30</li> <li>Outline Code 1-10 (<code>Task</code> and <code>Resource</code> only)</li> </ul> <p>Microsoft Project allows users to configure custom fields. This facility can be used to do something as simple as provide an alias for the field, allowing it to be displayed with a meaningful name rather than something like \"Text 1\" or \"Date 1\". Alternatively there are more complex configurations available, for example constraining the values that can be entered for a field by using a lookup table, or providing a mask to enforce a particular format.</p> <p>Information about custom field configurations can be obtained from the <code>CustomFieldsContainer</code>. The sample code below provides a simple illustration of how we can query this data.</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"example.mpp\");\n\nCustomFieldContainer container = file.getCustomFields();\nfor (CustomField field : container)\n{\nFieldType type = field.getFieldType();\nString typeClass = type.getFieldTypeClass().toString();\nString typeName = type.name();\nString alias = field.getAlias();\nSystem.out.println(typeClass + \".\" + typeName + \"\\t\" + alias);\n}\n</code></pre> <p>Depending on how the custom fields in your schedule are configured, you'll see output like this:</p> <pre><code>TASK.TEXT1      Change Request Reason\nTASK.NUMBER1    Number of Widgets Required\nRESOURCE.DATE1  Significant Date\n</code></pre> <p>In the source above, the first thing we're retrieving from each <code>CustomField</code> instance is the <code>FieldType</code>, which identifies the field we're configuring. The values we retrieve here will be from one of the enumerations we've touched on previously in this section, for example <code>TaskField</code>, <code>ResourceField</code> and so on.</p> <p>The next thing we're doing in our sample code is to create a representation of the parent type to which this field belongs, followed by the name of the field itself (this is what's providing us with the value <code>TASK.TEXT1</code> for example). Finally we're displaying the alias which has been set by the user for this field.</p> <p>It's important to note that for schedules from Microsoft Project, there won't necessarily be a <code>CustomField</code> entry for all of the custom fields in use in a schedule. For example, if a user has added values to the \"Text 1\" field for each of the tasks in their schedule, but have not configured Text 1 in some way (for example by setting an alias or adding a lookup table) there won't be an entry for \"Text 1\" in the <code>CustomFieldContainer</code>.</p> <p>As well as iterating through the collection of <code>CustomField</code> instances for the current schedule, you can directly request the <code>CustomField</code> instance for a specific field, as shown below:</p> <pre><code>CustomField fieldConfiguration = container.get(TaskField.TEXT1);\n</code></pre> <p>One common use-case for the configuration data help in <code>CustomFieldContainer</code> is to locate particular information you are expecting to find in the schedule. For example, let's say that you know that the schedule you're reading should have a field on each task which users have named \"Number of Widgets Required\", and you want to read that data. You can determine which field you need by using a method call similar to the one shown below:</p> <pre><code>FieldType fieldType = container.getFieldTypeByAlias(\nFieldTypeClass.TASK,\n\"Number of Widgets Required\");\n</code></pre> <p>Note that the first argument we need to pass identifies which parent entity we're expecting to find the field in. The <code>CustomFieldContainer</code> will have entries from all field containers (tasks, resources, resource assignments and so on) so this is used to locate the correct one - particularly useful if, for example, a task and a resource might both have a field with the same alias! Remember: this method will return <code>null</code> if we don't have a field with the alias you've provided.</p> <p>Once we have the <code>FieldType</code> of the field we're looking for,  we can use this to retrieve the value using the <code>get</code> method as we've seen earlier in this section:</p> <pre><code>Task task = file.getTaskByID(Integer.valueOf(1));\nObject value = task.get(fieldType);\n</code></pre> <p>Finally, there are a couple of convenience methods to make retrieving a field by its alias easier. The first is that each \"container\" class for the various entities also provides a <code>getFieldTypeByAlias</code> method. If you know ahead of time you're looking for a field in a particular entity, this will simplify your code somewhat. The example below illustrates this: as we're looking for a task field we can go straight to the <code>TaskContainer</code> and ask for the field with the alias we're looking for:</p> <pre><code>fieldType = file.getTasks().getFieldTypeByAlias(\"Number of Widgets Required\");\n</code></pre> <p>Lastly, you can actually retrieve the value of a field directly from the parent entity using its alias, as shown below:</p> <pre><code>value = task.getFieldByAlias(\"Number of Widgets Required\");\n</code></pre> <p>This is not recommended where you are iterating across multiple tasks to retrieve values: it's more efficient to look up the <code>FieldType</code> once before you start, then use that to retrieve the value you are interested in from each task.</p>"},{"location":"howto-use-fields/#populated-fields","title":"Populated Fields","text":"<p>So far we've touched on how to can read and write fields in examples where we are targeting specific fields. If we're reading a schedule whose contents are unknown to us, how can we tell which fields are actually populated? A typical use-case for this might be where we need to read a schedule, then present the user with the ability to select the columns they'd like to see in a tabular display of the schedule contents. If you look at the various enumerations we have mentioned previously in this section (<code>TaskField</code>, <code>ResourceField</code> and so on) you can see that there are a large number of possible fields a user could choose from, so ideally we only want to show a user fields which actually contain non-default values.</p> <p>To solve this problem we need to use the appropriate <code>getPopulatedFields</code> method for each of the entities we're interested in.</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"example.mpp\");\n\nSet&lt;ProjectField&gt; projectFields = file.getProjectProperties().getPopulatedFields();\nSet&lt;TaskField&gt; taskFields = file.getTasks().getPopulatedFields();\nSet&lt;ResourceField&gt; resourceFields = file.getResources().getPopulatedFields();\nSet&lt;AssignmentField&gt; assignmentFields = file.getResourceAssignments().getPopulatedFields();\n</code></pre> <p>In the example above we're opening a sample file, then for each of the main classes which implement the <code>FieldContainer</code> interface, we'll query the container which holds those classes and call its <code>getPopulatedFields</code> method. In each case this will return a <code>Set</code> containing the enumeration values  representing fields which have non-default values.</p> <p>If you need to you can retrieve all of this information in one go:</p> <pre><code>ProjectFile file = new UniversalProjectReader().read(\"example.mpp\");\n\nSet&lt;ProjectField&gt; allFields = file.getPopulatedFields();\n</code></pre> <p>The set returned by the project's <code>getPopulatedFields</code> will contain all the populated fields from all entities which implement the <code>FieldContainer</code> interface. You'll need to remember to look at the <code>FieldTypeClass</code> value of each field in the resulting set to determine which entity the field belongs to. The following section provides more detail on this.</p>"},{"location":"howto-use-fields/#user-defined-fields","title":"User Defined Fields","text":"<p>In an earlier section we touched briefly on how Microsoft Project uses a fixed set of \"custom fields\" to allow you to store arbitrary data as part of the schedule. A more common approach in other applications is to allow you to create your own fields to represent the data you need to store - that way you can have exactly the fields you need, without needing to worry if you can fit your data into the fixed set of custom fields. In fact Microsoft Project also supports this concept, in the form of Enterprise Custom Fields, although these are only available if you are working with a schedule hosted in Project Server (Project 365).</p> <p>As you can imagine MPXJ can't provide dedicated getter and setter methods for these fields as it doesn't know ahead of time what they are - they're user defined! Instead we rely on the <code>get</code> and <code>set</code> methods to work with these fields.</p> <p>When a schedule is read  by MPXJ, each user defined field is represented internally by an instance of the  <code>UserDefinedField</code> class. This class implements the <code>FieldType</code> interface, and so can be used with the <code>get</code> and <code>set</code> methods to read and write these values.</p> <p>You can see which user defined fields exist in a project using code similar to the example below:</p> <pre><code>for (UserDefinedField field : project.getUserDefinedFields())\n{\nSystem.out.println(\"name(): \" + field.name());\nSystem.out.println(\"getName(): \" + field.getName());\nSystem.out.println(\"getFieldTypeClass(): \" + field.getFieldTypeClass());\nSystem.out.println(\"getDataType():\" + field.getDataType());         }\n</code></pre> <p>As well as using the <code>getUserDefinedFields</code> method on the project to see which fields are defined, the <code>getPopulatedFields</code> methods discussed in an earlier section will also return <code>UserDefinedField</code> instances if these fields have values in the schedule. Information about <code>UserDefinedField</code> instances is also available in the <code>CustomFieldContainer</code>. This means that when you read a schedule and you are expecting certain user defined fields to be present, you can use the <code>getFieldTypeByAlias</code> or <code>getFieldByAlias</code> methods to find the fields you are interested in by name, as described in an earlier section. </p> <p>If you import schedules data from an application which supports user defined fields and export to a Microsoft Project file format (MPX or MSPDI), MPXJ will automatically map any user defined fields to unused custom fields. Note that as there are only a finite number of custom field available, it is possible that not all user defined fields will be available when the resulting file is opened in Microsoft Project.</p>"},{"location":"howto-write-mpx/","title":"How To: Write MPX files","text":"<p>Versions of Microsoft Project up to Project 98 could read and write MPX files as a data interchange format. Versions of Project after Project 98 until Project 2010 can only read MPX files. Versions of Microsoft Project after 2010 cannot read MPX files. Other third party project planning applications continue to use MPX as a data interchange format.</p> <p>The sample code below illustrates how to write data to an MPX file.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mpx.MPXWriter;\n\n// ...\n\nMPXWriter writer = new MPXWriter();\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-mspdi/","title":"How To: Write MSPDI files","text":"<p>Since Microsoft Project 2002, Microsoft Project has been able to  read and write an XML-based data interchange format called MSPDI.</p>"},{"location":"howto-write-mspdi/#writing-mspdi-files","title":"Writing MSPDI files","text":"<p>The sample code below illustrates how to write data to an MSPDI file.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIWriter;\n\n// ...\n\nMSPDIWriter writer = new MSPDIWriter();\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-mspdi/#using-mspdiwriter","title":"Using MSPDIWriter","text":""},{"location":"howto-write-mspdi/#microsoft-project-compatible-output","title":"Microsoft Project Compatible Output","text":"<p>Microsoft Project has a non-standard way of representing negative duration values (it should have a minus sign as a prefix at the start of the XSD duration expression rather than embedded in it).</p> <p>Originally MPXJ read and wrote correctly formatted XSD duration values, but unfortunately this meant that  Project would not read these values correctly, and MPXJ would not be able to consume these values correctly from an MSPDI file written by Project. MPXJ has been updated so that it reads and writes the form of these duration values understood by Project, but this does mean that if you were previously expecting to be able to parse valid XSD duration values from output generated by MPXJ, that will no longer be the case.</p> <p>To provide backward compatibility the <code>MicrosoftProjectCompatibleOutput</code> flag has been introduced. This defaults to <code>true</code> so MSPDI files containing negative durations written by MPXJ can be read by Project. If you need to produce correctly formatted XSD durations for consumption by applications other than Project you can set this flag to <code>false</code>:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIWriter;\n\n// ...\n\nMSPDIWriter writer = new MSPDIWriter();\nwriter.setMicrosoftProjectCompatibleOutput(false);\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-mspdi/#save-version","title":"Save Version","text":"<p>The MSPDI file contains a <code>SaveVersion</code> attribute which indicates the version of Microsoft Project used to save the file. The value of <code>SaveVersion</code> is defined by the <code>net.sf.mpxj.mspdi.SaveVersion</code> enum,  which provides the following values:</p> <pre><code>Project2002\nProject2003\nProject2007\nProject2010\nProject2013\nProject2016\n</code></pre> <p>By default <code>MSPDIWriter</code> sets the <code>SaveVersion</code> value to <code>Project2016</code>. The only functional difference this setting makes when writing MSPDI files is that the format of calendar exceptions changed in Project 2003 and onwards. MPXJ will always write calendar exceptions using the original Project 2002 format, and if the <code>SaveVersion</code> is set to <code>Project2003</code> or later it will also write the  new format data as well.</p> <p>Here's an example of the <code>SaveVersion</code> attribute being set to ensure that only the older style of calendar exceptions is written to the MSPDI file:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIWriter;\nimport net.sf.mpxj.mspdi.SaveVersion;\n\n// ...\n\nMSPDIWriter writer = new MSPDIWriter();\nwriter.setSaveVersion(SaveVersion.Project2002);\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-mspdi/#timephased-data","title":"Timephased Data","text":"<p>By default <code>MSPDIWriter</code> does not write timephased data to an MSPDI file. To enable writing timephased data, you can call the <code>setWriteTimephasedData</code> method.</p> <p>When this setting is enabled, the default behaviour is for the timephased data is broken down into days when written to the file. If it better suits your use case (or you need a more compact file) you can choose to write an aggregated form of the timephased data by calling the <code>setSplitTimephasedAsDays</code> method and passing <code>false</code>. The difference between the two formats is that if for example you have a 10 day block with 8 hours work per day, this can either be represented as 10 entries in the file each for a single day with a value of 8 hours, or a single entry for a 10 day range with a value of 80 hours. Although the latter case is more compact, if you are consuming the MSPDI timephased data yourself you will need to differentiate between working and non-working days in order to break the single block down into smaller ranges. The default day-by-day format MPXJ writes does this for you automatically.</p> <p>In the first example below we're enabling timephased data, and using the default day-by-dat breakdown:</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIWriter;\n\n// ...\n\nMSPDIWriter writer = new MSPDIWriter();\nwriter.setWriteTimephasedData(true);\nwriter.write(projectFile, outputFileName);\n</code></pre> <p>In this second example we're overriding the default behaviour as asking MPXJ to write an aggregated form of the timephased data: </p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.mspdi.MSPDIWriter;\n\n// ...\n\nMSPDIWriter writer = new MSPDIWriter();\nwriter.setWriteTimephasedData(true);\nwriter.setSplitTimephasedAsDays(false);\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-planner/","title":"How To: Write Planner files","text":"<p>Gnome Planner is a simple cross platform planning tool. MPXJ can be used to write a schedule as a Planner file, which the Gnome Planner application can open.</p> <p>The sample code below illustrates how to write data to a Planner file.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.planner.PlannerWriter;\n\n// ...\n\nPlannerWriter writer = new PlannerWriter();\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-pmxml/","title":"How To: Write PMXML files","text":"<p>The XML file format supported by Primavera P6 for import and export is known as PMXML.</p> <p>The sample code below illustrates how to write data to a PMXML file.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraPMFileWriter;\n\n// ...\n\nPrimaveraPMFileWriter writer = new PrimaveraPMFileWriter();\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-pmxml/#using-primaverapmfilewriter","title":"Using PrimaveraPMFileWriter","text":""},{"location":"howto-write-pmxml/#baselines","title":"Baselines","text":"<p>By default baselines are not written to PMXML files. If the <code>ProjectFile</code> instance you are writing contains a baseline, this can be included in the PMXML file by calling the <code>setWriteBaselines</code> method as shown below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraPMFileWriter;\n\n// ...\n\nPrimaveraPMFileWriter writer = new PrimaveraPMFileWriter();\nwriter.setWriteBaselines(true);\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-sdef/","title":"How To: Write SDEF files","text":"<p>SDEF is the Standard Data Exchange Format, as defined by the USACE (United States Army Corps of Engineers). SDEF is a fixed column format text file, used to import a project schedule up into the QCS (Quality Control System) software from USACE. The specification for the file format can be found here.</p> <p>The sample code below illustrates how to write data to an SDEF file.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.sdef.SDEFWriter;\n\n// ...\n\nSDEFWriter writer = new SDEFWriter();\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-sdef/#using-sdefwriter","title":"Using SDEFWriter","text":""},{"location":"howto-write-sdef/#charset","title":"Charset","text":"<p>By default SDEF files are written using the <code>US_ASCII</code> charset. The <code>setCharset</code> method on the <code>SDEFWriter</code> class can be used to change this if required:</p> <pre><code>import java.nio.charset.StandardCharsets;\n\nimport net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.sdef.SDEFWriter;\n\n// ...\n\nSDEFWriter writer = new SDEFWriter();\nwriter.setCharset(StandardCharsets.UTF_8);\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-xer/","title":"How To: Write XER files","text":"<p>XER files have been imported and exported by Primavera software since the earliest days of P6 and this format is still often the preferred way to move schedule data between instances of P6 even today.</p> <p>The sample code below illustrates how to write data to an XER file.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileWriter;\n\n// ...\n\nPrimaveraXERFileWriter writer = new PrimaveraXERFileWriter();\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"howto-write-xer/#using-primaveraxerfilewriter","title":"Using PrimaveraXERFileWriter","text":""},{"location":"howto-write-xer/#encoding","title":"Encoding","text":"<p>By default XER files written by MPXJ are encoded using the Windows-1252 character set. If you need to use a different encoding, the <code>setCharset</code> or <code>setEncoding</code> methods can be used to achieve this, as illustrated by the code below.</p> <pre><code>import net.sf.mpxj.ProjectFile;\nimport net.sf.mpxj.primavera.PrimaveraXERFileWriter;\n\n// ...\n\nPrimaveraXERFileWriter writer = new PrimaveraXERFileWriter();\n\n// Use a Charset instance\nwriter.setCharset(Charset.forName(\"GB2312\"));\nwriter.write(projectFile, outputFileName);\n\n// Use an encoding name\nwriter.setEncoding(\"GB2312\");\nwriter.write(projectFile, outputFileName);\n</code></pre>"},{"location":"maven-reports/","title":"Maven Reports","text":"<p>Reports generated from the Maven project, including Javadocs, can be found here.</p>"},{"location":"mpp-field-guide/","title":"MPP Field Guide","text":""},{"location":"mpp-field-guide/#mpp-field-guide","title":"MPP Field Guide","text":"<p>The tables below provide an indication of which fields are populated when different MPP file versions are read using MPXJ The tables are not hand-crafted: they have been generated from test data and are therefore may be missing some details.</p>"},{"location":"mpp-field-guide/#project","title":"Project","text":""},{"location":"mpp-field-guide/#core-fields","title":"Core Fields","text":"Field MPP8 MPP9 MPP12 MPP14 AM Text \u2713 \u2713 \u2713 \u2713 Application Version \u2713 \u2713 \u2713 \u2713 Author \u2713 \u2713 \u2713 \u2713 Auto Add New Resources and Tasks \u2713 \u2713 \u2713 \u2713 Auto Filter \u2713 \u2713 Auto Link \u2713 \u2713 \u2713 \u2713 Bar Text Date Format \u2713 \u2713 \u2713 \u2713 Category \u2713 \u2713 \u2713 \u2713 Comments \u2713 \u2713 \u2713 \u2713 Company \u2713 \u2713 \u2713 \u2713 Content Status \u2713 \u2713 \u2713 Content Type \u2713 \u2713 \u2713 Creation Date \u2713 \u2713 \u2713 \u2713 Critical Activity Type \u2713 \u2713 \u2713 \u2713 Critical Slack Limit \u2713 \u2713 Currency Code \u2713 \u2713 \u2713 Currency Digits \u2713 \u2713 \u2713 \u2713 Currency Symbol \u2713 \u2713 \u2713 \u2713 Currency Symbol Position \u2713 \u2713 \u2713 \u2713 Current Date \u2713 \u2713 \u2713 \u2713 Custom Properties \u2713 \u2713 \u2713 \u2713 Date Format \u2713 \u2713 \u2713 \u2713 Date Order \u2713 \u2713 \u2713 \u2713 Date Separator \u2713 \u2713 \u2713 \u2713 Days per Month \u2713 \u2713 \u2713 \u2713 Decimal Separator \u2713 \u2713 \u2713 \u2713 Default Calendar Unique ID \u2713 \u2713 \u2713 \u2713 Default End Time \u2713 \u2713 \u2713 \u2713 Default Overtime Rate \u2713 \u2713 \u2713 Default Standard Rate \u2713 \u2713 \u2713 Default Start Time \u2713 \u2713 \u2713 \u2713 Default Work Units \u2713 \u2713 \u2713 \u2713 Document Version \u2713 \u2713 \u2713 Editable Actual Costs \u2713 \u2713 Editing Time \u2713 \u2713 \u2713 \u2713 File Application \u2713 \u2713 \u2713 \u2713 File Type \u2713 \u2713 \u2713 \u2713 Finish Date \u2713 \u2713 \u2713 \u2713 Fiscal Year Start \u2713 \u2713 \u2713 \u2713 Fiscal Year Start Month \u2713 \u2713 \u2713 \u2713 Full Application Name \u2713 \u2713 \u2713 \u2713 GUID \u2713 \u2713 \u2713 \u2713 Honor Constraints \u2713 \u2713 \u2713 \u2713 Hyperlink Base \u2713 \u2713 \u2713 \u2713 Keywords \u2713 \u2713 \u2713 \u2713 Language \u2713 \u2713 \u2713 Last Author \u2713 \u2713 \u2713 \u2713 Last Printed \u2713 \u2713 \u2713 \u2713 Last Saved \u2713 \u2713 \u2713 \u2713 MPP File Type \u2713 \u2713 \u2713 \u2713 MPX Code Page \u2713 \u2713 \u2713 \u2713 MPX Delimiter \u2713 \u2713 \u2713 \u2713 MPX File Version \u2713 \u2713 \u2713 \u2713 MPX Program Name \u2713 \u2713 \u2713 \u2713 Manager \u2713 \u2713 \u2713 \u2713 Microsoft Project Server URL \u2713 \u2713 \u2713 \u2713 Minutes per Day \u2713 \u2713 \u2713 \u2713 Minutes per Month \u2713 \u2713 \u2713 \u2713 Minutes per Week \u2713 \u2713 \u2713 \u2713 Minutes per Year \u2713 \u2713 \u2713 \u2713 Multiple Critical Paths \u2713 \u2713 \u2713 New Task Start Is Project Start \u2713 \u2713 \u2713 \u2713 New Tasks Are Manual \u2713 \u2713 \u2713 New Tasks Estimated \u2713 \u2713 \u2713 \u2713 PM Text \u2713 \u2713 \u2713 \u2713 Presentation Format \u2713 \u2713 \u2713 Project File Path \u2713 \u2713 \u2713 Project Title \u2713 \u2713 \u2713 \u2713 Relationship Lag Calendar \u2713 \u2713 \u2713 \u2713 Resource Pool File \u2713 \u2713 \u2713 Revision \u2713 \u2713 \u2713 \u2713 Schedule From \u2713 \u2713 \u2713 \u2713 Short Application Name \u2713 \u2713 \u2713 \u2713 Show Project Summary Task \u2713 \u2713 \u2713 \u2713 Split In Progress Tasks \u2713 \u2713 \u2713 \u2713 Start Date \u2713 \u2713 \u2713 \u2713 Status Date \u2713 \u2713 \u2713 Subject \u2713 \u2713 \u2713 \u2713 Template \u2713 \u2713 \u2713 \u2713 Thousands Separator \u2713 \u2713 \u2713 \u2713 Time Format \u2713 \u2713 \u2713 \u2713 Time Separator \u2713 \u2713 \u2713 \u2713 Total Slack Calculation Type \u2713 \u2713 \u2713 \u2713 Updating Task Status Updates Resource Status \u2713 \u2713 \u2713 \u2713 Week Start Day \u2713 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#baseline-fields","title":"Baseline Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Baseline1 Date \u2713 \u2713 \u2713 Baseline2 Date \u2713 \u2713 Baseline3 Date \u2713 \u2713 Baseline4 Date \u2713 \u2713 Baseline5 Date \u2713 \u2713 Baseline6 Date \u2713 \u2713 Baseline7 Date \u2713 \u2713 Baseline8 Date \u2713 \u2713 Baseline9 Date \u2713 \u2713 Baseline10 Date \u2713 \u2713 Baseline Date \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#task","title":"Task","text":""},{"location":"mpp-field-guide/#core-fields_1","title":"Core Fields","text":"Field MPP8 MPP9 MPP12 MPP14 % Complete \u2713 \u2713 \u2713 \u2713 % Work Complete \u2713 \u2713 \u2713 \u2713 Active \u2713 \u2713 \u2713 \u2713 Activity Codes \u2713 \u2713 \u2713 \u2713 Actual Cost \u2713 \u2713 \u2713 \u2713 Actual Duration \u2713 \u2713 \u2713 \u2713 Actual Duration Units \u2713 \u2713 \u2713 Actual Finish \u2713 \u2713 \u2713 \u2713 Actual Overtime Cost \u2713 \u2713 \u2713 \u2713 Actual Overtime Work \u2713 \u2713 \u2713 \u2713 Actual Start \u2713 \u2713 \u2713 \u2713 Actual Work \u2713 \u2713 \u2713 \u2713 Actual Work Protected \u2713 Board Status ID \u2713 Budget Cost \u2713 \u2713 \u2713 Budget Work \u2713 \u2713 \u2713 Calendar Unique ID \u2713 \u2713 \u2713 Complete Through \u2713 \u2713 \u2713 \u2713 Constraint Date \u2713 \u2713 \u2713 \u2713 Constraint Type \u2713 \u2713 \u2713 \u2713 Contact \u2713 \u2713 \u2713 Cost \u2713 \u2713 \u2713 \u2713 Cost Variance \u2713 \u2713 \u2713 \u2713 Created \u2713 \u2713 \u2713 \u2713 Critical \u2713 \u2713 \u2713 \u2713 Deadline \u2713 \u2713 \u2713 Duration \u2713 \u2713 \u2713 \u2713 Duration Units \u2713 \u2713 \u2713 Duration Variance \u2713 \u2713 \u2713 \u2713 Early Finish \u2713 \u2713 \u2713 \u2713 Early Start \u2713 \u2713 \u2713 \u2713 Earned Value Method \u2713 \u2713 Effort Driven \u2713 \u2713 \u2713 \u2713 Estimated \u2713 \u2713 \u2713 Expanded \u2713 \u2713 \u2713 \u2713 Expense Items \u2713 \u2713 \u2713 \u2713 External Project \u2713 \u2713 \u2713 External Task \u2713 \u2713 \u2713 Finish \u2713 \u2713 \u2713 \u2713 Finish Slack \u2713 \u2713 \u2713 \u2713 Finish Variance \u2713 \u2713 \u2713 \u2713 Fixed Cost \u2713 \u2713 \u2713 \u2713 Fixed Cost Accrual \u2713 \u2713 \u2713 \u2713 Free Slack \u2713 \u2713 \u2713 GUID \u2713 \u2713 Hide Bar \u2713 \u2713 \u2713 \u2713 Hyperlink \u2713 \u2713 \u2713 \u2713 Hyperlink Address \u2713 \u2713 \u2713 \u2713 Hyperlink Data \u2713 \u2713 \u2713 Hyperlink Screen Tip \u2713 \u2713 \u2713 Hyperlink SubAddress \u2713 \u2713 \u2713 \u2713 ID \u2713 \u2713 \u2713 \u2713 Ignore Resource Calendar \u2713 \u2713 \u2713 Late Finish \u2713 \u2713 \u2713 \u2713 Late Start \u2713 \u2713 \u2713 \u2713 Level Assignments \u2713 \u2713 \u2713 \u2713 Leveling Can Split \u2713 \u2713 \u2713 \u2713 Leveling Delay \u2713 \u2713 \u2713 \u2713 Leveling Delay Units \u2713 \u2713 \u2713 Manual Duration \u2713 Manual Duration Units \u2713 Marked \u2713 \u2713 \u2713 Milestone \u2713 \u2713 \u2713 \u2713 Notes \u2713 \u2713 \u2713 \u2713 Null \u2713 \u2713 \u2713 Outline Level \u2713 \u2713 \u2713 \u2713 Outline Number \u2713 \u2713 \u2713 \u2713 Overtime Cost \u2713 \u2713 \u2713 \u2713 Parent Task Unique ID \u2713 \u2713 \u2713 Physical % Complete \u2713 \u2713 \u2713 Predecessors \u2713 \u2713 \u2713 \u2713 Preleveled Finish \u2713 \u2713 \u2713 \u2713 Preleveled Start \u2713 \u2713 \u2713 \u2713 Priority \u2713 \u2713 \u2713 \u2713 Project \u2713 \u2713 \u2713 Recalc Outline Codes \u2713 \u2713 Recurring \u2713 \u2713 \u2713 \u2713 Recurring Data \u2713 \u2713 \u2713 Remaining Cost \u2713 \u2713 \u2713 \u2713 Remaining Duration \u2713 \u2713 \u2713 \u2713 Remaining Overtime Cost \u2713 \u2713 \u2713 \u2713 Remaining Overtime Work \u2713 \u2713 \u2713 \u2713 Remaining Work \u2713 \u2713 \u2713 \u2713 Resume \u2713 \u2713 \u2713 \u2713 Resume No Earlier Than \u2713 \u2713 \u2713 Rollup \u2713 \u2713 \u2713 \u2713 Scheduled Duration \u2713 Scheduled Finish \u2713 Scheduled Start \u2713 Splits \u2713 \u2713 \u2713 Sprint ID \u2713 Start \u2713 \u2713 \u2713 \u2713 Start Slack \u2713 \u2713 \u2713 \u2713 Start Variance \u2713 \u2713 \u2713 \u2713 Steps \u2713 \u2713 \u2713 \u2713 Stop \u2713 \u2713 \u2713 \u2713 Subproject File \u2713 \u2713 \u2713 Subproject GUID \u2713 \u2713 Subproject Task ID \u2713 \u2713 \u2713 Subproject Task Unique ID \u2713 \u2713 \u2713 Subproject Tasks Unique ID Offset \u2713 \u2713 \u2713 Successors \u2713 \u2713 \u2713 \u2713 Summary \u2713 \u2713 \u2713 \u2713 Summary Progress \u2713 \u2713 \u2713 Task Calendar GUID \u2713 \u2713 Task Mode \u2713 Task Name \u2713 \u2713 \u2713 \u2713 Total Slack \u2713 \u2713 \u2713 \u2713 Type \u2713 \u2713 \u2713 \u2713 Unique ID \u2713 \u2713 \u2713 \u2713 WBS \u2713 \u2713 \u2713 \u2713 Work \u2713 \u2713 \u2713 \u2713 Work Variance \u2713 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#baseline-fields_1","title":"Baseline Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Baseline1 Cost \u2713 \u2713 \u2713 Baseline1 Duration \u2713 \u2713 \u2713 Baseline1 Duration Units \u2713 \u2713 Baseline1 Estimated Duration \u2713 Baseline1 Estimated Finish \u2713 Baseline1 Estimated Start \u2713 Baseline1 Finish \u2713 \u2713 \u2713 Baseline1 Fixed Cost \u2713 \u2713 \u2713 Baseline1 Fixed Cost Accrual \u2713 \u2713 Baseline1 Start \u2713 \u2713 \u2713 Baseline1 Work \u2713 \u2713 \u2713 Baseline2 Cost \u2713 \u2713 \u2713 Baseline2 Duration \u2713 \u2713 \u2713 Baseline2 Duration Units \u2713 \u2713 Baseline2 Estimated Duration \u2713 Baseline2 Estimated Finish \u2713 Baseline2 Estimated Start \u2713 Baseline2 Finish \u2713 \u2713 \u2713 Baseline2 Fixed Cost \u2713 \u2713 \u2713 Baseline2 Fixed Cost Accrual \u2713 Baseline2 Start \u2713 \u2713 \u2713 Baseline2 Work \u2713 \u2713 \u2713 Baseline3 Cost \u2713 \u2713 \u2713 Baseline3 Duration \u2713 \u2713 \u2713 Baseline3 Duration Units \u2713 \u2713 Baseline3 Estimated Duration \u2713 Baseline3 Estimated Finish \u2713 Baseline3 Estimated Start \u2713 Baseline3 Finish \u2713 \u2713 \u2713 Baseline3 Fixed Cost \u2713 \u2713 \u2713 Baseline3 Fixed Cost Accrual \u2713 \u2713 Baseline3 Start \u2713 \u2713 \u2713 Baseline3 Work \u2713 \u2713 \u2713 Baseline4 Cost \u2713 \u2713 \u2713 Baseline4 Duration \u2713 \u2713 \u2713 Baseline4 Duration Units \u2713 \u2713 Baseline4 Estimated Duration \u2713 Baseline4 Estimated Finish \u2713 Baseline4 Estimated Start \u2713 Baseline4 Finish \u2713 \u2713 \u2713 Baseline4 Fixed Cost \u2713 \u2713 \u2713 Baseline4 Fixed Cost Accrual \u2713 \u2713 Baseline4 Start \u2713 \u2713 \u2713 Baseline4 Work \u2713 \u2713 \u2713 Baseline5 Cost \u2713 \u2713 \u2713 Baseline5 Duration \u2713 \u2713 \u2713 Baseline5 Duration Units \u2713 \u2713 Baseline5 Estimated Duration \u2713 Baseline5 Estimated Finish \u2713 Baseline5 Estimated Start \u2713 Baseline5 Finish \u2713 \u2713 \u2713 Baseline5 Fixed Cost \u2713 \u2713 \u2713 Baseline5 Fixed Cost Accrual \u2713 Baseline5 Start \u2713 \u2713 \u2713 Baseline5 Work \u2713 \u2713 \u2713 Baseline6 Cost \u2713 \u2713 \u2713 Baseline6 Duration \u2713 \u2713 \u2713 Baseline6 Duration Units \u2713 \u2713 Baseline6 Estimated Duration \u2713 Baseline6 Estimated Finish \u2713 Baseline6 Estimated Start \u2713 Baseline6 Finish \u2713 \u2713 \u2713 Baseline6 Fixed Cost \u2713 \u2713 \u2713 Baseline6 Fixed Cost Accrual \u2713 \u2713 Baseline6 Start \u2713 \u2713 \u2713 Baseline6 Work \u2713 \u2713 \u2713 Baseline7 Cost \u2713 \u2713 \u2713 Baseline7 Duration \u2713 \u2713 \u2713 Baseline7 Duration Units \u2713 \u2713 Baseline7 Estimated Duration \u2713 Baseline7 Estimated Finish \u2713 Baseline7 Estimated Start \u2713 Baseline7 Finish \u2713 \u2713 \u2713 Baseline7 Fixed Cost \u2713 \u2713 \u2713 Baseline7 Fixed Cost Accrual \u2713 \u2713 Baseline7 Start \u2713 \u2713 \u2713 Baseline7 Work \u2713 \u2713 \u2713 Baseline8 Cost \u2713 \u2713 \u2713 Baseline8 Duration \u2713 \u2713 \u2713 Baseline8 Duration Units \u2713 \u2713 Baseline8 Estimated Duration \u2713 Baseline8 Estimated Finish \u2713 Baseline8 Estimated Start \u2713 Baseline8 Finish \u2713 \u2713 \u2713 Baseline8 Fixed Cost \u2713 \u2713 \u2713 Baseline8 Fixed Cost Accrual \u2713 Baseline8 Start \u2713 \u2713 \u2713 Baseline8 Work \u2713 \u2713 \u2713 Baseline9 Cost \u2713 \u2713 \u2713 Baseline9 Duration \u2713 \u2713 \u2713 Baseline9 Duration Units \u2713 \u2713 Baseline9 Estimated Duration \u2713 Baseline9 Estimated Finish \u2713 Baseline9 Estimated Start \u2713 Baseline9 Finish \u2713 \u2713 \u2713 Baseline9 Fixed Cost \u2713 \u2713 \u2713 Baseline9 Fixed Cost Accrual \u2713 \u2713 Baseline9 Start \u2713 \u2713 \u2713 Baseline9 Work \u2713 \u2713 \u2713 Baseline10 Cost \u2713 \u2713 \u2713 Baseline10 Deliverable Finish \u2713 Baseline10 Duration \u2713 \u2713 \u2713 Baseline10 Duration Units \u2713 \u2713 Baseline10 Estimated Duration \u2713 Baseline10 Estimated Finish \u2713 Baseline10 Estimated Start \u2713 Baseline10 Finish \u2713 \u2713 \u2713 Baseline10 Fixed Cost \u2713 \u2713 \u2713 Baseline10 Fixed Cost Accrual \u2713 \u2713 Baseline10 Start \u2713 \u2713 \u2713 Baseline10 Work \u2713 \u2713 \u2713 Baseline Budget Cost \u2713 Baseline Budget Work \u2713 Baseline Cost \u2713 \u2713 \u2713 \u2713 Baseline Deliverable Finish \u2713 Baseline Deliverable Start \u2713 Baseline Duration \u2713 \u2713 \u2713 \u2713 Baseline Duration Units \u2713 \u2713 \u2713 Baseline Estimated Duration \u2713 Baseline Estimated Finish \u2713 Baseline Estimated Start \u2713 Baseline Finish \u2713 \u2713 \u2713 \u2713 Baseline Fixed Cost \u2713 \u2713 \u2713 Baseline Fixed Cost Accrual \u2713 \u2713 Baseline Start \u2713 \u2713 \u2713 \u2713 Baseline Work \u2713 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#custom-fields","title":"Custom Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Cost1 \u2713 \u2713 \u2713 Cost2 \u2713 \u2713 \u2713 Cost3 \u2713 \u2713 \u2713 Cost4 \u2713 \u2713 \u2713 Cost5 \u2713 \u2713 \u2713 Cost6 \u2713 \u2713 \u2713 Cost7 \u2713 \u2713 \u2713 Cost8 \u2713 \u2713 \u2713 Cost9 \u2713 \u2713 \u2713 Cost10 \u2713 \u2713 \u2713 Date1 \u2713 \u2713 \u2713 \u2713 Date2 \u2713 \u2713 \u2713 \u2713 Date3 \u2713 \u2713 \u2713 \u2713 Date4 \u2713 \u2713 \u2713 \u2713 Date5 \u2713 \u2713 \u2713 \u2713 Date6 \u2713 \u2713 \u2713 \u2713 Date7 \u2713 \u2713 \u2713 \u2713 Date8 \u2713 \u2713 \u2713 \u2713 Date9 \u2713 \u2713 \u2713 \u2713 Date10 \u2713 \u2713 \u2713 \u2713 Duration1 \u2713 \u2713 \u2713 \u2713 Duration1 Units \u2713 \u2713 \u2713 Duration2 \u2713 \u2713 \u2713 \u2713 Duration2 Units \u2713 \u2713 \u2713 Duration3 \u2713 \u2713 \u2713 \u2713 Duration3 Units \u2713 \u2713 \u2713 Duration4 \u2713 \u2713 \u2713 \u2713 Duration4 Units \u2713 \u2713 \u2713 Duration5 \u2713 \u2713 \u2713 \u2713 Duration5 Units \u2713 \u2713 \u2713 Duration6 \u2713 \u2713 \u2713 \u2713 Duration6 Units \u2713 \u2713 \u2713 Duration7 \u2713 \u2713 \u2713 \u2713 Duration7 Units \u2713 \u2713 \u2713 Duration8 \u2713 \u2713 \u2713 \u2713 Duration8 Units \u2713 \u2713 \u2713 Duration9 \u2713 \u2713 \u2713 \u2713 Duration9 Units \u2713 \u2713 \u2713 Duration10 \u2713 \u2713 \u2713 \u2713 Duration10 Units \u2713 \u2713 \u2713 Finish1 \u2713 \u2713 \u2713 \u2713 Finish2 \u2713 \u2713 \u2713 \u2713 Finish3 \u2713 \u2713 \u2713 \u2713 Finish4 \u2713 \u2713 \u2713 \u2713 Finish5 \u2713 \u2713 \u2713 \u2713 Finish6 \u2713 \u2713 \u2713 \u2713 Finish7 \u2713 \u2713 \u2713 \u2713 Finish8 \u2713 \u2713 \u2713 \u2713 Finish9 \u2713 \u2713 \u2713 \u2713 Finish10 \u2713 \u2713 \u2713 \u2713 Flag1 \u2713 \u2713 \u2713 \u2713 Flag2 \u2713 \u2713 \u2713 \u2713 Flag3 \u2713 \u2713 \u2713 \u2713 Flag4 \u2713 \u2713 \u2713 \u2713 Flag5 \u2713 \u2713 \u2713 \u2713 Flag6 \u2713 \u2713 \u2713 \u2713 Flag7 \u2713 \u2713 \u2713 \u2713 Flag8 \u2713 \u2713 \u2713 \u2713 Flag9 \u2713 \u2713 \u2713 \u2713 Flag10 \u2713 \u2713 \u2713 \u2713 Flag11 \u2713 \u2713 \u2713 \u2713 Flag12 \u2713 \u2713 \u2713 \u2713 Flag13 \u2713 \u2713 \u2713 \u2713 Flag14 \u2713 \u2713 \u2713 \u2713 Flag15 \u2713 \u2713 \u2713 \u2713 Flag16 \u2713 \u2713 \u2713 \u2713 Flag17 \u2713 \u2713 \u2713 \u2713 Flag18 \u2713 \u2713 \u2713 \u2713 Flag19 \u2713 \u2713 \u2713 \u2713 Flag20 \u2713 \u2713 \u2713 \u2713 Number1 \u2713 \u2713 \u2713 \u2713 Number2 \u2713 \u2713 \u2713 \u2713 Number3 \u2713 \u2713 \u2713 \u2713 Number4 \u2713 \u2713 \u2713 \u2713 Number5 \u2713 \u2713 \u2713 \u2713 Number6 \u2713 \u2713 \u2713 \u2713 Number7 \u2713 \u2713 \u2713 \u2713 Number8 \u2713 \u2713 \u2713 \u2713 Number9 \u2713 \u2713 \u2713 \u2713 Number10 \u2713 \u2713 \u2713 \u2713 Number11 \u2713 \u2713 \u2713 \u2713 Number12 \u2713 \u2713 \u2713 \u2713 Number13 \u2713 \u2713 \u2713 \u2713 Number14 \u2713 \u2713 \u2713 \u2713 Number15 \u2713 \u2713 \u2713 \u2713 Number16 \u2713 \u2713 \u2713 \u2713 Number17 \u2713 \u2713 \u2713 \u2713 Number18 \u2713 \u2713 \u2713 \u2713 Number19 \u2713 \u2713 \u2713 \u2713 Number20 \u2713 \u2713 \u2713 \u2713 Outline Code1 \u2713 \u2713 \u2713 Outline Code1 Index \u2713 \u2713 \u2713 Outline Code2 \u2713 \u2713 \u2713 Outline Code2 Index \u2713 \u2713 \u2713 Outline Code3 \u2713 \u2713 \u2713 Outline Code3 Index \u2713 \u2713 \u2713 Outline Code4 \u2713 \u2713 \u2713 Outline Code4 Index \u2713 \u2713 \u2713 Outline Code5 \u2713 \u2713 \u2713 Outline Code5 Index \u2713 \u2713 \u2713 Outline Code6 \u2713 \u2713 \u2713 Outline Code6 Index \u2713 \u2713 \u2713 Outline Code7 \u2713 \u2713 \u2713 Outline Code7 Index \u2713 \u2713 \u2713 Outline Code8 \u2713 \u2713 \u2713 Outline Code8 Index \u2713 \u2713 \u2713 Outline Code9 \u2713 \u2713 \u2713 Outline Code9 Index \u2713 \u2713 \u2713 Outline Code10 \u2713 \u2713 \u2713 Outline Code10 Index \u2713 \u2713 \u2713 Start1 \u2713 \u2713 \u2713 \u2713 Start2 \u2713 \u2713 \u2713 \u2713 Start3 \u2713 \u2713 \u2713 \u2713 Start4 \u2713 \u2713 \u2713 \u2713 Start5 \u2713 \u2713 \u2713 \u2713 Start6 \u2713 \u2713 \u2713 \u2713 Start7 \u2713 \u2713 \u2713 \u2713 Start8 \u2713 \u2713 \u2713 \u2713 Start9 \u2713 \u2713 \u2713 \u2713 Start10 \u2713 \u2713 \u2713 \u2713 Text1 \u2713 \u2713 \u2713 \u2713 Text2 \u2713 \u2713 \u2713 \u2713 Text3 \u2713 \u2713 \u2713 \u2713 Text4 \u2713 \u2713 \u2713 \u2713 Text5 \u2713 \u2713 \u2713 \u2713 Text6 \u2713 \u2713 \u2713 Text7 \u2713 \u2713 \u2713 Text8 \u2713 \u2713 \u2713 Text9 \u2713 \u2713 \u2713 Text10 \u2713 \u2713 \u2713 Text11 \u2713 \u2713 \u2713 Text12 \u2713 \u2713 \u2713 Text13 \u2713 \u2713 \u2713 Text14 \u2713 \u2713 \u2713 Text15 \u2713 \u2713 \u2713 Text16 \u2713 \u2713 \u2713 Text17 \u2713 \u2713 \u2713 Text18 \u2713 \u2713 \u2713 Text19 \u2713 \u2713 \u2713 Text20 \u2713 \u2713 \u2713 Text21 \u2713 \u2713 \u2713 Text22 \u2713 \u2713 \u2713 Text23 \u2713 \u2713 \u2713 Text24 \u2713 \u2713 \u2713 Text25 \u2713 \u2713 \u2713 Text26 \u2713 \u2713 \u2713 Text27 \u2713 \u2713 \u2713 Text28 \u2713 \u2713 \u2713 Text29 \u2713 \u2713 \u2713 Text30 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#enterprise-fields","title":"Enterprise Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Enterprise Data \u2713 Enterprise Duration1 Units \u2713 \u2713 Enterprise Duration2 Units \u2713 \u2713 Enterprise Duration3 Units \u2713 \u2713 Enterprise Duration4 Units \u2713 \u2713 Enterprise Duration5 Units \u2713 \u2713 Enterprise Duration6 Units \u2713 \u2713 Enterprise Duration7 Units \u2713 \u2713 Enterprise Duration8 Units \u2713 \u2713 Enterprise Duration9 Units \u2713 \u2713 Enterprise Duration10 Units \u2713 \u2713 Enterprise Project Date1 \u2713 Enterprise Project Date2 \u2713 Enterprise Project Date3 \u2713 Enterprise Project Date4 \u2713 Enterprise Project Number2 \u2713 Enterprise Project Number4 \u2713 Enterprise Project Number5 \u2713 Enterprise Project Number22 \u2713 Enterprise Project Text1 \u2713 \u2713 \u2713 Enterprise Project Text2 \u2713 \u2713 Enterprise Project Text3 \u2713 \u2713 Enterprise Project Text4 \u2713 \u2713 Enterprise Project Text5 \u2713 Enterprise Project Text6 \u2713 \u2713 Enterprise Project Text8 \u2713 Enterprise Project Text9 \u2713 Enterprise Project Text10 \u2713 Enterprise Project Text11 \u2713 Enterprise Project Text12 \u2713 Enterprise Project Text13 \u2713 Enterprise Project Text14 \u2713 Enterprise Project Text15 \u2713 Enterprise Project Text16 \u2713 Enterprise Project Text17 \u2713 Enterprise Project Text18 \u2713 Enterprise Project Text19 \u2713 Enterprise Project Text21 \u2713 Enterprise Project Text40 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#resource","title":"Resource","text":""},{"location":"mpp-field-guide/#core-fields_2","title":"Core Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Accrue At \u2713 \u2713 \u2713 \u2713 Active \u2713 \u2713 \u2713 \u2713 Actual Cost \u2713 \u2713 \u2713 Actual Overtime Cost \u2713 \u2713 \u2713 Actual Overtime Work \u2713 \u2713 \u2713 Actual Work \u2713 \u2713 \u2713 \u2713 Actual Work Protected \u2713 Availability Data \u2713 \u2713 \u2713 Available From \u2713 \u2713 \u2713 Available To \u2713 \u2713 \u2713 Booking Type \u2713 \u2713 Budget \u2713 \u2713 Budget Cost \u2713 \u2713 \u2713 Budget Work \u2713 \u2713 Calculate Costs From Units \u2713 \u2713 \u2713 \u2713 Calendar GUID \u2713 \u2713 Calendar Unique ID \u2713 \u2713 \u2713 \u2713 Code \u2713 \u2713 \u2713 Cost \u2713 \u2713 \u2713 \u2713 Cost Center \u2713 Cost Per Use \u2713 \u2713 \u2713 Cost Rate A \u2713 \u2713 \u2713 Cost Rate B \u2713 \u2713 \u2713 Cost Rate C \u2713 \u2713 \u2713 Cost Rate D \u2713 \u2713 \u2713 Cost Rate E \u2713 \u2713 \u2713 Cost Variance \u2713 \u2713 \u2713 \u2713 Created \u2713 \u2713 \u2713 Email Address \u2713 \u2713 \u2713 GUID \u2713 \u2713 Generic \u2713 \u2713 \u2713 Group \u2713 \u2713 \u2713 \u2713 Hyperlink \u2713 \u2713 \u2713 Hyperlink Address \u2713 \u2713 \u2713 Hyperlink Data \u2713 \u2713 \u2713 Hyperlink Screen Tip \u2713 \u2713 \u2713 Hyperlink SubAddress \u2713 \u2713 \u2713 ID \u2713 \u2713 \u2713 \u2713 Initials \u2713 \u2713 \u2713 \u2713 Material Label \u2713 \u2713 \u2713 Max Units \u2713 \u2713 \u2713 \u2713 Name \u2713 \u2713 \u2713 \u2713 Notes \u2713 \u2713 \u2713 \u2713 Overallocated \u2713 \u2713 \u2713 \u2713 Overtime Cost \u2713 \u2713 \u2713 Overtime Rate \u2713 \u2713 \u2713 Overtime Rate Units \u2713 \u2713 \u2713 Overtime Work \u2713 \u2713 \u2713 Peak \u2713 \u2713 \u2713 \u2713 Phonetics \u2713 Regular Work \u2713 \u2713 \u2713 \u2713 Remaining Cost \u2713 \u2713 \u2713 \u2713 Remaining Overtime Cost \u2713 \u2713 \u2713 Remaining Overtime Work \u2713 \u2713 \u2713 Remaining Work \u2713 \u2713 \u2713 \u2713 Standard Rate \u2713 \u2713 \u2713 Standard Rate Units \u2713 \u2713 \u2713 Subproject Unique Resource ID \u2713 \u2713 Type \u2713 \u2713 \u2713 \u2713 Unique ID \u2713 \u2713 \u2713 \u2713 Windows User Account \u2713 \u2713 \u2713 Work \u2713 \u2713 \u2713 \u2713 Work Variance \u2713 \u2713 \u2713 \u2713 Workgroup \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#baseline-fields_2","title":"Baseline Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Baseline1 Budget Cost \u2713 Baseline1 Budget Work \u2713 Baseline1 Cost \u2713 \u2713 \u2713 Baseline1 Work \u2713 \u2713 \u2713 Baseline2 Budget Cost \u2713 Baseline2 Budget Work \u2713 Baseline2 Cost \u2713 \u2713 \u2713 Baseline2 Work \u2713 \u2713 \u2713 Baseline3 Budget Cost \u2713 Baseline3 Budget Work \u2713 Baseline3 Cost \u2713 \u2713 \u2713 Baseline3 Work \u2713 \u2713 \u2713 Baseline4 Budget Cost \u2713 Baseline4 Budget Work \u2713 Baseline4 Cost \u2713 \u2713 \u2713 Baseline4 Work \u2713 \u2713 \u2713 Baseline5 Budget Cost \u2713 Baseline5 Budget Work \u2713 Baseline5 Cost \u2713 \u2713 \u2713 Baseline5 Work \u2713 \u2713 \u2713 Baseline6 Budget Cost \u2713 Baseline6 Budget Work \u2713 Baseline6 Cost \u2713 \u2713 \u2713 Baseline6 Work \u2713 \u2713 \u2713 Baseline7 Budget Cost \u2713 Baseline7 Budget Work \u2713 Baseline7 Cost \u2713 \u2713 \u2713 Baseline7 Work \u2713 \u2713 \u2713 Baseline8 Budget Cost \u2713 Baseline8 Budget Work \u2713 Baseline8 Cost \u2713 \u2713 \u2713 Baseline8 Work \u2713 \u2713 \u2713 Baseline9 Budget Cost \u2713 Baseline9 Budget Work \u2713 Baseline9 Cost \u2713 \u2713 \u2713 Baseline9 Work \u2713 \u2713 \u2713 Baseline10 Budget Cost \u2713 Baseline10 Budget Work \u2713 Baseline10 Cost \u2713 \u2713 \u2713 Baseline10 Work \u2713 \u2713 \u2713 Baseline Budget Cost \u2713 Baseline Budget Work \u2713 Baseline Cost \u2713 \u2713 \u2713 Baseline Work \u2713 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#custom-fields_1","title":"Custom Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Cost1 \u2713 \u2713 \u2713 Cost2 \u2713 \u2713 \u2713 Cost3 \u2713 \u2713 \u2713 Cost4 \u2713 \u2713 \u2713 Cost5 \u2713 \u2713 \u2713 Cost6 \u2713 \u2713 \u2713 Cost7 \u2713 \u2713 \u2713 Cost8 \u2713 \u2713 \u2713 Cost9 \u2713 \u2713 \u2713 Cost10 \u2713 \u2713 \u2713 Date1 \u2713 \u2713 \u2713 Date2 \u2713 \u2713 \u2713 Date3 \u2713 \u2713 \u2713 Date4 \u2713 \u2713 \u2713 Date5 \u2713 \u2713 \u2713 Date6 \u2713 \u2713 \u2713 Date7 \u2713 \u2713 \u2713 Date8 \u2713 \u2713 \u2713 Date9 \u2713 \u2713 \u2713 Date10 \u2713 \u2713 \u2713 Duration1 \u2713 \u2713 \u2713 Duration1 Units \u2713 \u2713 \u2713 Duration2 \u2713 \u2713 \u2713 Duration2 Units \u2713 \u2713 \u2713 Duration3 \u2713 \u2713 \u2713 Duration3 Units \u2713 \u2713 \u2713 Duration4 \u2713 \u2713 \u2713 Duration4 Units \u2713 \u2713 \u2713 Duration5 \u2713 \u2713 \u2713 Duration5 Units \u2713 \u2713 \u2713 Duration6 \u2713 \u2713 \u2713 Duration6 Units \u2713 \u2713 \u2713 Duration7 \u2713 \u2713 \u2713 Duration7 Units \u2713 \u2713 \u2713 Duration8 \u2713 \u2713 \u2713 Duration8 Units \u2713 \u2713 \u2713 Duration9 \u2713 \u2713 \u2713 Duration9 Units \u2713 \u2713 \u2713 Duration10 \u2713 \u2713 \u2713 Duration10 Units \u2713 \u2713 \u2713 Finish1 \u2713 \u2713 \u2713 Finish2 \u2713 \u2713 \u2713 Finish3 \u2713 \u2713 \u2713 Finish4 \u2713 \u2713 \u2713 Finish5 \u2713 \u2713 \u2713 Finish6 \u2713 \u2713 \u2713 Finish7 \u2713 \u2713 \u2713 Finish8 \u2713 \u2713 \u2713 Finish9 \u2713 \u2713 \u2713 Finish10 \u2713 \u2713 \u2713 Flag1 \u2713 \u2713 \u2713 Flag2 \u2713 \u2713 \u2713 Flag3 \u2713 \u2713 \u2713 Flag4 \u2713 \u2713 \u2713 Flag5 \u2713 \u2713 \u2713 Flag6 \u2713 \u2713 \u2713 Flag7 \u2713 \u2713 \u2713 Flag8 \u2713 \u2713 \u2713 Flag9 \u2713 \u2713 \u2713 Flag10 \u2713 \u2713 \u2713 Flag11 \u2713 \u2713 \u2713 Flag12 \u2713 \u2713 \u2713 Flag13 \u2713 \u2713 \u2713 Flag14 \u2713 \u2713 \u2713 Flag15 \u2713 \u2713 \u2713 Flag16 \u2713 \u2713 \u2713 Flag17 \u2713 \u2713 \u2713 Flag18 \u2713 \u2713 \u2713 Flag19 \u2713 \u2713 \u2713 Flag20 \u2713 \u2713 \u2713 Number1 \u2713 \u2713 \u2713 Number2 \u2713 \u2713 \u2713 Number3 \u2713 \u2713 \u2713 Number4 \u2713 \u2713 \u2713 Number5 \u2713 \u2713 \u2713 Number6 \u2713 \u2713 \u2713 Number7 \u2713 \u2713 \u2713 Number8 \u2713 \u2713 \u2713 Number9 \u2713 \u2713 \u2713 Number10 \u2713 \u2713 \u2713 Number11 \u2713 \u2713 \u2713 Number12 \u2713 \u2713 \u2713 Number13 \u2713 \u2713 \u2713 Number14 \u2713 \u2713 \u2713 Number15 \u2713 \u2713 \u2713 Number16 \u2713 \u2713 \u2713 Number17 \u2713 \u2713 \u2713 Number18 \u2713 \u2713 \u2713 Number19 \u2713 \u2713 \u2713 Number20 \u2713 \u2713 \u2713 Outline Code1 \u2713 \u2713 \u2713 Outline Code1 Index \u2713 \u2713 \u2713 Outline Code2 \u2713 \u2713 \u2713 Outline Code2 Index \u2713 \u2713 \u2713 Outline Code3 \u2713 \u2713 \u2713 Outline Code3 Index \u2713 \u2713 \u2713 Outline Code4 \u2713 \u2713 \u2713 Outline Code4 Index \u2713 \u2713 \u2713 Outline Code5 \u2713 \u2713 \u2713 Outline Code5 Index \u2713 \u2713 \u2713 Outline Code6 \u2713 \u2713 \u2713 Outline Code6 Index \u2713 \u2713 \u2713 Outline Code7 \u2713 \u2713 \u2713 Outline Code7 Index \u2713 \u2713 \u2713 Outline Code8 \u2713 \u2713 \u2713 Outline Code8 Index \u2713 \u2713 \u2713 Outline Code9 \u2713 \u2713 \u2713 Outline Code9 Index \u2713 \u2713 \u2713 Outline Code10 \u2713 \u2713 \u2713 Outline Code10 Index \u2713 \u2713 \u2713 Start1 \u2713 \u2713 \u2713 Start2 \u2713 \u2713 \u2713 Start3 \u2713 \u2713 \u2713 Start4 \u2713 \u2713 \u2713 Start5 \u2713 \u2713 \u2713 Start6 \u2713 \u2713 \u2713 Start7 \u2713 \u2713 \u2713 Start8 \u2713 \u2713 \u2713 Start9 \u2713 \u2713 \u2713 Start10 \u2713 \u2713 \u2713 Text1 \u2713 \u2713 \u2713 \u2713 Text2 \u2713 \u2713 \u2713 Text3 \u2713 \u2713 \u2713 Text4 \u2713 \u2713 \u2713 Text5 \u2713 \u2713 \u2713 Text6 \u2713 \u2713 \u2713 Text7 \u2713 \u2713 \u2713 Text8 \u2713 \u2713 \u2713 Text9 \u2713 \u2713 \u2713 Text10 \u2713 \u2713 \u2713 Text11 \u2713 \u2713 \u2713 Text12 \u2713 \u2713 \u2713 Text13 \u2713 \u2713 \u2713 Text14 \u2713 \u2713 \u2713 Text15 \u2713 \u2713 \u2713 Text16 \u2713 \u2713 \u2713 Text17 \u2713 \u2713 \u2713 Text18 \u2713 \u2713 \u2713 Text19 \u2713 \u2713 \u2713 Text20 \u2713 \u2713 \u2713 Text21 \u2713 \u2713 \u2713 Text22 \u2713 \u2713 \u2713 Text23 \u2713 \u2713 \u2713 Text24 \u2713 \u2713 \u2713 Text25 \u2713 \u2713 \u2713 Text26 \u2713 \u2713 \u2713 Text27 \u2713 \u2713 \u2713 Text28 \u2713 \u2713 \u2713 Text29 \u2713 \u2713 \u2713 Text30 \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#enterprise-fields_1","title":"Enterprise Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Enterprise \u2713 \u2713 Enterprise Data \u2713 Enterprise Duration1 Units \u2713 \u2713 Enterprise Duration2 Units \u2713 \u2713 Enterprise Duration3 Units \u2713 \u2713 Enterprise Duration4 Units \u2713 \u2713 Enterprise Duration5 Units \u2713 \u2713 Enterprise Duration6 Units \u2713 \u2713 Enterprise Duration7 Units \u2713 \u2713 Enterprise Duration8 Units \u2713 \u2713 Enterprise Duration9 Units \u2713 \u2713 Enterprise Duration10 Units \u2713 \u2713 Enterprise Unique ID \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#resource-assignment","title":"Resource Assignment","text":""},{"location":"mpp-field-guide/#core-fields_3","title":"Core Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Actual Cost \u2713 \u2713 \u2713 Actual Finish \u2713 \u2713 \u2713 Actual Overtime Cost \u2713 \u2713 \u2713 Actual Overtime Work \u2713 \u2713 \u2713 Actual Start \u2713 \u2713 \u2713 Actual Work \u2713 \u2713 \u2713 \u2713 Actual Work Protected \u2713 Assignment Delay \u2713 \u2713 \u2713 Assignment GUID \u2713 \u2713 Assignment Resource GUID \u2713 \u2713 Assignment Task GUID \u2713 \u2713 Assignment Units \u2713 \u2713 \u2713 \u2713 Budget Cost \u2713 \u2713 Budget Work \u2713 \u2713 Calculate Costs From Units \u2713 \u2713 \u2713 \u2713 Confirmed \u2713 \u2713 \u2713 Cost \u2713 \u2713 \u2713 \u2713 Cost Rate Table \u2713 \u2713 \u2713 Cost Variance \u2713 \u2713 \u2713 Created \u2713 \u2713 \u2713 Finish \u2713 \u2713 \u2713 \u2713 Finish Variance \u2713 \u2713 \u2713 Hyperlink \u2713 \u2713 \u2713 Hyperlink Address \u2713 \u2713 \u2713 Hyperlink Data \u2713 \u2713 \u2713 Hyperlink Screen Tip \u2713 \u2713 \u2713 Hyperlink Subaddress \u2713 \u2713 \u2713 Leveling Delay \u2713 \u2713 \u2713 Leveling Delay Units \u2713 \u2713 Linked Fields \u2713 \u2713 \u2713 Notes \u2713 \u2713 \u2713 Overtime Work \u2713 \u2713 \u2713 Owner \u2713 \u2713 Percent Work Complete \u2713 \u2713 \u2713 \u2713 Rate Source \u2713 \u2713 \u2713 \u2713 Regular Work \u2713 \u2713 \u2713 Remaining Cost \u2713 \u2713 \u2713 Remaining Overtime Cost \u2713 \u2713 \u2713 Remaining Overtime Work \u2713 \u2713 \u2713 Remaining Work \u2713 \u2713 \u2713 \u2713 Resource Request Type \u2713 \u2713 Resource Unique ID \u2713 \u2713 \u2713 \u2713 Response Pending \u2713 \u2713 \u2713 Resume \u2713 \u2713 \u2713 Start \u2713 \u2713 \u2713 \u2713 Start Variance \u2713 \u2713 \u2713 Stop \u2713 \u2713 \u2713 Task Unique ID \u2713 \u2713 \u2713 \u2713 Team Status Pending \u2713 \u2713 \u2713 Timephased Actual Overtime Work \u2713 \u2713 \u2713 Timephased Actual Work \u2713 \u2713 \u2713 Timephased Work \u2713 \u2713 \u2713 Unique ID \u2713 \u2713 \u2713 \u2713 Variable Rate Units \u2713 \u2713 Work \u2713 \u2713 \u2713 \u2713 Work Contour \u2713 \u2713 \u2713 Work Variance \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#baseline-fields_3","title":"Baseline Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Baseline1 Budget Cost \u2713 \u2713 Baseline1 Budget Work \u2713 \u2713 Baseline1 Cost \u2713 \u2713 \u2713 Baseline1 Finish \u2713 \u2713 \u2713 Baseline1 Start \u2713 \u2713 \u2713 Baseline1 Work \u2713 \u2713 \u2713 Baseline2 Budget Cost \u2713 \u2713 Baseline2 Budget Work \u2713 \u2713 Baseline2 Cost \u2713 \u2713 \u2713 Baseline2 Finish \u2713 \u2713 \u2713 Baseline2 Start \u2713 \u2713 \u2713 Baseline2 Work \u2713 \u2713 \u2713 Baseline3 Budget Cost \u2713 \u2713 Baseline3 Budget Work \u2713 \u2713 Baseline3 Cost \u2713 \u2713 \u2713 Baseline3 Finish \u2713 \u2713 \u2713 Baseline3 Start \u2713 \u2713 \u2713 Baseline3 Work \u2713 \u2713 \u2713 Baseline4 Budget Cost \u2713 \u2713 Baseline4 Budget Work \u2713 \u2713 Baseline4 Cost \u2713 \u2713 \u2713 Baseline4 Finish \u2713 \u2713 \u2713 Baseline4 Start \u2713 \u2713 \u2713 Baseline4 Work \u2713 \u2713 \u2713 Baseline5 Budget Cost \u2713 \u2713 Baseline5 Budget Work \u2713 \u2713 Baseline5 Cost \u2713 \u2713 \u2713 Baseline5 Finish \u2713 \u2713 \u2713 Baseline5 Start \u2713 \u2713 \u2713 Baseline5 Work \u2713 \u2713 \u2713 Baseline6 Budget Cost \u2713 \u2713 Baseline6 Budget Work \u2713 \u2713 Baseline6 Cost \u2713 \u2713 \u2713 Baseline6 Finish \u2713 \u2713 \u2713 Baseline6 Start \u2713 \u2713 \u2713 Baseline6 Work \u2713 \u2713 \u2713 Baseline7 Budget Cost \u2713 \u2713 Baseline7 Budget Work \u2713 \u2713 Baseline7 Cost \u2713 \u2713 \u2713 Baseline7 Finish \u2713 \u2713 \u2713 Baseline7 Start \u2713 \u2713 \u2713 Baseline7 Work \u2713 \u2713 \u2713 Baseline8 Budget Cost \u2713 \u2713 Baseline8 Budget Work \u2713 \u2713 Baseline8 Cost \u2713 \u2713 \u2713 Baseline8 Finish \u2713 \u2713 \u2713 Baseline8 Start \u2713 \u2713 \u2713 Baseline8 Work \u2713 \u2713 \u2713 Baseline9 Budget Cost \u2713 \u2713 Baseline9 Budget Work \u2713 \u2713 Baseline9 Cost \u2713 \u2713 \u2713 Baseline9 Finish \u2713 \u2713 \u2713 Baseline9 Start \u2713 \u2713 \u2713 Baseline9 Work \u2713 \u2713 \u2713 Baseline10 Budget Cost \u2713 \u2713 Baseline10 Budget Work \u2713 \u2713 Baseline10 Cost \u2713 \u2713 \u2713 Baseline10 Finish \u2713 \u2713 \u2713 Baseline10 Start \u2713 \u2713 \u2713 Baseline10 Work \u2713 \u2713 \u2713 Baseline Budget Cost \u2713 \u2713 Baseline Budget Work \u2713 \u2713 Baseline Cost \u2713 \u2713 \u2713 Baseline Finish \u2713 \u2713 \u2713 Baseline Start \u2713 \u2713 \u2713 Baseline Work \u2713 \u2713 \u2713 Timephased Baseline1 Cost \u2713 \u2713 \u2713 Timephased Baseline1 Work \u2713 \u2713 \u2713 Timephased Baseline2 Cost \u2713 \u2713 Timephased Baseline2 Work \u2713 \u2713 Timephased Baseline3 Cost \u2713 \u2713 Timephased Baseline3 Work \u2713 \u2713 Timephased Baseline4 Cost \u2713 \u2713 Timephased Baseline4 Work \u2713 \u2713 Timephased Baseline5 Cost \u2713 \u2713 Timephased Baseline5 Work \u2713 \u2713 Timephased Baseline6 Cost \u2713 \u2713 Timephased Baseline6 Work \u2713 \u2713 Timephased Baseline7 Cost \u2713 \u2713 Timephased Baseline7 Work \u2713 \u2713 Timephased Baseline8 Cost \u2713 \u2713 Timephased Baseline8 Work \u2713 \u2713 Timephased Baseline9 Cost \u2713 \u2713 Timephased Baseline9 Work \u2713 \u2713 Timephased Baseline10 Cost \u2713 \u2713 \u2713 Timephased Baseline10 Work \u2713 \u2713 \u2713 Timephased Baseline Cost \u2713 \u2713 \u2713 Timephased Baseline Work \u2713 \u2713 \u2713"},{"location":"mpp-field-guide/#custom-fields_2","title":"Custom Fields","text":"Field MPP8 MPP9 MPP12 MPP14 Cost1 \u2713 \u2713 \u2713 Cost2 \u2713 \u2713 \u2713 Cost3 \u2713 \u2713 \u2713 Cost4 \u2713 \u2713 \u2713 Cost5 \u2713 \u2713 \u2713 Cost6 \u2713 \u2713 \u2713 Cost7 \u2713 \u2713 \u2713 Cost8 \u2713 \u2713 \u2713 Cost9 \u2713 \u2713 \u2713 Cost10 \u2713 \u2713 \u2713 Date1 \u2713 \u2713 \u2713 Date2 \u2713 \u2713 \u2713 Date3 \u2713 \u2713 \u2713 Date4 \u2713 \u2713 \u2713 Date5 \u2713 \u2713 \u2713 Date6 \u2713 \u2713 \u2713 Date7 \u2713 \u2713 \u2713 Date8 \u2713 \u2713 \u2713 Date9 \u2713 \u2713 \u2713 Date10 \u2713 \u2713 \u2713 Duration1 \u2713 \u2713 \u2713 Duration1 Units \u2713 \u2713 \u2713 Duration2 \u2713 \u2713 \u2713 Duration2 Units \u2713 \u2713 \u2713 Duration3 \u2713 \u2713 \u2713 Duration3 Units \u2713 \u2713 \u2713 Duration4 \u2713 \u2713 \u2713 Duration4 Units \u2713 \u2713 \u2713 Duration5 \u2713 \u2713 \u2713 Duration5 Units \u2713 \u2713 \u2713 Duration6 \u2713 \u2713 \u2713 Duration6 Units \u2713 \u2713 \u2713 Duration7 \u2713 \u2713 \u2713 Duration7 Units \u2713 \u2713 \u2713 Duration8 \u2713 \u2713 \u2713 Duration8 Units \u2713 \u2713 \u2713 Duration9 \u2713 \u2713 \u2713 Duration9 Units \u2713 \u2713 \u2713 Duration10 \u2713 \u2713 \u2713 Duration10 Units \u2713 \u2713 \u2713 Finish1 \u2713 \u2713 \u2713 Finish2 \u2713 \u2713 \u2713 Finish3 \u2713 \u2713 \u2713 Finish4 \u2713 \u2713 \u2713 Finish5 \u2713 \u2713 \u2713 Finish6 \u2713 \u2713 \u2713 Finish7 \u2713 \u2713 \u2713 Finish8 \u2713 \u2713 \u2713 Finish9 \u2713 \u2713 \u2713 Finish10 \u2713 \u2713 \u2713 Flag1 \u2713 \u2713 \u2713 Flag2 \u2713 \u2713 \u2713 Flag3 \u2713 \u2713 \u2713 Flag4 \u2713 \u2713 \u2713 Flag5 \u2713 \u2713 \u2713 Flag6 \u2713 \u2713 \u2713 Flag7 \u2713 \u2713 \u2713 Flag8 \u2713 \u2713 \u2713 Flag9 \u2713 \u2713 \u2713 Flag10 \u2713 \u2713 \u2713 Flag11 \u2713 \u2713 \u2713 Flag12 \u2713 \u2713 \u2713 Flag13 \u2713 \u2713 \u2713 Flag14 \u2713 \u2713 \u2713 Flag15 \u2713 \u2713 \u2713 Flag16 \u2713 \u2713 \u2713 Flag17 \u2713 \u2713 \u2713 Flag18 \u2713 \u2713 \u2713 Flag19 \u2713 \u2713 \u2713 Flag20 \u2713 \u2713 \u2713 Number1 \u2713 \u2713 \u2713 Number2 \u2713 \u2713 \u2713 Number3 \u2713 \u2713 \u2713 Number4 \u2713 \u2713 \u2713 Number5 \u2713 \u2713 \u2713 Number6 \u2713 \u2713 \u2713 Number7 \u2713 \u2713 \u2713 Number8 \u2713 \u2713 \u2713 Number9 \u2713 \u2713 \u2713 Number10 \u2713 \u2713 \u2713 Number11 \u2713 \u2713 \u2713 Number12 \u2713 \u2713 \u2713 Number13 \u2713 \u2713 \u2713 Number14 \u2713 \u2713 \u2713 Number15 \u2713 \u2713 \u2713 Number16 \u2713 \u2713 \u2713 Number17 \u2713 \u2713 \u2713 Number18 \u2713 \u2713 \u2713 Number19 \u2713 \u2713 \u2713 Number20 \u2713 \u2713 \u2713 Start1 \u2713 \u2713 \u2713 Start2 \u2713 \u2713 \u2713 Start3 \u2713 \u2713 \u2713 Start4 \u2713 \u2713 \u2713 Start5 \u2713 \u2713 \u2713 Start6 \u2713 \u2713 \u2713 Start7 \u2713 \u2713 \u2713 Start8 \u2713 \u2713 \u2713 Start9 \u2713 \u2713 \u2713 Start10 \u2713 \u2713 \u2713 Text1 \u2713 \u2713 \u2713 Text2 \u2713 \u2713 \u2713 Text3 \u2713 \u2713 \u2713 Text4 \u2713 \u2713 \u2713 Text5 \u2713 \u2713 \u2713 Text6 \u2713 \u2713 \u2713 Text7 \u2713 \u2713 \u2713 Text8 \u2713 \u2713 \u2713 Text9 \u2713 \u2713 \u2713 Text10 \u2713 \u2713 \u2713 Text11 \u2713 \u2713 \u2713 Text12 \u2713 \u2713 \u2713 Text13 \u2713 \u2713 \u2713 Text14 \u2713 \u2713 \u2713 Text15 \u2713 \u2713 \u2713 Text16 \u2713 \u2713 \u2713 Text17 \u2713 \u2713 \u2713 Text18 \u2713 \u2713 \u2713 Text19 \u2713 \u2713 \u2713 Text20 \u2713 \u2713 \u2713 Text21 \u2713 \u2713 \u2713 Text22 \u2713 \u2713 \u2713 Text23 \u2713 \u2713 \u2713 Text24 \u2713 \u2713 \u2713 Text25 \u2713 \u2713 \u2713 Text26 \u2713 \u2713 \u2713 Text27 \u2713 \u2713 \u2713 Text28 \u2713 \u2713 \u2713 Text29 \u2713 \u2713 \u2713 Text30 \u2713 \u2713 \u2713"},{"location":"store/","title":"Store","text":"<p>Yes, MPXJ has merchandise! For a small range of MPXJ branded clothing, please visit the MPXJ store. All purchases made from the store help to suport the development of MPXJ.</p> <p>Thank you!</p>"},{"location":"support/","title":"Support","text":"<p>Support and feature requests can be opened on MPXJ's issue tracker. I will respond to these as time permits.</p> <p>For more pressing issues, commercial support is available via my company Timephased. I can also provide consultancy around the use of MPXJ and implementation services. Please contact me directly for further details.</p>"},{"location":"supported-formats/","title":"Supported Formats","text":"<ul> <li> <p>MPX: The MPX file format can be read by versions of Microsoft Project up to and including Microsoft Project 2010, and written by versions up to Microsoft Project 98. MPXJ allows MPX files to be created, read and written. See this Microsoft support article for a definition of the file format.</p> </li> <li> <p>MPP: The MPP file format is Microsoft's proprietary way of storing project data. MPXJ supports read only access to MPP files produced by Microsoft Project 98, Microsoft Project 2000, Microsoft  Project 2002, Microsoft Project 2003, Microsoft Project 2007, Microsoft Project 2010, Microsoft Project 2013, Microsoft Project 2016, and Microsoft Project 2019. MPP template files, with the suffix MPT are also supported.</p> </li> <li> <p>MSPDI: The MSPDI file format is Microsoft's XML file format for storing project data. Versions of Microsoft Project from 2002 onwards can read and write MSPDI files.  MPXJ allows MSPDI files to be created, read, and written. The MSDPI file format has remained broadly unchanged since it was introduced, although several versions of Microsoft Project have tweaked the file format slightly, and have their own updated documentation. Documentation is available online here. Documentation for the Project 2003 MSPDI file format can be downloaded as part of the Office 2003 XML Reference Schemas package. Documentation for the Project 2007 MSPDI file format can be downloaded as part of the Project 2007 SDK. Documentation for the Project 2010 MSPDI file format can be downloaded as part of the Project 2010 Reference: Software Development Kit. Documentation for the Project 2013 MSPDI file format can be downloaded as part of the Project 2013 SDK.</p> </li> <li> <p>MPD: The MPD file format is an Access database used to store one or more projects. The database schema used in these databases is  also close to that used by Microsoft Project Server. MPXJ can read projects stored in an MPD file using a JDBC connection. It is possible that MPXJ could  also read the same data from a Microsoft Project Server database using the same approach, but this is not something I've tested.</p> </li> <li> <p>PLANNER: Planner is an Open Source project management tool which uses an XML file format to store project data. MPXJ can read and write the Planner file format.</p> </li> <li> <p>PRIMAVERA P6: Primavera P6 is an industry-leading tool favoured by users with complex planning requirements. It can export project data in the  form of XER or PMXML files, both of which MPXJ can read. It is also possible for MPXJ to connect directly to the P6 database via JDBC to read project data. MPXJ can also write PMXML files  to allow data to be exported in a form which can be consumed by P6. The PMXML schema forms part of the P6 distribution media, which can be downloaded from the Oracle e-Delivery site.</p> </li> <li> <p>PRIMAVERA P3: Primavera P3 (Primavera Project Planner) is the forerunner of P6. It holds projects in Btrieve database files which MPXJ can read from a directory or from a zip archive. MPXJ can also read P3 data from PRX backup files.</p> </li> <li> <p>PRIMAVERA SURETRAK: SureTrak holds projects in Btrieve database files which MPXJ can read from a directory or from a zip archive. MPXJ can also read SureTrak data from STX backup files.</p> </li> <li> <p>POWERPROJECT: Asta Powerproject is a planning tool used in a number of industries,  particularly construction. Powerproject can save data to PP files or to MDB database files,  and MPXJ can read both of these formats.</p> </li> <li> <p>PHOENIX: Phoenix Project Manager is an easy-to-use critical path method scheduling tool aimed primarily at the construction industry. Phoenix writes PPX files which MPXJ can read. </p> </li> <li> <p>FASTTRACK: Fasttrack Schedule is general purpose planning tool. FastTrack writes FTS files which MPXJ can read.</p> </li> <li> <p>GANTTPROJECT: GanttProject is an open source general purpose planning tool. GanttProject writes GAN files which MPXJ can read.</p> </li> <li> <p>TURBOPROJECT: TurboProject is general purpose planning tool. TurboProject writes PEP files which MPXJ can read.</p> </li> <li> <p>CONECPTDRAW PROJECT: ConceptDraw PROJECT is general purpose planning tool. ConceptDraw PROJECT writes CDPX, CDPZ and CDPTZ files which MPXJ can read.</p> </li> <li> <p>SYNCHRO SCHEDULER: Synchro Scheduler is general purpose planning tool. Synchro Scheduler writes SP files which MPXJ can read.</p> </li> <li> <p>GANTT DESIGNER: Gantt Designer is a simple Gantt chart drawing tool. Gantt Designer writes GNT files which MPXJ can read.</p> </li> <li> <p>SDEF: SDEF is the Standard Data Exchange Format, as defined by the USACE (United States Army Corps of Engineers). SDEF is a fixed column format text file, used to import a project schedule up into the QCS (Quality Control System) software from USACE. MPXJ can read and write SDEF files. The specification for the file format can be found here.</p> </li> <li> <p>SCHEDULE_GRID: Schedule grid files are produced when a schedule is exported from Sage 100 Contractor. MPXJ can read schedule grid files.</p> </li> <li> <p>PROJECT COMMANDER: Project Commander files are the native file format used by the Project Commander application. Project Commander writes PC files which MPXJ can read.</p> </li> </ul>"},{"location":"users/","title":"MPXJ Users","text":"<p>Here is a list of organisations and projects currently using, or believed to be using MPXJ. Feel free to contact me if you would like to be featured in this list.</p> <ul> <li>]project-open[ www.project-open.com</li> <li>a-dato www.a-dato.net</li> <li>Afinion Project Viewer www.afinion.de</li> <li>allProView www.allproview.com</li> <li>Atlas Authority atlasauthority.com</li> <li>Aurea Savvion BPM Studio www.aurea.com</li> <li>Autodesk Build \u2013 Schedule construction.autodesk.com/products/autodesk-build/</li> <li>Bosch RefinemySite www.bosch-refinemysite.com</li> <li>Bryntum bryntum.com</li> <li>Celoxis www.celoxis.com</li> <li>Change Inspector www.changeinspector.com</li> <li>Comindwork www.comindwork.com</li> <li>Complex Data Exchange www.informatica.com</li> <li>ConceptDraw www.conceptdraw.com/</li> <li>CS Project www.crestsoftware.co.uk/cs-project/planning/</li> <li>CV Projects www.cvprojects.com</li> <li>DHTMLX Gantt dhtmlx.com/docs/products/dhtmlxGantt</li> <li>DTP www.parasoft.com/products/parasoft-dtp</li> <li>eProject www.eprocorp.com</li> <li>Exicom www.exicom.se/en</li> <li>FastTrack Schedule www.aecsoftware.com</li> <li>forProject www.forproject.com</li> <li>Frontline www.frontlinec.com</li> <li>Gantt Designer timios.net/Gantt</li> <li>Gantter gantter.com</li> <li>GanttPro ganttpro.com</li> <li>GanttProject www.ganttproject.biz</li> <li>Ganttzilla www.ganttzilla.com</li> <li>GIS PAM www.gish.de</li> <li>Housatonic Project Viewer Central www.projectviewercentral.com</li> <li>HPE Project and Portfolio Management Center admhelp.microfocus.com/ppm</li> <li>HudsonFog www.hudsonfog.com</li> <li>i-lign www.ilign.com</li> <li>IBM TRIRIGA www.ibm.com/uk-en/marketplace/ibm-tririga</li> <li>Incremental www.incremental.eu.com</li> <li>Ingantt ingantt.com</li> <li>Intellisys www.webintellisys.com</li> <li>Lean Station leanstation.com/</li> <li>LibrePlan www.libreplan.dev</li> <li>Lighthouse www.artifactsoftware.com</li> <li>LiveProject www.kadonk.com</li> <li>Merlin www.projectwizards.net</li> <li>Milestones Professional kidasa.com</li> <li>MOOS Project Viewer www.moosprojectviewer.com</li> <li>mpower www.monitor-mpower.com</li> <li>Mpp Viewer www.sourceforge.net/projects/mppviewer</li> <li>MsProjecttools www.msprojecttools.com</li> <li>OmniPlan www.omnigroup.com</li> <li>OnePager www.onepager.com</li> <li>Onepoint Project www.onepoint-project.com</li> <li>Opdec www.opdec.com</li> <li>OpenProj openproj.org</li> <li>Pavone www.pavone.com</li> <li>Pemari www.pemari.com</li> <li>PIEmatrix piematrix.com</li> <li>PlantSight www.bentley.com/en/products/brands/plantsight</li> <li>Plexus www.plexsusplanning.com</li> <li>Predict! www.riskdecisions.com</li> <li>Primavera Unifier http://www.oracle.com/industries/construction-engineering/unifier-facilities-asset-management/</li> <li>Procore www.procore.com</li> <li>ProjectForge www.projectforge.org</li> <li>PROJECT in a box projectinabox.org.uk</li> <li>Project Kit www.methodpark.de</li> <li>ProjectLibre www.projectlibre.org</li> <li>Projec.to Online Microsoft Project Viewer www.onlineprojectviewer.com/</li> <li>ProjExec www.triloggroup.com</li> <li>RationalPlan www.rationalplan.com</li> <li>Safran www.safran.com</li> <li>SAP Conversion Agent by Informatica help.sap.com</li> <li>SharedPlan www.sharedplan.com</li> <li>SmartWorks www.smartworks.us/</li> <li>StaffPM code.google.com/p/mhe3-staffpm</li> <li>Steelray Project Viewer www.steelray.com</li> <li>Tamara www.vosesoftware.com/products/tamara</li> <li>Task Adapter www.taskadapter.com</li> <li>Team Elements sourceforge.net/projects/teamelements</li> <li>Teamwork www.twproject.com</li> <li>ThoughtWeb www.thoughtweb.com</li> <li>Timenow timenow.com.br</li> <li>TrackStudio www.trackstudio.com</li> <li>Turbo Chart - Linear Project Software turbo-chart.com</li> <li>Virtuelle Projektverwaltung www.swissasp.ch</li> <li>Windchill ProjectLink www.ptc.com/products/windchill-projectlink</li> <li>Workfront www.workfront.com</li> <li>Xena xena.sourceforge.net</li> <li>xPlanner www.xplanner.org</li> <li>xProcess www.openxprocess.com</li> <li>Zilicus www.zilicus.com</li> <li>ZTimeView www.tuwien.ac.at</li> <li>Zurvan Planning zurvan-planning.com</li> </ul>"}]}