<?xml version="1.0"?>

<project name="net.sf.mpxj" default="archive" basedir=".">

	<target name="init" description="Initialize properties">
		<tstamp />
		<property environment="env"/>

		<!-- Build Configuration -->
		<property name="current.version" value="12.1.3" />

		<!-- Environment Configuration-->
		<property name="maven.cmd" value="mvn.cmd"/>
		<property name="ruby.cmd" value="bundle.bat"/>
		<property name="python.cmd" value="py.exe" />
		<property name="nuget.cmd" value="nuget.exe" />
		<property name="ikvm.net45.dir" value="${basedir}/../ikvm-8.1.5717.0" />
		<property name="ikvmc.net45.cmd" value="${ikvm.net45.dir}/bin/ikvmc.exe" />
		<property name="ikvmstub.net45.cmd" value="${ikvm.net45.dir}/bin/ikvmstub.exe" />
		<property name="tlbexp.net45.cmd" value="${basedir}/../NETFX 4.5.1 Tools/tlbexp.exe" />
		<property name="ikvm.nca31.dir" value="${basedir}/../ikvm-netcoreapp3.1" />
		<property name="ikvmc.nca31.cmd" value="${ikvm.nca31.dir}/ikvmc.exe" />
		<property name="ikvmstub.nca31.cmd" value="${ikvm.nca31.dir}/ikvmstub.exe" />
		<property name="xjc.cmd" value="${basedir}/../jaxb-ri-2.3.3/bin/xjc.bat" />

		<!-- Common properties -->
		<property name="dist.dir" value="${basedir}/dist" />
		<property name="lib.dir" value="${basedir}/lib" />
		<property name="distribution" value="${dist.dir}/mpxj-${current.version}.zip" />

		<!-- Runtime Dependencies -->
		<property name="poi.jar" value="poi-5.2.2" />
		<property name="poifs.jar" value="poifs-5.2.2"/>
		<property name="commons-collections.jar" value="commons-collections4-4.4" />
		<property name="commons-io.jar" value="commons-io-2.11.0" />
		<property name="commons-math.jar" value="commons-math3-3.6.1" />
		<property name="log4j-api.jar" value="log4j-api-2.17.2" />
		<property name="rtfparserkit.jar" value="rtfparserkit-1.16.0" />
		<property name="sqlite-jdbc.jar" value="sqlite-jdbc-3.42.0.0" />
		<property name="jsoup.jar" value="jsoup-1.15.3" />
		<property name="commons-lang3.jar" value="commons-lang3-3.10" />
		<property name="commons-logging.jar" value="commons-logging-1.2" />
		<property name="jackcess.jar" value="jackcess-4.0.1" />

		<!-- Test Dependencies -->
		<property name="junit.jar" value="junit-4.13.1"/>
		<property name="hamcrest.jar" value="hamcrest-core-1.3"/>

		<!-- Dependency Paths -->
		<path id="poi.path"><pathelement location="${lib.dir}/${poi.jar}.jar" /></path>
		<path id="commons-collections.path"><pathelement location="${lib.dir}/${commons-collections.jar}.jar" /></path>
		<path id="commons-io.path"><pathelement location="${lib.dir}/${commons-io.jar}.jar" /></path>
		<path id="commons-math.path"><pathelement location="${lib.dir}/${commons-math.jar}.jar" /></path>
		<path id="log4j-api.path"><pathelement location="${lib.dir}/${log4j-api.jar}.jar" /></path>
		<path id="rtfparserkit.path"><pathelement location="${lib.dir}/${rtfparserkit.jar}.jar" /></path>
		<path id="sqlite-jdbc.path"><pathelement location="${lib.dir}/${sqlite-jdbc.jar}.jar" /></path>
		<path id="jsoup.path"><pathelement location="${lib.dir}/${jsoup.jar}.jar" /></path>
		<path id="commons-lang3.path"><pathelement location="${lib.dir}/${commons-lang3.jar}.jar" /></path>
		<path id="commons-logging.path"><pathelement location="${lib.dir}/${commons-logging.jar}.jar" /></path>
		<path id="jackcess.path"><pathelement location="${lib.dir}/${jackcess.jar}.jar" /></path>
		<path id="junit.path"><pathelement location="${lib.dir}/${junit.jar}.jar" /></path>

		<!-- Dependency Classpaths -->
		<property name="poi.classpath" refid="poi.path" />
		<property name="commons-collections.classpath" refid="commons-collections.path" />
		<property name="commons-io.classpath" refid="commons-io.path" />
		<property name="commons-math.classpath" refid="commons-math.path" />
		<property name="log4j-api.classpath" refid="log4j-api.path" />
		<property name="rtfparserkit.classpath" refid="rtfparserkit.path" />
		<property name="sqlite-jdbc.classpath" refid="sqlite-jdbc.path" />
		<property name="jsoup.classpath" refid="jsoup.path" />
		<property name="commons-lang3.classpath" refid="commons-lang3.path" />
		<property name="commons-logging.classpath" refid="commons-logging.path" />
		<property name="jackcess.classpath" refid="jackcess.path" />
		<property name="junit.classpath" refid="junit.path" />
	</target>

	<target name="update-version-numbers" depends="init" description="Ensure that version numbers in the code are up-to-date">
		<replaceregexp file="${basedir}/pom.xml"
		               match="&lt;!-- MPXJ --&gt;&lt;version&gt;.*&lt;/version&gt;"
		               replace="&lt;!-- MPXJ --&gt;&lt;version&gt;${current.version}&lt;/version&gt;"
		               byline="true"
		/>

		<replaceregexp
		               match='(\[assembly: (AssemblyVersion|AssemblyFileVersion)\(").+("\)\])'
		               replace='\1${current.version}.0\3'
		               byline="true">
			<fileset dir="${basedir}/src.net/samples" includes="**/*.cs" />
		</replaceregexp>

		<replaceregexp
		               match='(\[assembly: (AssemblyVersion|AssemblyFileVersion)\(").+("\)\])'
		               replace='\1${current.version}.0\3'
		               byline="true">
			<fileset dir="${basedir}/src.net/utilities" includes="**/*.cs" />
		</replaceregexp>

		<replaceregexp file="${basedir}/src.net/utilities/MpxjUtilities.nca31.csproj"
		               match="&lt;Version&gt;.*&lt;/Version&gt;"
		               replace="&lt;Version&gt;${current.version}.0&lt;/Version&gt;"
		               byline="true"
		/>

		<replaceregexp file="${basedir}/src/main/java/net/sf/mpxj/MPXJ.java"
					   match='VERSION = ".*"'
					   replace='VERSION = "${current.version}"'
					   byline="true"
		/>

		<replaceregexp file="${basedir}/src.ruby/mpxj/lib/mpxj/version.rb"
		               match='VERSION = ".*"'
		               replace='VERSION = "${current.version}"'
		               byline="true"
		/>

		<replaceregexp file="${basedir}/src.python/mpxj/setup.py"
		               match='version=".*",'
		               replace='version="${current.version}",'
		               byline="true"
		/>
	</target>

	<target name="package" depends="init,update-version-numbers">
		<exec executable="${maven.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-DskipTests=true -Dmaven.javadoc.skip=true -Dsource.skip=true package" />
		</exec>
		<copy file="${basedir}/target/mpxj-${current.version}.jar" tofile="${basedir}/mpxj.jar"/>
		<copy file="${basedir}/target/mpxj-${current.version}-tests.jar" tofile="${basedir}/mpxj-test.jar"/>
	</target>

	<target name="changelog" description="Update changelog">
		<xslt in="${basedir}/src/changes/changes.xml" out="${basedir}/CHANGELOG.md" style="${basedir}/doc/changelog.xsl"/>
	</target>

	<target name="releasenotes" depends="init" description="Create release notes">
		<xslt in="${basedir}/src/changes/changes.xml" out="${dist.dir}/readme.md" style="${basedir}/doc/releasenote.xsl">
			<param name="version" expression="${current.version}"/>
		</xslt>
	</target>

	<target name="gem-source" description="Generate source required by Ruby gem">
		<java classname="net.sf.mpxj.ruby.MethodGenerator" failonerror="true">
			<arg value="${basedir}/src.ruby/mpxj/lib/mpxj" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${basedir}/mpxj.jar" />
			</classpath>
		</java>
	</target>

	<!-- For deploy efficiency, assumes that the package target has been run -->
	<target name="gem-setup" depends="init" description="Build jars required by ruby gem and copy to correct location">
		<copy file="${basedir}/mpxj.jar" todir="${basedir}/src.ruby/mpxj/lib/mpxj"/>
		<copy todir="${basedir}/src.ruby/mpxj/lib/mpxj">
			<fileset dir="${lib.dir}" includes="*.jar" />
		</copy>
		<copy todir="${basedir}/src.ruby/mpxj/legal">
			<fileset dir="${basedir}/legal" includes="*" />
		</copy>
	</target>

	<target name="gem-test" depends="gem-setup" description="Run ruby gem tests">
		<exec executable="${ruby.cmd}" dir="${basedir}/src.ruby/mpxj" failonerror="true">
			<arg line="exec rspec spec" />
		</exec>
	</target>

	<target name="gem-deploy" depends="gem-setup" description="Deploy rubygem to rubygems.org">
		<exec executable="${ruby.cmd}" dir="${basedir}/src.ruby/mpxj" failonerror="true">
			<arg line="exec rake build release:rubygem_push" />
		</exec>
	</target>

	<target name="gem-copy" depends="gem-setup" description="Copy gem to a local directory">
		<copy todir="//VBOXSVR/Downloads/mpxj.gem">
			<fileset dir="${basedir}/src.ruby/mpxj" includes="**" />
		</copy>
	</target>

	<!-- For deploy efficiency, assumes that the package target has been run -->
	<target name="python-setup" depends="init" description="Build jars required by python package and copy to correct location">
		<copy file="${basedir}/mpxj.jar" todir="${basedir}/src.python/mpxj/mpxj/lib"/>
		<copy todir="${basedir}/src.python/mpxj/mpxj/lib">
			<fileset dir="${lib.dir}" includes="*.jar" />
		</copy>
		<copy todir="${basedir}/src.python/mpxj/legal">
			<fileset dir="${basedir}/legal" includes="*" />
		</copy>
	</target>

	<!-- Ensure build is installed: py -m pip install - -upgrade build -->
	<target name="python-build" depends="python-setup" description="Build python package">
		<exec executable="${python.cmd}" dir="${basedir}/src.python/mpxj" failonerror="true">
			<arg line="-m build" />
		</exec>
	</target>

	<target name="python-copy" depends="python-build" description="Copy python package to a local directory">
		<copy todir="//VBOXSVR/Downloads">
			<fileset dir="${basedir}/src.python/mpxj/dist" includes="*.gz" />
		</copy>
	</target>

	<target name="python-deploy-test" depends="python-build" description="Deploy python package to pypitest">
		<exec executable="${python.cmd}" dir="${basedir}/src.python/mpxj" failonerror="true">
			<arg line="-m twine upload -r pypitest dist/*" />
		</exec>
	</target>

	<!-- Ensure twine is installed py -m pip install twine -->
	<target name="python-deploy" depends="python-build" description="Deploy python package to pypi">
		<exec executable="${python.cmd}" dir="${basedir}/src.python/mpxj" failonerror="true">
			<arg line="-m twine upload -r pypi dist/*" />
		</exec>
	</target>

	<target name="xjc" depends="init" description="Rebuild source generated by JAXB">
		<property name="classes.dir" value="${basedir}/target/classes" />

		<!-- Copy in schemas not included with MPXJ -->
		<copy file="${env.MPXJ_SCHEMA_DIR}/conceptdraw/document-corrected.xsd" toDir="${basedir}/jaxb"/>
		<copy file="${env.MPXJ_SCHEMA_DIR}/mspdi/mspdi_pj15-corrected.xsd" toDir="${basedir}/jaxb"/>
		<copy file="${env.MPXJ_SCHEMA_DIR}/pmxml/p6v2212-p6apibo-corrected.xsd" toDir="${basedir}/jaxb"/>

		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b mspdi-binding.xjb -p net.sf.mpxj.mspdi.schema mspdi_pj15-corrected.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b mrproject.xjb -p net.sf.mpxj.planner.schema mrproject-0.6.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b pm-binding.xjb -p net.sf.mpxj.primavera.schema p6v2212-p6apibo-corrected.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b phoenix-4-binding.xjb -p net.sf.mpxj.phoenix.schema.phoenix4 phoenix-4.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b phoenix-5-binding.xjb -p net.sf.mpxj.phoenix.schema.phoenix5 phoenix-5.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b ganttproject-binding.xjb -p net.sf.mpxj.ganttproject.schema ganttproject-2.8.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b conceptdraw-binding.xjb -p net.sf.mpxj.conceptdraw.schema document-corrected.xsd" />
		</exec>
		<exec executable="${xjc.cmd}" dir="${basedir}/jaxb" failonerror="true">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src/main/java -b gantt-designer-binding.xjb -p net.sf.mpxj.ganttdesigner.schema gantt-designer.xsd" />
		</exec>

		<!-- Remove schemas not included with MPXJ -->
		<delete file="${basedir}/jaxb/document-corrected.xsd"/>
		<delete file="${basedir}/jaxb/mspdi_pj15-corrected.xsd"/>
		<delete file="${basedir}/jaxb/p6v2212-p6apibo-corrected.xsd"/>
	</target>

	<target name="ikvm-init" depends="init">
		<property name="mpxj.snk" value="${basedir}/src.net/mpxj.snk"/>
		<property name="ikvm.working.dir" value="${basedir}/ikvm.tmp" />
	</target>

	<target name="ikvm-net45-init" depends="ikvm-init">
		<property name="lib.net45.dir" value="${basedir}/src.net/lib/net45" />
		<property name="poi.net45.dll" value="${lib.net45.dir}\${poi.jar}.dll" />
		<property name="commons-collections.net45.dll" value="${lib.net45.dir}\${commons-collections.jar}.dll" />
		<property name="commons-io.net45.dll" value="${lib.net45.dir}\${commons-io.jar}.dll" />
		<property name="commons-math.net45.dll" value="${lib.net45.dir}\${commons-math.jar}.dll" />
		<property name="log4j-api.net45.dll" value="${lib.net45.dir}\${log4j-api.jar}.dll" />
		<property name="rtfparserkit.net45.dll" value="${lib.net45.dir}\${rtfparserkit.jar}.dll" />
		<property name="sqlite-jdbc.net45.dll" value="${lib.net45.dir}\${sqlite-jdbc.jar}.dll" />
		<property name="jsoup.net45.dll" value="${lib.net45.dir}\${jsoup.jar}.dll" />
		<property name="commons-lang3.net45.dll" value="${lib.net45.dir}\${commons-lang3.jar}.dll" />
		<property name="commons-logging.net45.dll" value="${lib.net45.dir}\${commons-logging.jar}.dll" />
		<property name="jackcess.net45.dll" value="${lib.net45.dir}\${jackcess.jar}.dll" />
		<property name="junit.net45.dll" value="${lib.net45.dir}\junit.dll" />
		<property name="mpxj.net45.dll" value="${lib.net45.dir}\mpxj.dll" />
		<property name="mpxj-test.net45.dll" value="${lib.net45.dir}\mpxj-test.dll" />
		<property name="mpxj-for-vb.net45.dll" value="${lib.net45.dir}\mpxj-for-vb.dll" />
		<property name="mpxj-for-csharp.net45.dll" value="${lib.net45.dir}\mpxj-for-csharp.dll" />
		<property name="mpxj-utilities.net45.dll" value="${lib.net45.dir}\MpxjUtilities.dll" />

		<available file="${ikvmc.net45.cmd}" property="ikvm.net45.available" />
		<available file="${tlbexp.net45.cmd}" property="tlbexp.available" />
		<condition property="dotnet.available">
			<and>
				<available file="dotnet.exe" filepath="${env.Path}" property="dotnet.available" />
				<isset property="ikvm.net45.available"/>
			</and>
		</condition>
	</target>

	<target name="ikvm-nca31-init" depends="ikvm-init">
		<property name="lib.nca31.dir" value="${basedir}/src.net/lib/netcoreapp3.1" />
		<property name="poi.nca31.dll" value="${lib.nca31.dir}\${poi.jar}.dll" />
		<property name="commons-collections.nca31.dll" value="${lib.nca31.dir}\${commons-collections.jar}.dll" />
		<property name="commons-io.nca31.dll" value="${lib.nca31.dir}\${commons-io.jar}.dll" />
		<property name="commons-math.nca31.dll" value="${lib.nca31.dir}\${commons-math.jar}.dll" />
		<property name="log4j-api.nca31.dll" value="${lib.nca31.dir}\${log4j-api.jar}.dll" />
		<property name="rtfparserkit.nca31.dll" value="${lib.nca31.dir}\${rtfparserkit.jar}.dll" />
		<property name="sqlite-jdbc.nca31.dll" value="${lib.nca31.dir}\${sqlite-jdbc.jar}.dll" />
		<property name="jsoup.nca31.dll" value="${lib.nca31.dir}\${jsoup.jar}.dll" />
		<property name="commons-lang3.nca31.dll" value="${lib.nca31.dir}\${commons-lang3.jar}.dll" />
		<property name="commons-logging.nca31.dll" value="${lib.nca31.dir}\${commons-logging.jar}.dll" />
		<property name="jackcess.nca31.dll" value="${lib.nca31.dir}\${jackcess.jar}.dll" />
		<property name="junit.nca31.dll" value="${lib.nca31.dir}\junit.dll" />
		<property name="mpxj.nca31.dll" value="${lib.nca31.dir}\mpxj.dll" />
		<property name="mpxj-test.nca31.dll" value="${lib.nca31.dir}\mpxj-test.dll" />
		<property name="mpxj-for-vb.nca31.dll" value="${lib.nca31.dir}\mpxj-for-vb.dll" />
		<property name="mpxj-for-csharp.nca31.dll" value="${lib.nca31.dir}\mpxj-for-csharp.dll" />
		<property name="mpxj-utilities.nca31.dll" value="${lib.nca31.dir}\MpxjUtilities.dll" />

		<available file="${ikvmc.nca31.cmd}" property="ikvm.nca31.available" />
		<condition property="dotnet.available">
			<and>
				<available file="dotnet.exe" filepath="${env.Path}" property="dotnet.available" />
				<isset property="ikvm.nca31.available"/>
			</and>
		</condition>
	</target>

	<target name="ikvm-net45-compile" depends="ikvm-net45-init" description="Compile everything ready for use with IKVM" if="ikvm.net45.available">

		<property name="ikvm.src.dir" value="${ikvm.working.dir}/src" />
		<property name="ikvm.src.test.dir" value="${ikvm.working.dir}/src.test" />
		<property name="ikvm.classes.dir" value="${ikvm.working.dir}/classes" />
		<property name="ikvm.classes.test.dir" value="${ikvm.working.dir}/classes.test" />
		<property name="ikvm.lib.dir" value="${ikvm.working.dir}/lib" />

		<!-- Extract the target JVM version from pom.xml -->
		<loadfile encoding="UTF-8" property="target-jvm-version" srcFile="${basedir}/pom.xml" >
	        <filterchain>
	            <tokenfilter>
	                <containsregex
	                    pattern="(\s*&lt;target&gt;)(.+)(&lt;/target&gt;\s*)"
	                    replace="\2" />
	            </tokenfilter>
	            <striplinebreaks />
	        </filterchain>
		</loadfile>

		<delete dir="${ikvm.working.dir}" />
		<mkdir dir="${ikvm.src.dir}" />
		<mkdir dir="${ikvm.src.test.dir}" />
		<mkdir dir="${ikvm.classes.dir}" />
		<mkdir dir="${ikvm.classes.test.dir}" />
		<mkdir dir="${ikvm.lib.dir}" />

		<exec executable="${ikvmstub.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-out:${ikvm.lib.dir}/mscorlib.jar mscorlib" />
		</exec>

		<copy todir="${ikvm.src.dir}">
			<fileset dir="${basedir}/src/main/java" includes="**" />
		</copy>

		<copy todir="${ikvm.src.test.dir}">
			<fileset dir="${basedir}/src/test/java">
				<exclude name="**/CustomerDataTestCharacterEscapeHandler*"/>
			</fileset>
		</copy>

		<replace dir="${ikvm.src.dir}" token="public class " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}public class ">
			<include name="**/*.java" />
			<exclude name="**/schema/*.java" />
			<exclude name="**/schema/phoenix*/*.java" />
			<exclude name="**/FieldMap.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="public final class " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}                       public final class ">
			<include name="**/*.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="public interface " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}                       public interface ">
			<include name="**/*.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="class ProjectEntity" value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}public class ProjectEntity">
			<include name="**/ProjectEntity.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="public enum " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}public enum ">
			<include name="**/*.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="final class XsdDuration" value="public final class XsdDuration">
			<include name="**/mspdi/XsdDuration.java" />
		</replace>

		<javac srcdir="${ikvm.src.dir}" destdir="${ikvm.classes.dir}" classpath="${classpath}:${poi.classpath}:${rtfparserkit.classpath}:${sqlite-jdbc.classpath}:${jsoup.classpath}:${commons-lang3.classpath}::${commons-logging.classpath}:${jackcess.classpath}:${ikvm.lib.dir}/mscorlib.jar" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false" excludes="net/sf/mpxj/explorer/**">
			<compilerarg line="-encoding cp1252" />
		</javac>

		<javac srcdir="${ikvm.src.test.dir}" destdir="${ikvm.classes.test.dir}" classpath="${classpath}:${ikvm.classes.dir}:${poi.classpath}:${rtfparserkit.classpath}:${sqlite-jdbc.classpath}:${jsoup.classpath}:${commons-lang3.classpath}:${commons-logging.classpath}:${jackcess.classpath}:${junit.classpath}:${ikvm.lib.dir}/mscorlib.jar" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false">
			<compilerarg line="-encoding cp1252" />
		</javac>

		<jar jarfile="${ikvm.working.dir}/mpxj.jar">
			<fileset dir="${ikvm.classes.dir}"/>
			<fileset dir="${basedir}/src/main/resources"/>
		</jar>
		<jar jarfile="${ikvm.working.dir}/mpxj-test.jar">
			<fileset dir="${ikvm.classes.test.dir}"/>
		</jar>
	</target>

	<target name="ikvm-nca31-compile" depends="ikvm-nca31-init" description="Compile everything ready for use with IKVM" if="ikvm.nca31.available">

		<property name="ikvm.src.dir" value="${ikvm.working.dir}/src" />
		<property name="ikvm.src.test.dir" value="${ikvm.working.dir}/src.test" />
		<property name="ikvm.classes.dir" value="${ikvm.working.dir}/classes" />
		<property name="ikvm.classes.test.dir" value="${ikvm.working.dir}/classes.test" />
		<property name="ikvm.lib.dir" value="${ikvm.working.dir}/lib" />

		<!-- Extract the target JVM version from pom.xml -->
		<loadfile encoding="UTF-8" property="target-jvm-version" srcFile="${basedir}/pom.xml" >
	        <filterchain>
	            <tokenfilter>
	                <containsregex
	                    pattern="(\s*&lt;target&gt;)(.+)(&lt;/target&gt;\s*)"
	                    replace="\2" />
	            </tokenfilter>
	            <striplinebreaks />
	        </filterchain>
		</loadfile>

		<delete dir="${ikvm.working.dir}" />
		<mkdir dir="${ikvm.src.dir}" />
		<mkdir dir="${ikvm.src.test.dir}" />
		<mkdir dir="${ikvm.classes.dir}" />
		<mkdir dir="${ikvm.classes.test.dir}" />
		<mkdir dir="${ikvm.lib.dir}" />

		<exec executable="${ikvmstub.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-out:${ikvm.lib.dir}/mscorlib.jar mscorlib" />
		</exec>

		<copy todir="${ikvm.src.dir}">
			<fileset dir="${basedir}/src/main/java" includes="**" />
		</copy>

		<copy todir="${ikvm.src.test.dir}">
			<fileset dir="${basedir}/src/test/java">
				<exclude name="**/CustomerDataTestCharacterEscapeHandler*"/>
			</fileset>
		</copy>

		<replace dir="${ikvm.src.dir}" token="final class XsdDuration" value="public final class XsdDuration">
			<include name="**/mspdi/XsdDuration.java" />
		</replace>

		<javac srcdir="${ikvm.src.dir}" destdir="${ikvm.classes.dir}" classpath="${classpath}:${poi.classpath}:${rtfparserkit.classpath}:${sqlite-jdbc.classpath}:${jsoup.classpath}:${commons-lang3.classpath}:${commons-logging.classpath}:${jackcess.classpath}:${ikvm.lib.dir}/mscorlib.jar" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false" excludes="net/sf/mpxj/explorer/**">
			<compilerarg line="-encoding cp1252" />
		</javac>

		<javac srcdir="${ikvm.src.test.dir}" destdir="${ikvm.classes.test.dir}" classpath="${classpath}:${ikvm.classes.dir}:${poi.classpath}:${rtfparserkit.classpath}:${sqlite-jdbc.classpath}:${jsoup.classpath}:${commons-lang3.classpath}:${commons-logging.classpath}:${jackcess.classpath}:${junit.classpath}:${ikvm.lib.dir}/mscorlib.jar" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false">
			<compilerarg line="-encoding cp1252" />
		</javac>

		<jar jarfile="${ikvm.working.dir}/mpxj.jar">
			<fileset dir="${ikvm.classes.dir}"/>
			<fileset dir="${basedir}/src/main/resources"/>
		</jar>
		<jar jarfile="${ikvm.working.dir}/mpxj-test.jar">
			<fileset dir="${ikvm.classes.test.dir}"/>
		</jar>
	</target>

	<target name="ikvm-net45-dll" depends="ikvm-net45-compile" description="Build .net DLLs" if="ikvm.net45.available">
		<java classname="net.sf.mpxj.ikvm.MapFileGenerator" failonerror="true">
			<arg value="${ikvm.working.dir}/mpxj.jar" />
			<arg value="${ikvm.working.dir}/ikvm-remap-vb.xml" />
			<arg value="False" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${ikvm.working.dir}/mpxj.jar" />
				<pathelement location="${junit.classpath}" />
				<pathelement location="${poi.classpath}" />
				<pathelement location="${rtfparserkit.classpath}" />
				<pathelement location="${sqlite-jdbc.classpath}" />
				<pathelement location="${jsoup.classpath}" />
				<pathelement location="${commons-lang3.classpath}" />
				<pathelement location="${commons-logging.classpath}" />
				<pathelement location="${jackcess.classpath}" />
			</classpath>
		</java>

		<java classname="net.sf.mpxj.ikvm.MapFileGenerator" failonerror="true">
			<arg value="${ikvm.working.dir}/mpxj.jar" />
			<arg value="${ikvm.working.dir}/ikvm-remap-csharp.xml" />
			<arg value="True" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${ikvm.working.dir}/mpxj.jar" />
				<pathelement location="${junit.classpath}" />
				<pathelement location="${poi.classpath}" />
				<pathelement location="${rtfparserkit.classpath}" />
				<pathelement location="${sqlite-jdbc.classpath}" />
				<pathelement location="${jsoup.classpath}" />
				<pathelement location="${commons-lang3.classpath}" />
				<pathelement location="${commons-logging.classpath}" />
				<pathelement location="${jackcess.classpath}" />
			</classpath>
		</java>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-collections.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${commons-collections.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-io.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${commons-io.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-math.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${commons-math.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${log4j-api.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${log4j-api.jar}.jar" />
		</exec>

		<!-- POI >= 5.0.0 won't compile as-is using IKVM. Instead we use poifs which is a cut down
		     version of POI which removes the parts we don't use and avoids Java language constructs
		     which IKVM doesn't like. https://github.com/joniles/poifs -->
		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -nowarn:0117 -out:${poi.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 -reference:${commons-collections.net45.dll} -reference:${commons-io.net45.dll} -reference:${commons-math.net45.dll} -reference:${log4j-api.net45.dll} ${basedir}/../poifs/target/${poifs.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${rtfparserkit.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${rtfparserkit.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${sqlite-jdbc.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${sqlite-jdbc.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${jsoup.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${jsoup.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-lang3.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${commons-lang3.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-logging.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${commons-logging.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${jackcess.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 -reference:${commons-lang3.net45.dll} -reference:${commons-logging.net45.dll} ${lib.dir}\${jackcess.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -nowarn:0100 -nowarn:0111 -nowarn:0105 -out:${junit.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 ${lib.dir}\${hamcrest.jar}.jar ${lib.dir}\${junit.jar}.jar" />
		</exec>

		<!-- Generate the original unmapped DLL -->
		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 -reference:${poi.net45.dll} -reference:${rtfparserkit.net45.dll} -reference:${sqlite-jdbc.net45.dll} -reference:${jsoup.net45.dll} -reference:${jackcess.net45.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj-test.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 -reference:${poi.net45.dll} -reference:${rtfparserkit.net45.dll} -reference:${sqlite-jdbc.net45.dll} -reference:${jsoup.net45.dll} -reference:${jackcess.net45.dll} -reference:${mpxj.net45.dll} -reference:${junit.net45.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj-test.jar" />
		</exec>

		<!-- Generate a mapped DLL for VB, avoids name clashes due to VB's case insensitivity -->
		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj-for-vb.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 -remap:${ikvm.working.dir}/ikvm-remap-vb.xml -reference:${poi.net45.dll} -reference:${rtfparserkit.net45.dll} -reference:${sqlite-jdbc.net45.dll} -reference:${jsoup.net45.dll} -reference:${jackcess.net45.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<!-- Generate a mapped DLL for C# and other .Net languages -->
		<exec executable="${ikvmc.net45.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj-for-csharp.net45.dll} -target:library -keyfile:${mpxj.snk} -version:${current.version}.0 -remap:${ikvm.working.dir}/ikvm-remap-csharp.xml -reference:${poi.net45.dll} -reference:${rtfparserkit.net45.dll} -reference:${sqlite-jdbc.net45.dll} -reference:${jsoup.net45.dll} -reference:${jackcess.net45.dll} -reference:mscorlib.dll -reference:system.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<!-- Export a Type Library (TLB) for each assembly. This step will fail if the assemblies are in the GAC! -->
		<apply executable="${tlbexp.net45.cmd}" parallel="false" relative="true" dir="${lib.net45.dir}" failifexecutionfails="true">
			<arg value="/nologo"/>
			<arg value="/silence:000017CE"/>
			<arg value="/silence:001311D9"/>
			<arg value="/silence:80131178"/>
			<arg value="/silence:0013117F"/>
			<arg value="/silence:8013117D"/>
			<arg value="/silence:801311B0"/>
			<arg value="/silence:80131172"/>
			<srcfile />
			<fileset dir="${lib.net45.dir}">
				<include name="**/*.dll" />
				<exclude name="**/ikvm-native*.dll" />
			</fileset>
		</apply>

		<!-- Generate a batch file which installs the assemblies in the GAC -->
		<echo file="${lib.net45.dir}\mpxj-gac-install.bat" message="@echo off${line.separator}echo This batch file installs the DLLs required to use MPXJ into the GAC${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true">
			<arg value="/c" />
			<srcfile prefix="echo gacutil /i " />
			<arg value="&gt;&gt; ${lib.net45.dir}\mpxj-gac-install.bat" />
			<fileset dir="${lib.net45.dir}">
				<include name="*.dll" />
			</fileset>
		</apply>
		<replace file="${lib.net45.dir}\mpxj-gac-install.bat" token='" "' value="" />

		<!-- Generate a batch file which removes the assemblies from the GAC -->
		<echo file="${lib.net45.dir}\mpxj-gac-uninstall.bat" message="@echo off${line.separator}echo This batch file uninstalls the DLLs required to use MPXJ from the GAC${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true" addsourcefile="false">
			<arg value="/c" />
			<targetfile prefix="echo gacutil /u " />
			<arg value="&gt;&gt; ${lib.net45.dir}\mpxj-gac-uninstall.bat" />
			<fileset dir="${lib.net45.dir}">
				<include name="**/*.dll" />
			</fileset>
			<mapper type="glob" from="*.dll" to="*"/>
		</apply>
		<replace file="${lib.net45.dir}\mpxj-gac-uninstall.bat" token='" "' value="" />

		<!-- Generate a batch file to register the assemblies -->
		<echo file="${lib.net45.dir}\mpxj-register-assemblies.bat" message="@echo off${line.separator}echo This batch file registers the .Net assemblies used by MPXJ so that they can be called from COM${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true">
			<arg value="/c" />
			<srcfile prefix="echo regasm " />
			<arg value="&gt;&gt; ${lib.net45.dir}\mpxj-register-assemblies.bat" />
			<fileset dir="${lib.net45.dir}">
				<include name="**/*.dll" />
			</fileset>
		</apply>
		<replace file="${lib.net45.dir}\mpxj-register-assemblies.bat" token='" "' value="" />

		<!-- Generate a batch file to unregister the assemblies -->
		<echo file="${lib.net45.dir}\mpxj-unregister-assemblies.bat" message="@echo off${line.separator}echo This batch file deregisters the .Net assemblies used by MPXJ so that they are no longer available to be called from COM${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true">
			<arg value="/c" />
			<srcfile prefix="echo regasm /u " />
			<arg value="&gt;&gt; ${lib.net45.dir}\mpxj-unregister-assemblies.bat" />
			<fileset dir="${lib.net45.dir}">
				<include name="**/*.dll" />
			</fileset>
		</apply>
		<replace file="${lib.net45.dir}\mpxj-unregister-assemblies.bat" token='" "' value="" />

		<delete dir="${ikvm.working.dir}" />
	</target>

	<target name="ikvm-nca31-dll" depends="ikvm-nca31-compile" description="Build .net DLLs" if="ikvm.nca31.available">
		<java classname="net.sf.mpxj.ikvm.MapFileGenerator" failonerror="true">
			<arg value="${ikvm.working.dir}/mpxj.jar" />
			<arg value="${ikvm.working.dir}/ikvm-remap-vb.xml" />
			<arg value="False" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${ikvm.working.dir}/mpxj.jar" />
				<pathelement location="${junit.classpath}" />
				<pathelement location="${poi.classpath}" />
				<pathelement location="${rtfparserkit.classpath}" />
				<pathelement location="${sqlite-jdbc.classpath}" />
				<pathelement location="${jsoup.classpath}" />
				<pathelement location="${commons-lang3.classpath}" />
				<pathelement location="${commons-logging.classpath}" />
				<pathelement location="${jackcess.classpath}" />
			</classpath>
		</java>

		<java classname="net.sf.mpxj.ikvm.MapFileGenerator" failonerror="true">
			<arg value="${ikvm.working.dir}/mpxj.jar" />
			<arg value="${ikvm.working.dir}/ikvm-remap-csharp.xml" />
			<arg value="True" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${ikvm.working.dir}/mpxj.jar" />
				<pathelement location="${junit.classpath}" />
				<pathelement location="${poi.classpath}" />
				<pathelement location="${rtfparserkit.classpath}" />
				<pathelement location="${sqlite-jdbc.classpath}" />
				<pathelement location="${jsoup.classpath}" />
				<pathelement location="${commons-lang3.classpath}" />
				<pathelement location="${commons-logging.classpath}" />
				<pathelement location="${jackcess.classpath}" />
			</classpath>
		</java>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-collections.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${commons-collections.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-io.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${commons-io.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-math.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${commons-math.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${log4j-api.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${log4j-api.jar}.jar" />
		</exec>

		<!-- POI >= 5.0.0 won't compile as-is using IKVM. Instead we use poifs which is a cut down
		     version of POI which removes the parts we don't use and avoids Java language constructs
		     which IKVM doesn't like. https://github.com/joniles/poifs -->
		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -nowarn:0117 -out:${poi.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:${commons-collections.nca31.dll} -reference:${commons-io.nca31.dll} -reference:${commons-math.nca31.dll} -reference:${log4j-api.nca31.dll} ${basedir}/../poifs/target/${poifs.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${rtfparserkit.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${rtfparserkit.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${jsoup.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${jsoup.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-lang3.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${commons-lang3.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${commons-logging.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${basedir}\lib\${commons-logging.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${jackcess.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:${commons-lang3.nca31.dll} -reference:${commons-logging.nca31.dll} ${basedir}\lib\${jackcess.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -nowarn:0100 -nowarn:0111 -nowarn:0105 -out:${junit.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll ${lib.dir}\${hamcrest.jar}.jar ${lib.dir}\${junit.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${sqlite-jdbc.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:System.Console.dll ${lib.dir}\${sqlite-jdbc.jar}.jar" />
		</exec>

		<!-- Generate the original unmapped DLL -->
		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:${poi.nca31.dll} -reference:${rtfparserkit.nca31.dll} -reference:${sqlite-jdbc.nca31.dll} -reference:${jsoup.nca31.dll} -reference:${jackcess.nca31.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj-test.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:${poi.nca31.dll} -reference:${rtfparserkit.nca31.dll} -reference:${sqlite-jdbc.nca31.dll} -reference:${jsoup.nca31.dll} -reference:${jackcess.nca31.dll} -reference:${mpxj.nca31.dll} -reference:${junit.nca31.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj-test.jar" />
		</exec>

		<!-- Generate a mapped DLL for VB, avoids name clashes due to VB's case insensitivity -->
		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj-for-vb.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -remap:${ikvm.working.dir}/ikvm-remap-vb.xml -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:${poi.nca31.dll} -reference:${rtfparserkit.nca31.dll} -reference:${sqlite-jdbc.nca31.dll} -reference:${jsoup.nca31.dll} -reference:${jackcess.nca31.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<!-- Generate a mapped DLL for C# and other .Net languages -->
		<exec executable="${ikvmc.nca31.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-nowarn:0003 -out:${mpxj-for-csharp.nca31.dll} -target:library -key:mpxj-key -version:${current.version}.0 -remap:${ikvm.working.dir}/ikvm-remap-csharp.xml -reference:System.Runtime.dll -reference:System.Runtime.Extensions.dll -reference:System.Threading.dll -reference:System.Threading.Thread.dll -reference:${poi.nca31.dll} -reference:${rtfparserkit.nca31.dll} -reference:${sqlite-jdbc.nca31.dll} -reference:${jsoup.nca31.dll} -reference:${jackcess.nca31.dll} -reference:mscorlib.dll -reference:system.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<delete dir="${ikvm.working.dir}" />
	</target>

	<target name="vs-net45-dll" depends="ikvm-net45-dll" description="Build .Net DLLs using Visual Studio" if="dotnet.available">
		<delete includeemptydirs="true">
			<fileset dir="${basedir}/src.net/utilities" defaultexcludes="false">
				<include name="bin" />
				<include name="obj" />
			</fileset>
		</delete>

		<exec executable="dotnet" dir="${basedir}" failonerror="true">
			<arg line="build src.net/utilities/MpxjUtilities.net45.csproj" />
		</exec>
		<copy file="src.net/utilities/bin/Debug/net45/MpxjUtilities.dll" tofile="${mpxj-utilities.net45.dll}"/>
	</target>

	<target name="vs-nca31-dll" depends="ikvm-nca31-dll" description="Build .Net DLLs using Visual Studio" if="dotnet.available">
		<delete includeemptydirs="true">
			<fileset dir="${basedir}/src.net/utilities" defaultexcludes="false">
				<include name="bin" />
				<include name="obj" />
			</fileset>
		</delete>

		<exec executable="dotnet" dir="${basedir}" failonerror="true">
			<arg line="build src.net/utilities/MpxjUtilities.nca31.csproj" />
		</exec>
		<copy file="src.net/utilities/bin/Debug/netcoreapp3.1/MpxjUtilities.dll" tofile="${mpxj-utilities.nca31.dll}"/>
	</target>

	<target name="archive" depends="package,ikvm-nca31-dll,vs-nca31-dll,ikvm-net45-dll,vs-net45-dll,gem-source,changelog,releasenotes" description="Create library files"/>

	<target name="distribute" depends="archive,clean-dot-net,nuget-package" description="Create distribution">
		<zip zipfile="${distribution}">
			<zipfileset dir="${basedir}" prefix="mpxj" excludes="target/**, dist/**" />
		</zip>
	</target>

	<target name="clean-temp" depends="init" description="Clean up temporary files">
		<delete>
			<fileset dir="${basedir}" includes="**/*~" defaultexcludes="no" />
		</delete>
	</target>

	<target name="clean-dot-net" depends="ikvm-init" description="Clean up .Net build files">
		<delete includeemptydirs="true">
			<fileset dir="${basedir}/src.net" defaultexcludes="false">
				<include name="**/bin/**" />
				<include name="**/obj/**" />
				<include name="**/.vs/**" />
				<include name="**/*.suo" />
				<include name="**/*.user" />
			</fileset>
		</delete>

		<delete dir="${ikvm.working.dir}" />
	</target>

	<target name="clean-ruby" depends="init" description="Clean up Ruby files">
		<delete dir="${basedir}/src.ruby/mpxj/doc" />
		<delete dir="${basedir}/src.ruby/mpxj/legal" />
		<delete dir="${basedir}/src.ruby/mpxj/pkg" />
		<delete dir="${basedir}/src.ruby/mpxj/Gemfile.lock" />

		<delete includeemptydirs="true">
			<fileset dir="${basedir}/src.ruby/mpxj" defaultexcludes="false">
				<include name="**/*.jar" />
			</fileset>
		</delete>
	</target>

	<target name="clean-python" depends="init" description="Clean up python files">
		<delete dir="${basedir}/src.python/mpxj/build" />
		<delete dir="${basedir}/src.python/mpxj/dist" />
		<delete dir="${basedir}/src.python/mpxj/mpxj.egg-info" />
		<delete dir="${basedir}/src.python/mpxj/legal" />
		<delete dir="${basedir}/src.python/mpxj/mpxj/lib" />
		<mkdir dir="${basedir}/src.python/mpxj/mpxj/lib" />
	</target>

	<target name="clean" depends="init, clean-temp, clean-dot-net, clean-ruby, clean-python, maven-clean" description="Clean up all files">
		<delete file="${basedir}/mpxj.jar" />
		<delete file="${basedir}/mpxj-test.jar" />

		<delete>
			<fileset dir="${basedir}/src.net/lib">
				<include name="**/*.tlb"/>
				<include name="**/*.bat"/>
				<include name="**/*.dll"/>
				<exclude name="**/ikvm-native*.dll"/>
				<exclude name="**/IKVM.*.dll"/>
			</fileset>
		</delete>

		<delete>
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</delete>
	</target>

	<target name="maven-clean" depends="init" description="Cleans the maven directory">
		<exec executable="${maven.cmd}" dir="${basedir}" failonerror="true">
			<arg line="clean" />
		</exec>
	</target>

	<!-- Ensure mkdocs-material is installed: py -m pip install - -upgrade mkdocs-material -->
	<target name="site-build" depends="changelog, mkdocs-site-build, maven-site-build, readme-build" description="Produce site content"/>

	<target name="mkdocs-site-build" depends="init" description="Execute mkdocs to produce site content">
		<property name="docs.dir" value="${basedir}/docs" />
		<copy file="${basedir}/CHANGELOG.md" tofile="${basedir}/mkdocs/docs/CHANGELOG.md"/>
		<exec executable="${python.cmd}" dir="${basedir}/mkdocs" failonerror="true">
			<arg line="-m mkdocs build -d ${docs.dir}" />
		</exec>
		<delete file="${basedir}/docs/sitemap.xml" />
		<delete file="${basedir}/docs/sitemap.xml.gz" />
		<echo file="${docs.dir}/CNAME" append="false">www.mpxj.org</echo>
	</target>

	<target name="maven-site-build" depends="init" description="Execute maven to produce site content">
		<exec executable="${maven.cmd}" dir="${basedir}" failonerror="true">
			<arg line="post-site" />
		</exec>

		<!-- Remove the table which just lists the version numbers -->
		<replaceregexp
			file="docs/changes-report.html"
			match='&lt;h3&gt;&lt;a name="Release_History"&gt;(.+?)/table&gt;'
		    replace=""
			flags="gis"
			byline="false"/>
	</target>

	<target name="readme-build" depends="init" description="Populate readme.md">
		<copy file="${basedir}/mkdocs/docs/index.md" tofile="${basedir}/readme.md"/>

		<replaceregexp file="${basedir}/readme.md"
		               match='\]\((.+)\.md\)'
		               replace='](https://www.mpxj.org/\1/)'
		               byline="true">
		</replaceregexp>

		<replaceregexp file="${basedir}/readme.md"
		               match='"images/'
		               replace='"mkdocs/docs/images/'
		               byline="true">
		</replaceregexp>

		<replaceregexp file="${basedir}/readme.md"
		               match='# Introduction'
		               replace='# MPXJ'
		               byline="true">
		</replaceregexp>
	</target>

	<target name="maven-test" depends="init" description="Execute maven and run tests">
		<exec executable="${maven.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-Dmpxj.junit.datadir=${basedir}/junit/data clean test" />
		</exec>
	</target>

	<target name="maven-deploy" depends="init" description="Execute maven and deploy to OSSRH">
		<exec executable="${maven.cmd}" dir="${basedir}" failonerror="true">
			<arg line="-DskipTests=true clean deploy" />
		</exec>
	</target>

	<target name="github-deploy" depends="init" description="Deploy to GitHub">
		<exec executable="gh" failonerror="true">
			<arg line='release create -F ${dist.dir}/readme.md -t "Version ${current.version}" v${current.version} ${distribution}'/>
		</exec>
	</target>

	<target name="nuget-package" depends="init" description="Create NuGet packages">
		<property name="nuspec.dir" value="${basedir}/src.net/nuget"/>

		<exec executable="${nuget.cmd}" failonerror="true">
			<arg value="update"/>
			<arg value="-self"/>
		</exec>

		<replace dir="${nuspec.dir}" token="0.0.0" value="${current.version}">
			<include name="*.nuspec" />
		</replace>

		<antcall target="nuget-pack">
			<param name="nuget.spec" value="mpxj"/>
		</antcall>

		<antcall target="nuget-pack">
			<param name="nuget.spec" value="mpxj-for-csharp"/>
		</antcall>

		<antcall target="nuget-pack">
			<param name="nuget.spec" value="mpxj-for-vb"/>
		</antcall>

		<antcall target="nuget-pack">
			<param name="nuget.spec" value="mpxj-test"/>
		</antcall>

		<replace dir="${nuspec.dir}" token="${current.version}" value="0.0.0">
			<include name="*.nuspec" />
		</replace>
	</target>

	<target name="nuget-pack">
		<exec executable="${nuget.cmd}" failonerror="true">
			<arg value="pack"/>
			<arg value="${nuspec.dir}/${nuget.spec}.nuspec"/>
			<arg value="-outputdirectory"/>
			<arg value="${dist.dir}"/>
			<arg value="-version"/>
			<arg value="${current.version}"/>
			<arg value="-verbosity"/>
			<arg value="quiet"/>
			<arg value="-nopackageanalysis"/>
		</exec>
	</target>

	<target name="nuget-push">
		<exec executable="${nuget.cmd}" failonerror="true">
			<arg value="push"/>
			<arg value="-Source"/>
			<arg value="https://www.nuget.org/api/v2/package"/>
			<arg value="-Timeout"/>
			<arg value="1200"/>
			<arg value="-Verbosity"/>
			<arg value="Detailed"/>
			<arg value="-ApiKey"/>
			<arg value="${env.NUGET_API_KEY}"/>
			<arg value="${dist.dir}/net.sf.${nuget.package}.${current.version}.nupkg"/>
		</exec>
	</target>

	<target name="nuget-deploy" depends="init" description="Deploy NuGet packages">
		<antcall target="nuget-push">
			<param name="nuget.package" value="mpxj"/>
		</antcall>

		<antcall target="nuget-push">
			<param name="nuget.package" value="mpxj-for-csharp"/>
		</antcall>

		<antcall target="nuget-push">
			<param name="nuget.package" value="mpxj-for-vb"/>
		</antcall>
	</target>

	<!-- Experimental - work in progress -->
	<target name="j2objc">
		<property name="j2objc.dir" value="../j2objc-1.0.2"/>
	    <fileset
	    	id="source.fileset"
	    	dir="src"
	    	includes="**/*.java"
	    	excludes="net/sf/mpxj/explorer/**,net/sf/mpxj/mspdi/**,net/sf/mpxj/primavera/**,net/sf/mpxj/ikvm/**"
	    />
	    <pathconvert property="source.files" refid="source.fileset" pathsep=" "/>
		<java jar="${j2objc.dir}/lib/j2objc.jar" fork="true">
			<arg line="-Xbootclasspath:${j2objc.dir}/lib/jre_emul.jar -d src.objc"/>
			<arg line=" ${source.files}"/>
		</java>
	</target>

	<!-- Run this after xjc to fix incorrectly escaped XML in javadoc comments -->
	<target name="fix-jaxb-comments" depends="init" description="Fix JAXB generated comments">
		<replaceregexp
		               match="( \*[ ]+&amp;lt;.+)&gt;"
		               replace="\1&amp;gt;"
		               byline="true">
			<fileset dir="${basedir}/src/main/java" includes="**/schema/*.java" />
		</replaceregexp>

		<replaceregexp
		               match='(base="&amp;lt;.+)&gt;'
		               replace="\1&amp;gt;"
		               byline="true">
			<fileset dir="${basedir}/src/main/java" includes="**/schema/*.java" />
		</replaceregexp>

	</target>

</project>
